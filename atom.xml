<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SylvanasSun&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sylvanassun.github.io/"/>
  <updated>2018-01-08T14:31:33.979Z</updated>
  <id>https://sylvanassun.github.io/</id>
  
  <author>
    <name>SylvanasSun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot自动配置的&quot;魔法&quot;是如何实现的？</title>
    <link href="https://sylvanassun.github.io/2018/01/08/2018-01-08-spring_boot_auto_configure/"/>
    <id>https://sylvanassun.github.io/2018/01/08/2018-01-08-spring_boot_auto_configure/</id>
    <published>2018-01-08T10:00:00.000Z</published>
    <updated>2018-01-08T14:31:33.979Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot是Spring旗下众多的子项目之一，其理念是约定优于配置，它通过实现了自动配置（大多数用户平时习惯设置的配置作为默认配置）的功能来为用户快速构建出标准化的应用。Spring Boot的特点可以概述为如下几点：</p>
<ul>
<li><p>内置了嵌入式的Tomcat、Jetty等Servlet容器，应用可以不用打包成War格式，而是可以直接以Jar格式运行。</p>
</li>
<li><p>提供了多个可选择的”starter”以简化Maven的依赖管理（也支持Gradle），让您可以按需加载需要的功能模块。</p>
</li>
<li><p>尽可能地进行自动配置，减少了用户需要动手写的各种冗余配置项，Spring Boot提倡无XML配置文件的理念，使用Spring Boot生成的应用完全不会生成任何配置代码与XML配置文件。</p>
</li>
<li><p>提供了一整套的对应用状态的监控与管理的功能模块（通过引入spring-boot-starter-actuator），包括应用的线程信息、内存信息、应用是否处于健康状态等，为了满足更多的资源监控需求，Spring Cloud中的很多模块还对其进行了扩展。</p>
</li>
</ul>
<p>有关Spring Boot的使用方法就不做多介绍了，如有兴趣请自行阅读官方文档<a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>或其他文章。</p>
<p>如今微服务的概念愈来愈热，转型或尝试微服务的团队也在如日渐增，而对于技术选型，Spring Cloud是一个比较好的选择，它提供了一站式的分布式系统解决方案，包含了许多构建分布式系统与微服务需要用到的组件，例如服务治理、API网关、配置中心、消息总线以及容错管理等模块。可以说，Spring Cloud”全家桶”极其适合刚刚接触微服务的团队。似乎有点跑题了，不过说了这么多，我想要强调的是，Spring Cloud中的每个组件都是基于Spring Boot构建的，而理解了Spring Boot的自动配置的原理，显然也是有好处的。</p>
<p>Spring Boot的自动配置看起来神奇，其实原理非常简单，背后全依赖于@Conditional注解来实现的。</p>
<blockquote>
<p>本文作者为<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>，首发于<a href="https://sylvanassun.github.io/">SylvanasSun’s Blog</a>。<br>原文链接：<a href="https://sylvanassun.github.io/2018/01/08/2018-01-08-spring_boot_auto_configure/">https://sylvanassun.github.io/2018/01/08/2018-01-08-spring_boot_auto_configure/</a><br>（转载请务必保留本段声明，并且保留超链接。）</p>
</blockquote>
<h3 id="什么是-Conditional？"><a href="#什么是-Conditional？" class="headerlink" title="什么是@Conditional？"></a>什么是@Conditional？</h3><hr>
<p>@Conditional是由Spring 4提供的一个新特性，用于根据特定条件来控制Bean的创建行为。而在我们开发基于Spring的应用的时候，难免会需要根据条件来注册Bean。</p>
<p>例如，你想要根据不同的运行环境，来让Spring注册对应环境的数据源Bean，对于这种简单的情况，完全可以使用@Profile注解实现，就像下面代码所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@Profile</span>(<span class="string">"DEV"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> DataSource <span class="title">devDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@Profile</span>(<span class="string">"PROD"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> DataSource <span class="title">prodDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>剩下只需要设置对应的Profile属性即可，设置方法有如下三种：</p>
<ul>
<li><p>通过<code>context.getEnvironment().setActiveProfiles(&quot;PROD&quot;)</code>来设置Profile属性。</p>
</li>
<li><p>通过设定jvm的<code>spring.profiles.active</code>参数来设置环境（Spring Boot中可以直接在<code>application.properties</code>配置文件中设置该属性）。</p>
</li>
<li><p>通过在DispatcherServlet的初始参数中设置。</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;</div><div class="line">	&lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</div><div class="line">	&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">	&lt;init-param&gt;</div><div class="line">		&lt;param-name&gt;spring.profiles.active&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;PROD&lt;/param-value&gt;</div><div class="line">	&lt;/init-param&gt;</div><div class="line">&lt;/servlet&gt;</div></pre></td></tr></table></figure>
<p>但这种方法只局限于简单的情况，而且通过源码我们可以发现@Profile自身也使用了@Conditional注解。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.context.annotation;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Conditional</span>(&#123;ProfileCondition.class&#125;) <span class="comment">// 组合了Conditional注解</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Profile &#123;</div><div class="line">    String[] value();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.springframework.context.annotation;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">    ProfileCondition() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 通过提取出@Profile注解中的value值来与profiles配置信息进行匹配</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(context.getEnvironment() != <span class="keyword">null</span>) &#123;</div><div class="line">            MultiValueMap attrs = metadata.getAllAnnotationAttributes(Profile.class.getName());</div><div class="line">            <span class="keyword">if</span>(attrs != <span class="keyword">null</span>) &#123;</div><div class="line">                Iterator var4 = ((List)attrs.get(<span class="string">"value"</span>)).iterator();</div><div class="line"></div><div class="line">                Object value;</div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    <span class="keyword">if</span>(!var4.hasNext()) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    value = var4.next();</div><div class="line">                &#125; <span class="keyword">while</span>(!context.getEnvironment().acceptsProfiles((String[])((String[])value)));</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在业务复杂的情况下，显然需要使用到@Conditional注解来提供更加灵活的条件判断，例如以下几个判断条件：</p>
<ul>
<li><p>在类路径中是否存在这样的一个类。</p>
</li>
<li><p>在Spring容器中是否已经注册了某种类型的Bean（如未注册，我们可以让其自动注册到容器中，上一条同理）。</p>
</li>
<li><p>一个文件是否在特定的位置上。</p>
</li>
<li><p>一个特定的系统属性是否存在。</p>
</li>
<li><p>在Spring的配置文件中是否设置了某个特定的值。</p>
</li>
</ul>
<p>举个栗子，假设我们有两个基于不同数据库实现的DAO，它们全都实现了UserDao，其中JdbcUserDAO与MySql进行连接，MongoUserDAO与MongoDB进行连接。现在，我们有了一个需求，需要根据命令行传入的系统参数来注册对应的UserDao，就像<code>java -jar app.jar -DdbType=MySQL</code>会注册JdbcUserDao，而<code>java -jar app.jar -DdbType=MongoDB</code>则会注册MongoUserDao。使用@Conditional可以很轻松地实现这个功能，仅仅需要在你自定义的条件类中去实现Condition接口，让我们来看下面的代码。（以下案例来自：<a href="https://dzone.com/articles/how-springboot-autoconfiguration-magic-works）" target="_blank" rel="external">https://dzone.com/articles/how-springboot-autoconfiguration-magic-works）</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</div><div class="line">	....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUserDAO</span> <span class="keyword">implements</span> <span class="title">UserDAO</span> </span>&#123;</div><div class="line">	....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoUserDAO</span> <span class="keyword">implements</span> <span class="title">UserDAO</span> </span>&#123;</div><div class="line">	....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLDatabaseTypeCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line"> 		String enabledDBType = System.getProperty(<span class="string">"dbType"</span>); <span class="comment">// 获得系统参数 dbType</span></div><div class="line"> 		<span class="comment">// 如果该值等于MySql，则条件成立</span></div><div class="line"> 		<span class="keyword">return</span> (enabledDBType != <span class="keyword">null</span> &amp;&amp; enabledDBType.equalsIgnoreCase(<span class="string">"MySql"</span>));</div><div class="line"> 	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 与上述逻辑一致</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBDatabaseTypeCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line"> 		String enabledDBType = System.getProperty(<span class="string">"dbType"</span>);</div><div class="line"> 		<span class="keyword">return</span> (enabledDBType != <span class="keyword">null</span> &amp;&amp; enabledDBType.equalsIgnoreCase(<span class="string">"MongoDB"</span>));</div><div class="line"> 	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 根据条件来注册不同的Bean</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@Conditional</span>(MySQLDatabaseTypeCondition.class)</div><div class="line">	<span class="function"><span class="keyword">public</span> UserDAO <span class="title">jdbcUserDAO</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> JdbcUserDAO();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@Conditional</span>(MongoDBDatabaseTypeCondition.class)</div><div class="line">	<span class="function"><span class="keyword">public</span> UserDAO <span class="title">mongoUserDAO</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MongoUserDAO();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，我们又有了一个新需求，我们想要根据当前工程的类路径中是否存在MongoDB的驱动类来确认是否注册MongoUserDAO。为了实现这个需求，可以创建检查MongoDB驱动是否存在的两个条件类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDriverPresentsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(<span class="string">"com.mongodb.Server"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDriverNotPresentsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(<span class="string">"com.mongodb.Server"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如，你想要在UserDAO没有被注册的情况下去注册一个UserDAOBean，那么我们可以定义一个条件类来检查某个类是否在容器中已被注册。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAOBeanNotPresentsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line">		UserDAO userDAO = conditionContext.getBeanFactory().getBean(UserDAO.class);</div><div class="line">		<span class="keyword">return</span> (userDAO == <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你想根据配置文件中的某项属性来决定是否注册MongoDAO，例如<code>app.dbType</code>是否等于<code>MongoDB</code>，我们可以实现以下的条件类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDbTypePropertyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line">		String dbType = conditionContext.getEnvironment().getProperty(<span class="string">"app.dbType"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"MONGO"</span>.equalsIgnoreCase(dbType);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们已经尝试并实现了各种类型的条件判断，接下来，我们可以选择一种更为优雅的方式，就像@Profile一样，以注解的方式来完成条件判断。首先，我们需要定义一个注解类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Conditional</span>(DatabaseTypeCondition.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DatabaseType &#123;</div><div class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体的条件判断逻辑在DatabaseTypeCondition类中，它会根据系统参数<code>dbType</code>来判断注册哪一个Bean。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseTypeCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line">		Map&lt;String, Object&gt; attributes = metadata</div><div class="line">											.getAnnotationAttributes(DatabaseType.class.getName());</div><div class="line">		String type = (String) attributes.get(<span class="string">"value"</span>);</div><div class="line">		<span class="comment">// 默认值为MySql</span></div><div class="line">		String enabledDBType = System.getProperty(<span class="string">"dbType"</span>, <span class="string">"MySql"</span>);</div><div class="line">		<span class="keyword">return</span> (enabledDBType != <span class="keyword">null</span> &amp;&amp; type != <span class="keyword">null</span> &amp;&amp; enabledDBType.equalsIgnoreCase(type));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，在配置类应用该注解即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@DatabaseType</span>(<span class="string">"MySql"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> UserDAO <span class="title">jdbcUserDAO</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> JdbcUserDAO();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@DatabaseType</span>(<span class="string">"mongoDB"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> UserDAO <span class="title">mongoUserDAO</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MongoUserDAO();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AutoConfigure源码分析"><a href="#AutoConfigure源码分析" class="headerlink" title="AutoConfigure源码分析"></a>AutoConfigure源码分析</h3><hr>
<p>通过了解@Conditional注解的机制其实已经能够猜到自动配置是如何实现的了，接下来我们通过源码来看看它是怎么做的。本文中讲解的源码基于Spring Boot 1.5.9版本（最新的正式版本）。</p>
<p>使用过Spring Boot的童鞋应该都很清楚，它会替我们生成一个入口类，其命名规格为<code>ArtifactNameApplication</code>，通过这个入口类，我们可以发现一些信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(DemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先该类被@SpringBootApplication注解修饰，我们可以先从它开始分析，查看源码后可以发现它是一个包含许多注解的组合注解。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@SpringBootConfiguration</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@ComponentScan</span>(</div><div class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</div><div class="line">    type = FilterType.CUSTOM,</div><div class="line">    classes = &#123;TypeExcludeFilter.class&#125;</div><div class="line">), <span class="meta">@Filter</span>(</div><div class="line">    type = FilterType.CUSTOM,</div><div class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</div><div class="line">)&#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</div><div class="line">    <span class="meta">@AliasFor</span>(</div><div class="line">        annotation = EnableAutoConfiguration.class,</div><div class="line">        attribute = <span class="string">"exclude"</span></div><div class="line">    )</div><div class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@AliasFor</span>(</div><div class="line">        annotation = EnableAutoConfiguration.class,</div><div class="line">        attribute = <span class="string">"excludeName"</span></div><div class="line">    )</div><div class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@AliasFor</span>(</div><div class="line">        annotation = ComponentScan.class,</div><div class="line">        attribute = <span class="string">"basePackages"</span></div><div class="line">    )</div><div class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@AliasFor</span>(</div><div class="line">        annotation = ComponentScan.class,</div><div class="line">        attribute = <span class="string">"basePackageClasses"</span></div><div class="line">    )</div><div class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该注解相当于同时声明了@Configuration、@EnableAutoConfiguration与@ComponentScan三个注解（如果我们想定制自定义的自动配置实现，声明这三个注解就足够了），而@EnableAutoConfiguration是我们的关注点，从它的名字可以看出来，它是用来开启自动配置的，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@AutoConfigurationPackage</span></div><div class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</div><div class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</div><div class="line"></div><div class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们发现@Import（Spring 提供的一个注解，可以导入配置类或者Bean到当前类中）导入了EnableAutoConfigurationImportSelector类，根据名字来看，它应该就是我们要找到的目标了。不过查看它的源码发现它已经被Deprecated了，而官方API中告知我们去查看它的父类AutoConfigurationImportSelector。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></div><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableAutoConfigurationImportSelector</span> <span class="keyword">extends</span> <span class="title">AutoConfigurationImportSelector</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnableAutoConfigurationImportSelector</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass().equals(EnableAutoConfigurationImportSelector.class)?((Boolean)<span class="keyword">this</span>.getEnvironment().getProperty(<span class="string">"spring.boot.enableautoconfiguration"</span>, Boolean.class, Boolean.valueOf(<span class="keyword">true</span>))).booleanValue():<span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于AutoConfigurationImportSelector的源码太长了，这里我只截出关键的地方，显然方法selectImports是选择自动配置的主入口，它调用了其他的几个方法来加载元数据等信息，最后返回一个包含许多自动配置类信息的字符串数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</div><div class="line">        <span class="keyword">return</span> NO_IMPORTS;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            AutoConfigurationMetadata ex = AutoConfigurationMetadataLoader.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</div><div class="line">            AnnotationAttributes attributes = <span class="keyword">this</span>.getAttributes(annotationMetadata);</div><div class="line">            List configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</div><div class="line">            configurations = <span class="keyword">this</span>.removeDuplicates(configurations);</div><div class="line">            configurations = <span class="keyword">this</span>.sort(configurations, ex);</div><div class="line">            Set exclusions = <span class="keyword">this</span>.getExclusions(annotationMetadata, attributes);</div><div class="line">            <span class="keyword">this</span>.checkExcludedClasses(configurations, exclusions);</div><div class="line">            configurations.removeAll(exclusions);</div><div class="line">            configurations = <span class="keyword">this</span>.filter(configurations, ex);</div><div class="line">            <span class="keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</div><div class="line">            <span class="keyword">return</span> (String[])configurations.toArray(<span class="keyword">new</span> String[configurations.size()]);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException var6) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var6);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重点在于方法getCandidateConfigurations()返回了自动配置类的信息列表，而它通过调用SpringFactoriesLoader.loadFactoryNames()来扫描加载含有META-INF/spring.factories文件的jar包，该文件记录了具有哪些自动配置类。（建议还是用IDE去看源码吧，这些源码单行实在太长了，估计文章中的观看效果很差）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</div><div class="line">    List configurations = SpringFactoriesLoader</div><div class="line">    									.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</div><div class="line">    Assert.notEmpty(configurations, "No auto configuration classes </div><div class="line">    found in META-INF spring.factories. </div><div class="line">    If you are using a custom packaging, make sure that file is correct.");</div><div class="line">    return configurations;</div><div class="line">&#125;</div><div class="line">	</div><div class="line">public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader) &#123;</div><div class="line">    String factoryClassName = factoryClass.getName();</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        Enumeration ex = classLoader != null?classLoader.getResources("META-INF/spring.factories"):ClassLoader.getSystemResources("META-INF/spring.factories");</div><div class="line">        ArrayList result = new ArrayList();</div><div class="line"></div><div class="line">        while(ex.hasMoreElements()) &#123;</div><div class="line">            URL url = (URL)ex.nextElement();</div><div class="line">            Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));</div><div class="line">            String factoryClassNames = properties.getProperty(factoryClassName);</div><div class="line">            result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return result;</div><div class="line">    &#125; catch (IOException var8) &#123;</div><div class="line">        throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() + "] factories from location [" + "META-INF/spring.factories" + "]", var8);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fn9iobng7zj21270o9gpg.jpg" alt="spring.factories"></p>
<h3 id="自动配置类中的条件注解"><a href="#自动配置类中的条件注解" class="headerlink" title="自动配置类中的条件注解"></a>自动配置类中的条件注解</h3><hr>
<p>接下来，我们在spring.factories文件中随便找一个自动配置类，来看看是怎样实现的。我查看了MongoDataAutoConfiguration的源码，发现它声明了@ConditionalOnClass注解，通过看该注解的源码后可以发现，这是一个组合了@Conditional的组合注解，它的条件类是OnClassCondition。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Mongo.class, MongoTemplate.class&#125;)</div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;MongoProperties.class&#125;)</div><div class="line"><span class="meta">@AutoConfigureAfter</span>(&#123;MongoAutoConfiguration.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDataAutoConfiguration</span> </span>&#123;</div><div class="line">	....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Conditional</span>(&#123;OnClassCondition.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnClass &#123;</div><div class="line">    Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，我们开始看OnClassCondition的源码，发现它并没有直接实现Condition接口，只好往上找，发现它的父类SpringBootCondition实现了Condition接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnClassCondition</span> <span class="keyword">extends</span> <span class="title">SpringBootCondition</span> <span class="keyword">implements</span> <span class="title">AutoConfigurationImportFilter</span>, <span class="title">BeanFactoryAware</span>, <span class="title">BeanClassLoaderAware</span> </span>&#123;</div><div class="line">	.....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringBootCondition</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line">        String classOrMethodName = getClassOrMethodName(metadata);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ConditionOutcome ex = <span class="keyword">this</span>.getMatchOutcome(context, metadata);</div><div class="line">            <span class="keyword">this</span>.logOutcome(classOrMethodName, ex);</div><div class="line">            <span class="keyword">this</span>.recordEvaluation(context, classOrMethodName, ex);</div><div class="line">            <span class="keyword">return</span> ex.isMatch();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoClassDefFoundError var5) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not evaluate condition on "</span> + classOrMethodName + <span class="string">" due to "</span> + var5.getMessage() + <span class="string">" not found. Make sure your own configuration does not rely on that class. This can also happen if you are @ComponentScanning a springframework package (e.g. if you put a @ComponentScan in the default package by mistake)"</span>, var5);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException var6) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error processing condition on "</span> + <span class="keyword">this</span>.getName(metadata), var6);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ConditionOutcome <span class="title">getMatchOutcome</span><span class="params">(ConditionContext var1, AnnotatedTypeMetadata var2)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SpringBootCondition实现的matches方法依赖于一个抽象方法this.getMatchOutcome(context, metadata)，我们在它的子类OnClassCondition中可以找到这个方法的具体实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ConditionOutcome <span class="title">getMatchOutcome</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</div><div class="line">    ClassLoader classLoader = context.getClassLoader();</div><div class="line">    ConditionMessage matchMessage = ConditionMessage.empty();</div><div class="line">    <span class="comment">// 找出所有ConditionalOnClass注解的属性</span></div><div class="line">    List onClasses = <span class="keyword">this</span>.getCandidates(metadata, ConditionalOnClass.class);</div><div class="line">    List onMissingClasses;</div><div class="line">    <span class="keyword">if</span>(onClasses != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 找出不在类路径中的类</span></div><div class="line">        onMissingClasses = <span class="keyword">this</span>.getMatches(onClasses, OnClassCondition.MatchType.MISSING, classLoader);</div><div class="line">        <span class="comment">// 如果存在不在类路径中的类，匹配失败</span></div><div class="line">        <span class="keyword">if</span>(!onMissingClasses.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnClass.class, <span class="keyword">new</span> Object[<span class="number">0</span>]).didNotFind(<span class="string">"required class"</span>, <span class="string">"required classes"</span>).items(Style.QUOTE, onMissingClasses));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        matchMessage = matchMessage.andCondition(ConditionalOnClass.class, <span class="keyword">new</span> Object[<span class="number">0</span>]).found(<span class="string">"required class"</span>, <span class="string">"required classes"</span>).items(Style.QUOTE, <span class="keyword">this</span>.getMatches(onClasses, OnClassCondition.MatchType.PRESENT, classLoader));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 接着找出所有ConditionalOnMissingClass注解的属性</span></div><div class="line">    <span class="comment">// 它与ConditionalOnClass注解的含义正好相反，所以以下逻辑也与上面相反</span></div><div class="line">    onMissingClasses = <span class="keyword">this</span>.getCandidates(metadata, ConditionalOnMissingClass.class);</div><div class="line">    <span class="keyword">if</span>(onMissingClasses != <span class="keyword">null</span>) &#123;</div><div class="line">        List present = <span class="keyword">this</span>.getMatches(onMissingClasses, OnClassCondition.MatchType.PRESENT, classLoader);</div><div class="line">        <span class="keyword">if</span>(!present.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnMissingClass.class, <span class="keyword">new</span> Object[<span class="number">0</span>]).found(<span class="string">"unwanted class"</span>, <span class="string">"unwanted classes"</span>).items(Style.QUOTE, present));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        matchMessage = matchMessage.andCondition(ConditionalOnMissingClass.class, <span class="keyword">new</span> Object[<span class="number">0</span>]).didNotFind(<span class="string">"unwanted class"</span>, <span class="string">"unwanted classes"</span>).items(Style.QUOTE, <span class="keyword">this</span>.getMatches(onMissingClasses, OnClassCondition.MatchType.MISSING, classLoader));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ConditionOutcome.match(matchMessage);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获得所有annotationType注解的属性</span></div><div class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getCandidates</span><span class="params">(AnnotatedTypeMetadata metadata, Class&lt;?&gt; annotationType)</span> </span>&#123;</div><div class="line">    MultiValueMap attributes = metadata.getAllAnnotationAttributes(annotationType.getName(), <span class="keyword">true</span>);</div><div class="line">    ArrayList candidates = <span class="keyword">new</span> ArrayList();</div><div class="line">    <span class="keyword">if</span>(attributes == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.addAll(candidates, (List)attributes.get(<span class="string">"value"</span>));</div><div class="line">        <span class="keyword">this</span>.addAll(candidates, (List)attributes.get(<span class="string">"name"</span>));</div><div class="line">        <span class="keyword">return</span> candidates;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List&lt;String&gt; list, List&lt;Object&gt; itemsToAdd)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(itemsToAdd != <span class="keyword">null</span>) &#123;</div><div class="line">        Iterator var3 = itemsToAdd.iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(var3.hasNext()) &#123;</div><div class="line">            Object item = var3.next();</div><div class="line">            Collections.addAll(list, (String[])((String[])item));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="comment">// 根据matchType.matches方法来进行匹配</span></div><div class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getMatches</span><span class="params">(Collection&lt;String&gt; candidates, OnClassCondition.MatchType matchType, ClassLoader classLoader)</span> </span>&#123;</div><div class="line">    ArrayList matches = <span class="keyword">new</span> ArrayList(candidates.size());</div><div class="line">    Iterator var5 = candidates.iterator();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(var5.hasNext()) &#123;</div><div class="line">        String candidate = (String)var5.next();</div><div class="line">        <span class="keyword">if</span>(matchType.matches(candidate, classLoader)) &#123;</div><div class="line">            matches.add(candidate);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> matches;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于match的具体实现在MatchType中，它是一个枚举类，提供了PRESENT和MISSING两种实现，前者返回类路径中是否存在该类，后者相反。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">enum</span> MatchType &#123;</div><div class="line">    PRESENT &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String className, ClassLoader classLoader)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> OnClassCondition.MatchType.isPresent(className, classLoader);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    MISSING &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String className, ClassLoader classLoader)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> !OnClassCondition.MatchType.isPresent(className, classLoader);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MatchType</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 跟我们之前看过的案例一样，都利用了类加载功能来进行判断</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">(String className, ClassLoader classLoader)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(classLoader == <span class="keyword">null</span>) &#123;</div><div class="line">            classLoader = ClassUtils.getDefaultClassLoader();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            forName(className, classLoader);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className, ClassLoader classLoader) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        <span class="keyword">return</span> classLoader != <span class="keyword">null</span>?classLoader.loadClass(className):Class.forName(className);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String var1, ClassLoader var2)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在终于真相大白，@ConditionalOnClass的含义是指定的类必须存在于类路径下，MongoDataAutoConfiguration类中声明了类路径下必须含有Mongo.class, MongoTemplate.class这两个类，否则该自动配置类不会被加载。</p>
<p>在Spring Boot中到处都有类似的注解，像@ConditionalOnBean（容器中是否有指定的Bean），@ConditionalOnWebApplication（当前工程是否为一个Web工程）等等，它们都只是@Conditional注解的扩展。当你揭开神秘的面纱，去探索本质时，发现其实Spring Boot自动配置的原理就是如此简单，在了解这些知识后，你完全可以自己去实现自定义的自动配置类，然后编写出自定义的starter。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot是Spring旗下众多的子项目之一，其理念是约定优于配置，它通过实现了自动配置（大多数用户平时习惯设置的配置作为默认配置）的功能来为用户快速构建出标准化的应用。Spring Boot的特点可以概述为如下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内置了嵌入
    
    </summary>
    
      <category term="后端" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
      <category term="Spring Boot" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="https://sylvanassun.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://sylvanassun.github.io/tags/Spring-Boot/"/>
    
      <category term="后端" scheme="https://sylvanassun.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="2018" scheme="https://sylvanassun.github.io/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>SkipList的那点事儿</title>
    <link href="https://sylvanassun.github.io/2017/12/31/2017-12-31-skip_list/"/>
    <id>https://sylvanassun.github.io/2017/12/31/2017-12-31-skip_list/</id>
    <published>2017-12-31T10:00:00.000Z</published>
    <updated>2017-12-31T12:31:28.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Skip-List的工作原理"><a href="#Skip-List的工作原理" class="headerlink" title="Skip List的工作原理"></a>Skip List的工作原理</h3><hr>
<p>Skip List（跳跃表）是一种支持快速查找的数据结构，插入、查找和删除操作都仅仅只需要<code>O(log n)</code>对数级别的时间复杂度，它的效率甚至可以与红黑树等二叉平衡树相提并论，而且实现的难度要比红黑树简单多了。</p>
<p>Skip List主要思想是将链表与二分查找相结合，它维护了一个多层级的链表结构（用空间换取时间），可以把Skip List看作一个含有多个行的链表集合，每一行就是一条链表，这样的一行链表被称为一层，每一层都是下一层的”快速通道”，即如果x层和y层都含有元素a，那么x层的a会与y层的a相互连接（垂直）。最底层的链表是含有所有节点的普通序列，而越接近顶层的链表，含有的节点则越少。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/8/86/Skip_list.svg" alt=""></p>
<p>对一个目标元素的搜索会从顶层链表的头部元素开始，然后遍历该链表，直到找到元素大于或等于目标元素的节点，如果当前元素正好等于目标，那么就直接返回它。如果当前元素小于目标元素，那么就垂直下降到下一层继续搜索，如果当前元素大于目标或到达链表尾部，则移动到前一个节点的位置，然后垂直下降到下一层。正因为Skip List的搜索过程会不断地从一层跳跃到下一层的，所以被称为跳跃表。</p>
<p>Skip List还有一个明显的特征，即它是一个不准确的概率性结构，这是因为Skip List在决定是否将节点冗余复制到上一层的时候（而在到达或超过顶层时，需要构建新的顶层）依赖于一个概率函数，举个栗子，我们使用一个最简单的概率函数：丢硬币，即概率<code>P</code>为<code>0.5</code>，那么依赖于该概率函数实现的Skip List会不断地”丢硬币”，如果硬币为正面就将节点复制到上一层，直到硬币为反。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/2/2c/Skip_list_add_element-en.gif" alt="插入元素的过程"></p>
<p>理解Skip List的原理并不困难，下面我们将使用Java来动手实现一个支持基本需求（查找，插入和删除）的Skip List。</p>
<blockquote>
<p>本文作者为<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>，首发于<a href="https://sylvanassun.github.io/">SylvanasSun’s Blog</a>。<br>原文链接：<a href="https://sylvanassun.github.io/2017/12/31/2017-12-31-skip_list/">https://sylvanassun.github.io/2017/12/31/2017-12-31-skip_list/</a><br>（转载请务必保留本段声明，并且保留超链接。）</p>
</blockquote>
<h3 id="节点与基本实现"><a href="#节点与基本实现" class="headerlink" title="节点与基本实现"></a>节点与基本实现</h3><hr>
<p>对于一个普通的链表节点一般只含有一个指向后续节点的指针（双向链表的节点含有两个指针，一个指向前节点，一个指向后节点），由于Skip List是一个多层级的链表结构，我们的设计要让节点拥有四个指针，分别对应该节点的前后左右，为了方便地将头链表永远置于顶层，还需要设置一个int属性表示该链表所处的层级。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> K key;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> V value;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> level; <span class="comment">// 该节点所处的层级</span></div><div class="line"></div><div class="line">        <span class="keyword">private</span> Node&lt;K, V&gt; up, down, next, previous;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key, V value, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.level = level;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            sb.append(<span class="string">"Node["</span>)</div><div class="line">                    .append(<span class="string">"key:"</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.key == <span class="keyword">null</span>)</div><div class="line">                sb.append(<span class="string">"None"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                sb.append(<span class="keyword">this</span>.key.toString());</div><div class="line"></div><div class="line">            sb.append(<span class="string">" value:"</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="keyword">null</span>)</div><div class="line">                sb.append(<span class="string">"None"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                sb.append(<span class="keyword">this</span>.value.toString());</div><div class="line">            sb.append(<span class="string">"]"</span>);</div><div class="line">            <span class="keyword">return</span> sb.toString();</div><div class="line">        &#125;</div><div class="line">		</div><div class="line">		<span class="comment">// 余下都是get,set方法, 这里省略</span></div><div class="line">		.....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来是SkipList的基本实现，为了能够让Key进行比较，我们规定Key的类型必须实现了Comparable接口，同时为了支持ForEach循环，该类还实现了Iterable接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipList</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">K</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">// 一个随机数生成器</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Random randomGenerator = <span class="keyword">new</span> Random();</div><div class="line">	</div><div class="line">	<span class="comment">// 默认的概率</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> DEFAULT_PROBABILITY = <span class="number">0.5</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 头节点</span></div><div class="line">    <span class="keyword">private</span> Node&lt;K, V&gt; head;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> probability;</div><div class="line">	</div><div class="line">	<span class="comment">// SkipList中的元素数量（不计算多个层级中的冗余元素）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SkipList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(DEFAULT_PROBABILITY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SkipList</span><span class="params">(<span class="keyword">double</span> probability)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.head = <span class="keyword">new</span> Node&lt;K, V&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">this</span>.probability = probability;</div><div class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">	.....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们还需要定义几个辅助方法，如下所示（都很简单）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对key进行检查</span></div><div class="line"><span class="comment">// 因为每条链表的头节点就是一个key为null的节点，所以不允许其他节点的key也为null</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkKeyValidity</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Key must be not null!"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// a是否小于等于b</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">lessThanOrEqual</span><span class="params">(K a, K b)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> a.compareTo(b) &lt;= <span class="number">0</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 概率函数</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isBuildLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> randomGenerator.nextDouble() &lt; probability;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 将y水平插入到x的后面</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">horizontalInsert</span><span class="params">(Node&lt;K, V&gt; x, Node&lt;K, V&gt; y)</span> </span>&#123;</div><div class="line">       y.setPrevious(x);</div><div class="line">       y.setNext(x.getNext());</div><div class="line">       <span class="keyword">if</span> (x.getNext() != <span class="keyword">null</span>)</div><div class="line">           x.getNext().setPrevious(y);</div><div class="line">       x.setNext(y);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// x与y进行垂直连接</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">verticalLink</span><span class="params">(Node&lt;K, V&gt; x, Node&lt;K, V&gt; y)</span> </span>&#123;</div><div class="line">       x.setDown(y);</div><div class="line">       y.setUp(x);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><hr>
<p>查找一个节点的过程如下：</p>
<ul>
<li><p>从顶层链表的头部开始进行遍历，比较每一个节点的元素与目标元素的大小。</p>
</li>
<li><p>如果当前元素小于目标元素，则继续遍历。</p>
</li>
<li><p>如果当前元素等于目标元素，返回该节点。</p>
</li>
<li><p>如果当前元素大于目标元素，移动到前一个节点（必须小于等于目标元素），然后跳跃到下一层继续遍历。</p>
</li>
<li><p>如果遍历至链表尾部，跳跃到下一层继续遍历。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">protected</span> Node&lt;K, V&gt; <span class="title">findNode</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">      Node&lt;K, V&gt; node = head;</div><div class="line">      Node&lt;K, V&gt; next = <span class="keyword">null</span>;</div><div class="line">      Node&lt;K, V&gt; down = <span class="keyword">null</span>;</div><div class="line">      K nodeKey = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">          <span class="comment">// 不断遍历直到遇见大于目标元素的节点</span></div><div class="line">          next = node.getNext();</div><div class="line">          <span class="keyword">while</span> (next != <span class="keyword">null</span> &amp;&amp; lessThanOrEqual(next.getKey(), key)) &#123;</div><div class="line">              node = next;</div><div class="line">              next = node.getNext();</div><div class="line">          &#125;</div><div class="line">	<span class="comment">// 当前元素等于目标元素，中断循环</span></div><div class="line">          nodeKey = node.getKey();</div><div class="line">          <span class="keyword">if</span> (nodeKey != <span class="keyword">null</span> &amp;&amp; nodeKey.compareTo(key) == <span class="number">0</span>)</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="comment">// 否则，跳跃到下一层级</span></div><div class="line">          down = node.getDown();</div><div class="line">          <span class="keyword">if</span> (down != <span class="keyword">null</span>) &#123;</div><div class="line">              node = down;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> node;</div><div class="line">  &#125;</div><div class="line">	</div><div class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">      checkKeyValidity(key);</div><div class="line">      Node&lt;K, V&gt; node = findNode(key);</div><div class="line"><span class="comment">// 如果找到的节点并不等于目标元素，则目标元素不存在于SkipList中</span></div><div class="line">      <span class="keyword">if</span> (node.getKey().compareTo(key) == <span class="number">0</span>)</div><div class="line">          <span class="keyword">return</span> node.getValue();</div><div class="line">      <span class="keyword">else</span></div><div class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><hr>
<p>插入操作的过程要稍微复杂些，主要在于复制节点到上一层与构建新层的操作上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">      checkKeyValidity(key);</div><div class="line"><span class="comment">// 直接找到key，然后修改对应的value即可</span></div><div class="line">      Node&lt;K, V&gt; node = findNode(key);</div><div class="line">      <span class="keyword">if</span> (node.getKey() != <span class="keyword">null</span> &amp;&amp; node.getKey().compareTo(key) == <span class="number">0</span>) &#123;</div><div class="line">          node.setValue(value);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">	</div><div class="line"><span class="comment">// 将newNode水平插入到node之后</span></div><div class="line">      Node&lt;K, V&gt; newNode = <span class="keyword">new</span> Node&lt;K, V&gt;(key, value, node.getLevel());</div><div class="line">      horizontalInsert(node, newNode);</div><div class="line">      </div><div class="line">      <span class="keyword">int</span> currentLevel = node.getLevel();</div><div class="line">      <span class="keyword">int</span> headLevel = head.getLevel();</div><div class="line">      <span class="keyword">while</span> (isBuildLevel()) &#123;</div><div class="line">          <span class="comment">// 如果当前层级已经到达或超越顶层</span></div><div class="line">	<span class="comment">// 那么需要构建一个新的顶层</span></div><div class="line">          <span class="keyword">if</span> (currentLevel &gt;= headLevel) &#123;</div><div class="line">              Node&lt;K, V&gt; newHead = <span class="keyword">new</span> Node&lt;K, V&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, headLevel + <span class="number">1</span>);</div><div class="line">              verticalLink(newHead, head);</div><div class="line">              head = newHead;</div><div class="line">              headLevel = head.getLevel();</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// 找到node对应的上一层节点</span></div><div class="line">          <span class="keyword">while</span> (node.getUp() == <span class="keyword">null</span>) &#123;</div><div class="line">              node = node.getPrevious();</div><div class="line">          &#125;</div><div class="line">          node = node.getUp();</div><div class="line"></div><div class="line">	<span class="comment">// 将newNode复制到上一层</span></div><div class="line">          Node&lt;K, V&gt; tmp = <span class="keyword">new</span> Node&lt;K, V&gt;(key, value, node.getLevel());</div><div class="line">          horizontalInsert(node, tmp);</div><div class="line">          verticalLink(tmp, newNode);</div><div class="line">          newNode = tmp;</div><div class="line">          currentLevel++;</div><div class="line">      &#125;</div><div class="line">      size++;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><hr>
<p>对于删除一个节点，需要先找到节点所在的位置（位于最底层链表中的位置），之后再自底向上地删除该节点在每一行中的冗余复制。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">    checkKeyValidity(key);</div><div class="line">    Node&lt;K, V&gt; node = findNode(key);</div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span> || node.getKey().compareTo(key) != <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"The key is not exist!"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 移动到最底层</span></div><div class="line">    <span class="keyword">while</span> (node.getDown() != <span class="keyword">null</span>)</div><div class="line">        node = node.getDown();</div><div class="line">    <span class="comment">// 自底向上地进行删除</span></div><div class="line">    Node&lt;K, V&gt; prev = <span class="keyword">null</span>;</div><div class="line">    Node&lt;K, V&gt; next = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">for</span> (; node != <span class="keyword">null</span>; node = node.getUp()) &#123;</div><div class="line">        prev = node.getPrevious();</div><div class="line">        next = node.getNext();</div><div class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span>)</div><div class="line">            prev.setNext(next);</div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>)</div><div class="line">            next.setPrevious(prev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对顶层链表进行调整，去除无效的顶层链表</span></div><div class="line">    <span class="keyword">while</span> (head.getNext() == <span class="keyword">null</span> &amp;&amp; head.getDown() != <span class="keyword">null</span>) &#123;</div><div class="line">        head = head.getDown();</div><div class="line">        head.setUp(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    size--;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><hr>
<p>由于我们的SkipList实现了Iterable接口，所以还需要实现一个迭代器。对于迭代一个Skip List，只需要找到最底层的链表并且移动到它的首节点，然后进行遍历即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">      StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">      Node&lt;K, V&gt; node = head;</div><div class="line"></div><div class="line">      <span class="comment">// 移动到最底层</span></div><div class="line">      <span class="keyword">while</span> (node.getDown() != <span class="keyword">null</span>)</div><div class="line">          node = node.getDown();</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (node.getPrevious() != <span class="keyword">null</span>)</div><div class="line">          node = node.getPrevious();</div><div class="line"></div><div class="line">      <span class="comment">// 第一个节点是头部节点，没有任何意义，所以需要移动到后一个节点</span></div><div class="line">      <span class="keyword">if</span> (node.getNext() != <span class="keyword">null</span>)</div><div class="line">          node = node.getNext();</div><div class="line"></div><div class="line"><span class="comment">// 遍历</span></div><div class="line">      <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">          sb.append(node.toString()).append(<span class="string">"\n"</span>);</div><div class="line">          node = node.getNext();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> sb.toString();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SkipListIterator&lt;K, V&gt;(head);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipListIterator</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">private</span> Node&lt;K, V&gt; node;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="title">SkipListIterator</span><span class="params">(Node&lt;K, V&gt; node)</span> </span>&#123;</div><div class="line">          <span class="keyword">while</span> (node.getDown() != <span class="keyword">null</span>)</div><div class="line">              node = node.getDown();</div><div class="line"></div><div class="line">          <span class="keyword">while</span> (node.getPrevious() != <span class="keyword">null</span>)</div><div class="line">              node = node.getPrevious();</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (node.getNext() != <span class="keyword">null</span>)</div><div class="line">              node = node.getNext();</div><div class="line"></div><div class="line">          <span class="keyword">this</span>.node = node;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.node != <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">          K result = node.getKey();</div><div class="line">          node = node.getNext();</div><div class="line">          <span class="keyword">return</span> result;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SylvanasSun/algorithms-exercise/blob/master/src/main/java/com/sylvanas/algorithms_exercise/skip_list/SkipList.java" target="_blank" rel="external">本文中实现的SkipList完整代码地址</a></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Skip_list" target="_blank" rel="external">Skip list - Wikipedia</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Skip-List的工作原理&quot;&gt;&lt;a href=&quot;#Skip-List的工作原理&quot; class=&quot;headerlink&quot; title=&quot;Skip List的工作原理&quot;&gt;&lt;/a&gt;Skip List的工作原理&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Skip List（跳跃表）是一种
    
    </summary>
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/categories/Algorithms/"/>
    
      <category term="数据结构" scheme="https://sylvanassun.github.io/categories/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/tags/Algorithms/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="数据结构" scheme="https://sylvanassun.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯的那点事儿</title>
    <link href="https://sylvanassun.github.io/2017/12/20/2017-12-20-naive_bayes/"/>
    <id>https://sylvanassun.github.io/2017/12/20/2017-12-20-naive_bayes/</id>
    <published>2017-12-20T10:00:00.000Z</published>
    <updated>2017-12-24T09:15:46.451Z</updated>
    
    <content type="html"><![CDATA[<p>在机器学习领域中，朴素贝叶斯是一种基于贝叶斯定理的简单概率分类器（分类又被称为监督式学习，所谓监督式学习即从已知样本数据中的特征信息去推测可能出现的输出以完成分类，反之聚类问题被称为非监督式学习），朴素贝叶斯在处理文本数据时可以得到较好的分类结果，所以它被广泛应用于文本分类/垃圾邮件过滤/自然语言处理等场景。</p>
<p>朴素贝叶斯假设了样本的每个特征之间是互相独立、互不影响的，比方说，如果有一个水果是红色的，形状为圆形，并且直径大约为70毫米，那么它就有可能被认为是苹果（具有最高概率的类将会被认为是最有可能的类，这被称为最大后验概率 Maximum A Posteriori），即使上述的这些特征可能会有依赖关系或有其他特征存在，朴素贝叶斯都会认为这些特征都独立地贡献了这个水果是一个苹果的概率，这种假设关系太过于理想，所以这也是朴素贝叶斯的”Naive”之处。</p>
<p>朴素贝叶斯的原名为Naive Bayes Classifier，朴素本身并不是一个正确的翻译，之所以这样翻译是因为朴素贝叶斯虽然Naive，但不代表它的效率会差，相反它的优点正在于实现简单与只需要少量的训练数据，还有另一个原因是它与贝叶斯网络等算法相比，确实是“朴素”了些。</p>
<p>在继续探讨朴素贝叶斯之前，我们先需要理解贝叶斯定理与它的前置理论条件概率与全概率公式。</p>
<blockquote>
<p>本文作者为<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>，首发于<a href="https://sylvanassun.github.io/">SylvanasSun’s Blog</a>。<br>原文链接：<a href="https://sylvanassun.github.io/2017/12/20/2017-12-20-naive_bayes/">https://sylvanassun.github.io/2017/12/20/2017-12-20-naive_bayes/</a><br>（转载请务必保留本段声明，并且保留超链接。）</p>
</blockquote>
<h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h3><hr>
<p>条件概率（Conditional Probability）是指在事件B发生的情况下，事件A发生的概率，用$P(A|B)$表示，读作在B条件下的A的概率。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fmnd8qww3lj20d308fdfw.jpg" alt=""></p>
<p>在上方的文氏图中，描述了两个事件A和B，与它们的交集<code>A ∩ B</code>，代入条件概率公式，可推出事件A发生的概率为$P(A|B) = \frac{P({A}\bigcap{B})}{P(B)}$。</p>
<p>对该公式稍作变换可推得${P({A}\bigcap{B})} = {P(A|B)}{P(B)}$与${P({A}\bigcap{B})} = {P(B|A)}{P(A)}$（<code>P(B|A)</code>为在A条件下的B的概率）。</p>
<p>然后根据这个关系可推得${P(A|B)}{P(B)} = {P(B|A)}{P(A)}$。</p>
<p>让我们举个栗子，假设有两个人在扔两个个六面的骰子<code>D1</code>与<code>D2</code>，我们来预测<code>D1</code>与<code>D2</code>的向上面的结果的概率。</p>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fmne20wdcpj20a8078q2w.jpg" alt=""></p>
<p>在<code>Table1</code>中描述了一个含有36个结果的样本空间，标红处为<code>D1</code>的向上面为2的6个结果，概率为$P(D1=2) = \frac{6}{36} = \frac{1}{6}$。</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fmne218l47j209l0723yg.jpg" alt=""></p>
<p><code>Table2</code>描述了<code>D1 + D2 &lt;= 5</code>的概率，一共10个结果，用条件概率公式表示为${P(D1+D2\leq5)} = \frac{10}{36}$。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fmne21knj0j20a3071q2w.jpg" alt=""></p>
<p><code>Table3</code>描述了满足<code>Table2</code>的条件同时也满足<code>D1 = 2</code>的结果，它选中了<code>Table2</code>中的3个结果，用条件概率公式表示为${P(D1=2 | D1+D2\leq5)} = \frac{3}{10} = 0.3$。</p>
<h3 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h3><hr>
<p>全概率公式是将边缘概率与条件概率关联起来的基本规则，它表示了一个结果的总概率，可以通过几个不同的事件来实现。</p>
<p>全概率公式将对一复杂事件的概率求解问题转化为了在不同情况下发生的简单事件的概率的求和问题，公式为$P(B) = {\sum_{i=1}^n}P(A_i)P(B|A_i)$。</p>
<p>假定一个样本空间S，它是两个事件A与C之和，同时事件B与它们两个都有交集，如下图所示：</p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fmnd8rfet4j20ka0imdgo.jpg" alt=""></p>
<p>那么事件B的概率可以表示为$P(B) = P({B}\bigcap{A}) + P({B}\bigcap{C})$</p>
<p>通过条件概率，可以推断出$P({B}\bigcap{A}) = P(B|A)P(A)$，所以$P(B) = P(B|A)P(A) + P(B|C)P(C)$</p>
<p>这就是全概率公式，即事件B的概率等于事件A与事件C的概率分别乘以B对这两个事件的条件概率之和。</p>
<p>同样举个栗子来应用这个公式，假设有两家工厂生产并对外提供电灯泡，工厂X生产的电灯泡在99%的情况下能够工作超过5000小时，工厂Y生产的电灯泡在95%的情况下能够工作超过5000小时。工厂X在市场的占有率为60%，工厂Y为40%，如何推测出购买的灯泡的工作时间超过5000小时的概率是多少呢？</p>
<p>运用全概率公式，可以得出：<br>$$<br>\begin{equation}\begin{split}<br>Pr(A) &amp;=Pr(A | B_x) \cdot Pr(B_x) + Pr(A|B_y) \cdot Pr(B_y)\<br>&amp;= \frac{99}{100} \cdot \frac{6}{10} + \frac{95}{100} \cdot \frac{4}{10}\<br>&amp;= \frac{594 + 380}{1000}\<br>&amp;= \frac{974}{1000}<br>\end{split}\end{equation}<br>$$</p>
<ul>
<li><p>$Pr(B_x) = \frac{6}{10}$：购买到工厂X制造的电灯泡的概率。</p>
</li>
<li><p>$Pr(B_y) = \frac{4}{10}$：购买到工厂y制造的电灯泡的概率。</p>
</li>
<li><p>$Pr(A|B_x) = \frac{99}{100}$：工厂x制造的电灯泡工作时间超过5000小时的概率。</p>
</li>
<li><p>$Pr(A|B_y) = \frac{95}{100}$：工厂y制造的电灯泡工作时间超过5000小时的概率。</p>
</li>
</ul>
<p>因此，可以得知购买一个工作时间超过5000小时的电灯泡的概率为97.4%。</p>
<h3 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h3><hr>
<p>贝叶斯定理最早由英国数学家（同时也是神学家和哲学家）Thomas Bayes（1701-1761）提出，有趣的是他生前并没有发表过什么有关数学的学术文章，就连他最著名的成就贝叶斯定理也是由他的朋友Richard Price从他死后的遗物（笔记）中找到并发表的。</p>
<p>Thomas Bayes在晚年对概率学产生了兴趣，所谓的贝叶斯定理只是他生前为了解决一个逆概率问题（为了证明上帝是否存在，似乎哲学家们都很喜欢这个问题啊）所写的一篇文章。在那个时期，人们已经能够计算出正向概率问题，比方说，有一个袋子中有X个白球，Y个黑球，你伸手进去摸到黑球的概率是多少？这就是一个正向概率问题，而逆概率问题正好反过来，我们事先并不知道袋子中球的比例，而是不断伸手去摸好几个球，然后根据它们的颜色来推测黑球与白球的比例。</p>
<p>贝叶斯定理是关于随机事件A和B的条件概率的一则定理。通常，事件A在事件B（发生）的条件下的概率，与事件B在事件A（发生）的条件下的概率是不一样的，但它们两者之间是有确定的关系的，贝叶斯定理陈述了这个关系。</p>
<p>贝叶斯定理的一个主要应用为贝叶斯推理，它是一种建立在主观判断基础之上的推理方法，也就是说，你只需要先预估一个值，然后再去根据实际结果去不断修正，不需要任何客观因素。这种推理方式需要大量的计算，因此一直遭到其他人的诟病，无法得到广泛的应用，直到计算机的高速发展，并且人们发现很多事情都是无法事先进行客观判断的，因此贝叶斯推理才得以东山再起。</p>
<p>说了这么多理论知识（很多数学理论都像是在说绕口令），让我们来看一看公式吧，其实只需要把我们在上面推导出的条件概率公式继续进行推理，就可以得出贝叶斯公式。</p>
<p>$$P(A|B) = \frac{P(B|A)P(A)}{P(B)}$$</p>
<ul>
<li><p>$P(A|B)$：在B条件下的事件A的概率，在贝叶斯定理中，条件概率也被称为后验概率，即在事件B发生之后，我们对事件A概率的重新评估。</p>
</li>
<li><p>$P(B|A)$：在A条件下的事件B的概率，与上一条同理。</p>
</li>
<li><p>$P(A)$与$P(B)$被称为先验概率（也被称为边缘概率），即在事件B发生之前，我们对事件A概率的一个推断（不考虑任何事件B方面的因素），后面同理。</p>
</li>
<li><p>$\frac{P(B|A)}{P(B)}$被称为标准相似度，它是一个调整因子，主要是为了保证预测概率更接近真实概率。</p>
</li>
<li><p>根据这些术语，贝叶斯定理表述为： 后验概率 = 标准相似度 * 先验概率。</p>
</li>
</ul>
<p>让我们以著名的假阳性问题为例，假设某种疾病的发病率为0.001（1000个人中会有一个人得病），现有一种试剂在患者确实得病的情况下，有99%的几率呈现为阳性，而在患者没有得病的情况下，它有5%的几率呈现为阳性（也就是假阳性），如有一位病人的检验成果为阳性，那么他的得病概率是多少呢？</p>
<p>代入贝叶斯定理，假定事件A表示为得病的概率（<code>P(A) = 0.001</code>），这是我们的先验概率，它是在病人在实际注射试剂（缺乏实验的结果）之前预计的发病率，再假定事件B为试剂结果为阳性的概率，我们需要计算的是条件概率<code>P(A|B)</code>，即在事件B条件下的A概率，这就是后验概率，也就是病人在注射试剂之后（得到实验结果）得出的发病率。</p>
<p>由于还有未得病的概率，所以还需要假设事件C为未得病的先验概率（<code>P(C) = 1 - 0.001 = 0.999</code>），那么<code>P(B|C)</code>后验概率表示的是未得病条件下的试剂结果为阳性的概率，之后再代入全概率公式就可得出最终结果。</p>
<p>$$<br>\begin{equation}\begin{split}<br>P(A|B)&amp;=\frac{P(B|A)P(A)}{P(B)}\<br>&amp;= \frac{P(B|A)P(A)}{P(B|A)P(A) + P(B|C)P(C)}\<br>&amp;= \frac{0.99 \times 0.001}{0.99 \times 0.001 + 0.05 \times 0.999}\approx 0.019<br>\end{split}\end{equation}<br>$$</p>
<p>最终结果约等于2%，即使一个病人的试剂结果为阳性，他的患病几率也只有2%而已。</p>
<h3 id="朴素贝叶斯的概率模型"><a href="#朴素贝叶斯的概率模型" class="headerlink" title="朴素贝叶斯的概率模型"></a>朴素贝叶斯的概率模型</h3><hr>
<p>我们设一个待分类项$X = {f_1,f_2,\cdots,f_n}$，其中每个<code>f</code>为<code>X</code>的一个特征属性，然后设一个类别集合$C_1,C_2,\cdots,C_m$。</p>
<p>然后需要计算$P(C_1|X),P(C_2|X),\cdots,P(C_m|X)$，我们可以根据一个训练样本集合（已知分类的待分类项集合），然后统计得到在各类别下各个特征属性的条件概率：</p>
<p>$P(f_1|C_1),P(f_2|C_1),\cdots,P(f_n|C_1),\cdots,P(f_1|C_2),P(f_2|C_2),\cdots,P(f_n|C_2),\cdots,P(f_1|C_m),P(f_2|C_m),\cdots,P(f_n|C_m)$</p>
<p>如果$P(C_k|X) = MAX(P(C_1|X),P(C_2|X),\cdots,P(C_m|X))$，则${X}\in{C_k}$（贝叶斯分类其实就是取概率最大的那一个）。</p>
<p>朴素贝叶斯会假设每个特征都是独立的，根据贝叶斯定理可推得：$P(C_i|X) = \frac{P(X|C_i)P(C_i)}{P(X)}$，由于分母对于所有类别为常数，因此只需要将分子最大化即可，又因为各特征是互相独立的，所以最终推得：</p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fmrz54fusig20ge01hdfm.gif" alt=""></p>
<p>根据上述的公式推导，朴素贝叶斯的流程可如下图所示：</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fmpnscvyl1j20np0sfaeh.jpg" alt=""></p>
<p>接下来我们通过一个案例来过一遍上图的流程。</p>
<p>现有一网站想要通过程序自动识别出账号的真实性（将账号分类为真实账号与不真实账号，所谓不真实账号即带有虚假信息或恶意注册的小号）。</p>
<ul>
<li><p>首先需要确定特征属性和类别，然后获取训练样本。假设一个账号具有三个特征：日志数量/注册天数（<code>F1</code>）、好友数量/注册天数（<code>F2</code>）、是否使用了真实的头像（True为1，False为0）。</p>
</li>
<li><p>该网站使用曾经人工检测过的10000个账号作为训练样本，那么计算每个类别的概率为$P(C_0) = 8900 \div 10000 = 0.89, P(C_1) = 1100 \div 10000 = 0.11$，<code>C0</code>为真实账号的类别概率也就是89%，<code>C1</code>为虚假账号的类别概率也就是11%。</p>
</li>
<li><p>之后需要计算每个类别下的各个特征的条件概率，代入朴素贝叶斯分类器，可得$P(F_1|C)P(F_2|C)P(F_3|C)P(C)$，不过有一个问题是，<code>F1</code>与<code>F2</code>是连续变量，不适宜按照某个特定值计算概率。解决方法为将连续值转化为离散值，然后计算区间的概率，比如将<code>F1</code>分解为<code>[0,0.05]、[0.05,0.2]、[0.2,+∞]</code>三个区间，然后计算每个区间的概率即可。</p>
</li>
<li><p>已知某一账号的数据如下：$F_1 = 0.1,F_2 = 0.2,F_3 = 0$，推测该账号是真实账号还是虚假账号。在此例中，<code>F1</code>为0.1，落在第二个区间内，所以在计算的时候，就使用第二个区间的发生概率。根据训练样本可得出结果为：</p>
</li>
</ul>
<p>$$<br>\begin{equation}\begin{split}<br>P(F_1|C_0) = 0.5, P(F_1|C_1) = 0.1\<br>P(F_2|C_0) = 0.7, P(F_2|C_1) = 0.2\<br>P(F_3|C_0) = 0.2, P(F_3|C_1) = 0.9<br>\end{split}\end{equation}<br>$$</p>
<ul>
<li>接下来使用训练后的分类器可得出该账号的真实账号概率与虚假账号概率，然后取最大概率作为它的类别：</li>
</ul>
<p>$$<br>\begin{equation}\begin{split}<br>P(F_1|C_0)P(F_2|C_0)P(F_3|C_0)P(C_0) &amp;= 0.5 \times 0.7 \times 0.2 \times 0.89\<br>&amp;= 0.0623<br>\end{split}\end{equation}<br>$$<br>$$<br>\begin{equation}\begin{split}<br>P(F_1|C_1)P(F_2|C_1)P(F_3|C_1)P(C_1) &amp;= 0.1 \times 0.2 \times 0.9 \times 0.11\<br>&amp;= 0.00198<br>\end{split}\end{equation}<br>$$</p>
<p>   最终结果为该账号是一个真实账号。</p>
<h3 id="朴素贝叶斯的算法模型"><a href="#朴素贝叶斯的算法模型" class="headerlink" title="朴素贝叶斯的算法模型"></a>朴素贝叶斯的算法模型</h3><hr>
<p>在朴素贝叶斯中含有以下三种算法模型：</p>
<ul>
<li><p>Gaussian Naive Bayes：适合在特征变量具有连续性的时候使用，同时它还假设特征遵从于高斯分布（正态分布）。举个栗子，假设我们有一组人体特征的统计资料，该数据中的特征：身高、体重和脚掌长度等都为连续变量，很明显我们不能采用离散变量的方法来计算概率，由于样本太少，也无法分成区间计算，那么要怎么办呢？解决方法是假设特征项都是正态分布，然后通过样本计算出均值与标准差，这样就得到了正态分布的密度函数，有了密度函数，就可以代入值，进而算出某一点的密度函数的值。</p>
</li>
<li><p>MultiNomial Naive Bayes：与Gaussian Naive Bayes相反，多项式模型更适合处理特征是离散变量的情况，该模型会在计算先验概率$P(C_m)$和条件概率$P(F_n|C<em>m)$时会做一些平滑处理。具体公式为<img src="http://wx1.sinaimg.cn/large/63503acbly1fmrz54ux0tg20480130nd.gif" alt="">，其中<code>T</code>为总的样本数，<code>m</code>为总类别数，$T</em>{cm}$即类别为$C_m$的样本个数，<code>a</code>是一个平滑值。条件概率的公式为<img src="http://wx1.sinaimg.cn/large/63503acbly1fmrz55ag8ng205j0130sh.gif" alt="">，<code>n</code>为特征的个数，<code>T_cmfn</code>为类别为<code>C_m</code>特征为<code>F_n</code>的样本个数。当平滑值<code>a = 1</code>与<code>0 &lt; a &lt; 1</code>时，被称作为<code>Laplace</code>平滑，当<code>a = 0</code>时不做平滑。它的思想其实就是对每类别下所有划分的计数加1，这样如果训练样本数量足够大时，就不会对结果产生影响，并且解决了$P(F|C)$的频率为0的现象（某个类别下的某个特征划分没有出现，这会严重影响分类器的质量）。</p>
</li>
<li><p>Bernoulli Naive Bayes：Bernoulli适用于在特征属性为二进制的场景下，它对每个特征的取值是基于布尔值的，一个典型例子就是判断单词有没有在文本中出现。</p>
</li>
</ul>
<h3 id="朴素贝叶斯的实现"><a href="#朴素贝叶斯的实现" class="headerlink" title="朴素贝叶斯的实现"></a>朴素贝叶斯的实现</h3><hr>
<p>了解了足够多的理论，接下来我们要动手使用python来实现一个Gaussian Naive Bayes，目的是解决皮马人（一个印第安人部落）的糖尿病问题，<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.data" target="_blank" rel="external">样本数据（请从该超链接中获取）</a>是一个csv格式的文件，每个值都是一个数字，该文件描述了从患者的年龄、怀孕次数和验血结果等方面的即时测量数据。每个记录都有一个类别值（一个布尔值，以0或1表示），该值表述了患者是否在五年内得过糖尿病。这是一个在机器学习文献中被大量研究过的数据集，一个比较好的预测精度应该在70%~76%。样本数据的每列含义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">列1：怀孕次数</div><div class="line">列2：在口服葡萄糖耐量试验中，血浆葡萄糖的浓度（2小时）</div><div class="line">列3：心脏的舒张压（(mm Hg)）</div><div class="line">列4：肱三头肌皮肤褶皱厚度（mm）</div><div class="line">列5：二小时内的血清胰岛素（mu U/ml）</div><div class="line">列6：体质指数 （(weight in kg/(height in m)^2)）</div><div class="line">列7：糖尿病家族作用</div><div class="line">列8：年龄</div><div class="line">列9：类别布尔值，0为5年没得过糖尿病，1为5年内得过糖尿病</div><div class="line">------------------------------------</div><div class="line">6,148,72,35,0,33.6,0.627,50,1</div><div class="line">1,85,66,29,0,26.6,0.351,31,0</div><div class="line">8,183,64,0,0,23.3,0.672,32,1</div><div class="line">1,89,66,23,94,28.1,0.167,21,0</div><div class="line">0,137,40,35,168,43.1,2.288,33,1</div><div class="line">.........</div></pre></td></tr></table></figure>
<p>首先要做的是读取这个csv文件，并解析成我们可以直接使用的数据结构。由于样本数据文件中没有任何的空行和标记符号，每行都是对应的一行数据，只需要简单地把每一行封装到一个list中即可（返回结果为一个list，它的每一项元素都是包含一行数据的list），注意该文件中的数据都为数字，需要先做类型转换。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_csv_file</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</div><div class="line">        lines = csv.reader(f)</div><div class="line">        data_set = list(lines)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data_set)):</div><div class="line">        data_set[i] = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> data_set[i]]</div><div class="line">    <span class="keyword">return</span> data_set</div></pre></td></tr></table></figure>
<p>获得了样本数据后，为了评估模型的准确性还需要将它切分为训练数据集（朴素贝叶斯需要使用它来进行预测）与测试数据集。数据在切分过程中是随机选取的，但我们会选择一个比率来控制训练数据集与测试数据集的大小，一般为67%：33%，这是一个比较常见的比率。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data_set</span><span class="params">(data_set, split_ratio)</span>:</span></div><div class="line">    train_size = int(len(data_set) * split_ratio)</div><div class="line">    train_set = []</div><div class="line">    data_set_copy = list(data_set)</div><div class="line">    <span class="keyword">while</span> len(train_set) &lt; train_size:</div><div class="line">        index = random.randrange(len(data_set_copy))</div><div class="line">        train_set.append(data_set_copy.pop(index))</div><div class="line">    <span class="keyword">return</span> [train_set, data_set_copy]</div></pre></td></tr></table></figure>
<p>切分了样本数据后，还要对训练数据集进行更细致的处理，由于Gaussian Naive Bayes假设了每个特征都遵循正态分布，所以需要从训练数据集中抽取出摘要，它包含了均值与标准差，摘要的数量由类别和特征属性的组合数决定，例如，如果有3个类别与7个特征属性，那么就需要对每个特征属性和类别计算出均值和标准差，这就是21个摘要。</p>
<p>在计算训练数据集的摘要之前，我们的第一个任务是要将训练数据集中的特征与类别进行分离，也就是说，构造出一个<code>key</code>为类别，值为所属该类别的数据行的散列表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate_by_class</span><span class="params">(data_set, class_index)</span>:</span></div><div class="line">    result = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data_set)):</div><div class="line">        vector = data_set[i]</div><div class="line">        class_val = vector[class_index]</div><div class="line">        <span class="keyword">if</span> (class_val <span class="keyword">not</span> <span class="keyword">in</span> result):</div><div class="line">            result[class_val] = []</div><div class="line">        result[class_val].append(vector)</div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>由于已经知道了类别只有一个，而且在每行数据的最后一个，所以只需要将-1传入到class_index参数即可。然后就是计算训练数据集的摘要（每个类别中的每个特征属性的均值与标准差），均值会被作为正态分布的中间值，而标准差则描述了数据的离散程度，在计算概率时，它会被作为正态分布中每个特征属性的期望分布。</p>
<p>标准差就是方差的平方根，只要先求出方差（每个特征值与平均值的差的平方之和的平均值）就可以得出标准差。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean</span><span class="params">(numbers)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(numbers) / float(len(numbers))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">stdev</span><span class="params">(numbers)</span>:</span></div><div class="line">    avg = mean(numbers)</div><div class="line">    variance = sum([pow(x - avg, <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> numbers]) / float(len(numbers))</div><div class="line">    <span class="keyword">return</span> math.sqrt(variance)</div></pre></td></tr></table></figure>
<p>有了这些辅助函数，计算摘要就很简单了，具体步骤就是先从训练数据集中构造出<code>key</code>为类别的散列表，然后根据类别与每个特征进行计算求出均值与标准差即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">summarize</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="comment"># 使用zip函数将每个元素中的第n个属性封装为一个元组</span></div><div class="line">	<span class="comment"># 简单地说，就是把每列（特征）都打包到一个元组中</span></div><div class="line">    summaries = [(mean(feature), stdev(feature)) <span class="keyword">for</span> feature <span class="keyword">in</span> zip(*data_set)]</div><div class="line">    <span class="keyword">del</span> summaries[<span class="number">-1</span>] <span class="comment"># 最后一行是类别与类别的摘要 所以删除</span></div><div class="line">    <span class="keyword">return</span> summaries</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">summarize_by_class</span><span class="params">(data_set)</span>:</span></div><div class="line">    class_map = separate_by_class(data_set, <span class="number">-1</span>)</div><div class="line">    summaries = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> class_val, data <span class="keyword">in</span> class_map.items():</div><div class="line">        summaries[class_val] = summarize(data)</div><div class="line">    <span class="keyword">return</span> summaries</div></pre></td></tr></table></figure>
<p>数据的处理阶段已经完成了，下面的任务是要去根据训练数据集来进行预测，该阶段需要计算类概率与每个特征与类别的条件概率，然后选出概率最大的类别作为分类结果。关键在于计算条件概率，需要用到正态分布的密度函数，而它所依赖的参数（特征，均值，标准差）我们已经准备好了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_probability</span><span class="params">(x, mean, stdev)</span>:</span></div><div class="line">    exponent = math.exp(-(math.pow(x - mean, <span class="number">2</span>) / (<span class="number">2</span> * math.pow(stdev, <span class="number">2</span>))))</div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> / (math.sqrt(<span class="number">2</span> * math.pi) * stdev)) * exponent</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_conditional_probabilities</span><span class="params">(summaries, input_vector)</span>:</span></div><div class="line">    probabilities = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> class_val, class_summaries <span class="keyword">in</span> summaries.items():</div><div class="line">        probabilities[class_val] = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(class_summaries)):</div><div class="line">            mean, stdev = class_summaries[i]</div><div class="line">			<span class="comment"># input_vector是test_set的一行数据，x为该行中的某一特征属性</span></div><div class="line">            x = input_vector[i]</div><div class="line">			<span class="comment"># 将概率相乘</span></div><div class="line">            probabilities[class_val] *= calculate_probability(x, mean, stdev)</div><div class="line">    <span class="keyword">return</span> probabilities</div></pre></td></tr></table></figure>
<p>函数<code>calculate_conditional_probabilities()</code>返回了一个<code>key</code>为类别，值为其概率的散列表，这个散列表记录了每个特征类别的条件概率，之后只需要选出其中最大概率的类别即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(summaries, input_vector)</span>:</span></div><div class="line">    probabilities = calculate_conditional_probabilities(summaries, input_vector)</div><div class="line">    best_label, best_prob = <span class="keyword">None</span>, <span class="number">-1</span></div><div class="line">    <span class="keyword">for</span> class_val, probability <span class="keyword">in</span> probabilities.items():</div><div class="line">        <span class="keyword">if</span> best_label <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> probability &gt; best_prob:</div><div class="line">            best_label = class_val</div><div class="line">            best_prob = probability</div><div class="line">    <span class="keyword">return</span> best_label</div></pre></td></tr></table></figure>
<p>最后我们定义一个函数来对测试数据集中的每个数据实例进行预测以预估模型的准确性，该函数返回了一个预测值列表，包含了每个数据实例的预测值。根据这个返回值，就可以对预测结果进行准确性的评估了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_predictions</span><span class="params">(summaries, test_set)</span>:</span></div><div class="line">    predictions = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(test_set)):</div><div class="line">        result = predict(summaries, test_set[i])</div><div class="line">        predictions.append(result)</div><div class="line">    <span class="keyword">return</span> predictions</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_accuracy</span><span class="params">(predictions, test_set)</span>:</span></div><div class="line">    correct = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(test_set)):</div><div class="line">		<span class="comment"># 分类结果与测试数据集一致，调整值自增</span></div><div class="line">        <span class="keyword">if</span> test_set[x][<span class="number">-1</span>] == predictions[x]:</div><div class="line">            correct += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> (correct / float(len(test_set))) * <span class="number">100.0</span></div></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv, random, math</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">A simple classifier base on the gaussian naive bayes and</div><div class="line">problem of the pima indians diabetes.</div><div class="line">(https://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes)</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_csv_file</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</div><div class="line">        lines = csv.reader(f)</div><div class="line">        data_set = list(lines)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data_set)):</div><div class="line">        data_set[i] = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> data_set[i]]</div><div class="line">    <span class="keyword">return</span> data_set</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data_set</span><span class="params">(data_set, split_ratio)</span>:</span></div><div class="line">    train_size = int(len(data_set) * split_ratio)</div><div class="line">    train_set = []</div><div class="line">    data_set_copy = list(data_set)</div><div class="line">    <span class="keyword">while</span> len(train_set) &lt; train_size:</div><div class="line">        index = random.randrange(len(data_set_copy))</div><div class="line">        train_set.append(data_set_copy.pop(index))</div><div class="line">    <span class="keyword">return</span> [train_set, data_set_copy]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate_by_class</span><span class="params">(data_set, class_index)</span>:</span></div><div class="line">    result = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data_set)):</div><div class="line">        vector = data_set[i]</div><div class="line">        class_val = vector[class_index]</div><div class="line">        <span class="keyword">if</span> (class_val <span class="keyword">not</span> <span class="keyword">in</span> result):</div><div class="line">            result[class_val] = []</div><div class="line">        result[class_val].append(vector)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean</span><span class="params">(numbers)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(numbers) / float(len(numbers))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">stdev</span><span class="params">(numbers)</span>:</span></div><div class="line">    avg = mean(numbers)</div><div class="line">    variance = sum([pow(x - avg, <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> numbers]) / float(len(numbers))</div><div class="line">    <span class="keyword">return</span> math.sqrt(variance)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">summarize</span><span class="params">(data_set)</span>:</span></div><div class="line">    summaries = [(mean(feature), stdev(feature)) <span class="keyword">for</span> feature <span class="keyword">in</span> zip(*data_set)]</div><div class="line">    <span class="keyword">del</span> summaries[<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> summaries</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">summarize_by_class</span><span class="params">(data_set)</span>:</span></div><div class="line">    class_map = separate_by_class(data_set, <span class="number">-1</span>)</div><div class="line">    summaries = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> class_val, data <span class="keyword">in</span> class_map.items():</div><div class="line">        summaries[class_val] = summarize(data)</div><div class="line">    <span class="keyword">return</span> summaries</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_probability</span><span class="params">(x, mean, stdev)</span>:</span></div><div class="line">    exponent = math.exp(-(math.pow(x - mean, <span class="number">2</span>) / (<span class="number">2</span> * math.pow(stdev, <span class="number">2</span>))))</div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> / (math.sqrt(<span class="number">2</span> * math.pi) * stdev)) * exponent</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_conditional_probabilities</span><span class="params">(summaries, input_vector)</span>:</span></div><div class="line">    probabilities = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> class_val, class_summaries <span class="keyword">in</span> summaries.items():</div><div class="line">        probabilities[class_val] = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(class_summaries)):</div><div class="line">            mean, stdev = class_summaries[i]</div><div class="line">            x = input_vector[i]</div><div class="line">            probabilities[class_val] *= calculate_probability(x, mean, stdev)</div><div class="line">    <span class="keyword">return</span> probabilities</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(summaries, input_vector)</span>:</span></div><div class="line">    probabilities = calculate_conditional_probabilities(summaries, input_vector)</div><div class="line">    best_label, best_prob = <span class="keyword">None</span>, <span class="number">-1</span></div><div class="line">    <span class="keyword">for</span> class_val, probability <span class="keyword">in</span> probabilities.items():</div><div class="line">        <span class="keyword">if</span> best_label <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> probability &gt; best_prob:</div><div class="line">            best_label = class_val</div><div class="line">            best_prob = probability</div><div class="line">    <span class="keyword">return</span> best_label</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_predictions</span><span class="params">(summaries, test_set)</span>:</span></div><div class="line">    predictions = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(test_set)):</div><div class="line">        result = predict(summaries, test_set[i])</div><div class="line">        predictions.append(result)</div><div class="line">    <span class="keyword">return</span> predictions</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_accuracy</span><span class="params">(predictions, test_set)</span>:</span></div><div class="line">    correct = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(test_set)):</div><div class="line">        <span class="keyword">if</span> test_set[x][<span class="number">-1</span>] == predictions[x]:</div><div class="line">            correct += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> (correct / float(len(test_set))) * <span class="number">100.0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    filename = <span class="string">'pima-indians-diabetes.data.csv'</span></div><div class="line">    split_ratio = <span class="number">0.67</span></div><div class="line">    data_set = load_csv_file(filename)</div><div class="line">    train_set, test_set = split_data_set(data_set, split_ratio)</div><div class="line">    print(<span class="string">'Split %s rows into train set = %s and test set = %s rows'</span></div><div class="line">                %(len(data_set), len(train_set), len(test_set)))</div><div class="line">    <span class="comment"># prepare model</span></div><div class="line">    summaries = summarize_by_class(train_set)</div><div class="line">    <span class="comment"># predict and test</span></div><div class="line">    predictions = get_predictions(summaries, test_set)</div><div class="line">    accuracy = get_accuracy(predictions, test_set)</div><div class="line">    print(<span class="string">'Accuracy: %s'</span> % accuracy)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Bayes%27_theorem" target="_blank" rel="external">Bayes’ theorem - Wikipedia</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Conditional_probability" target="_blank" rel="external">Conditional probability - Wikipedia</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Law_of_total_probability" target="_blank" rel="external">Law of total probability - Wikipedia</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Naive_Bayes_classifier" target="_blank" rel="external">Naive Bayes classifier - Wikipedia</a></p>
</li>
<li><p><a href="https://www.analyticsvidhya.com/blog/2017/09/naive-bayes-explained/" target="_blank" rel="external"> 6 Easy Steps to Learn Naive Bayes Algorithm (with code in Python)</a></p>
</li>
<li><p><a href="https://dataaspirant.com/2017/02/06/naive-bayes-classifier-machine-learning/" target="_blank" rel="external">How the Naive Bayes Classifier works in Machine Learning</a></p>
</li>
<li><p><a href="https://machinelearningmastery.com/naive-bayes-classifier-scratch-python/" target="_blank" rel="external">Naive Bayes Classifier From Scratch in Python</a></p>
</li>
<li><p><a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/" target="_blank" rel="external">数学之美番外篇：平凡而又神奇的贝叶斯方法 – 刘未鹏 | Mind Hacks</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2013/12/naive_bayes_classifier.html" target="_blank" rel="external">朴素贝叶斯分类器的应用 - 阮一峰的网络日志</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/leoo2sk/archive/2010/09/17/1829190.html" target="_blank" rel="external">算法杂货铺——分类算法之朴素贝叶斯分类(Naive Bayesian classification) - T2噬菌体 - 博客园</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在机器学习领域中，朴素贝叶斯是一种基于贝叶斯定理的简单概率分类器（分类又被称为监督式学习，所谓监督式学习即从已知样本数据中的特征信息去推测可能出现的输出以完成分类，反之聚类问题被称为非监督式学习），朴素贝叶斯在处理文本数据时可以得到较好的分类结果，所以它被广泛应用于文本分类
    
    </summary>
    
      <category term="机器学习" scheme="https://sylvanassun.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="监督式学习" scheme="https://sylvanassun.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%9B%91%E7%9D%A3%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="机器学习" scheme="https://sylvanassun.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="监督式学习" scheme="https://sylvanassun.github.io/tags/%E7%9B%91%E7%9D%A3%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="贝叶斯" scheme="https://sylvanassun.github.io/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>Netty的那点事儿</title>
    <link href="https://sylvanassun.github.io/2017/11/30/2017-11-30-netty_introduction/"/>
    <id>https://sylvanassun.github.io/2017/11/30/2017-11-30-netty_introduction/</id>
    <published>2017-11-30T10:00:00.000Z</published>
    <updated>2017-12-02T11:14:08.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://netty.io/images/components.png" alt=""></p>
<p>Netty是一个基于异步与事件驱动的网络应用程序框架，它支持快速与简单地开发可维护的高性能的服务器与客户端。</p>
<p>所谓事件驱动就是由通过各种事件响应来决定程序的流程，在Netty中到处都充满了异步与事件驱动，这种特点使得应用程序可以以任意的顺序响应在任意的时间点产生的事件，它带来了非常高的可伸缩性，让你的应用可以在需要处理的工作不断增长时，通过某种可行的方式或者扩大它的处理能力来适应这种增长。</p>
<p>Netty提供了高性能与易用性，它具有以下特点：</p>
<ul>
<li><p>拥有设计良好且统一的API，支持NIO与OIO（阻塞IO）等多种传输类型，支持真正的无连接UDP Socket。</p>
</li>
<li><p>简单而强大的线程模型，可高度定制线程（池）。</p>
</li>
<li><p>良好的模块化与解耦，支持可扩展和灵活的事件模型，可以很轻松地分离关注点以复用逻辑组件（可插拔的）。</p>
</li>
<li><p>性能高效，拥有比Java核心API更高的吞吐量，通过zero-copy功能以实现最少的内存复制消耗。</p>
</li>
<li><p>内置了许多常用的协议编解码器，如HTTP、SSL、WebScoket等常见协议可以通过Netty做到开箱即用。用户也可以利用Netty简单方便地实现自己的应用层协议。</p>
</li>
</ul>
<p>大多数人使用Netty主要还是为了提高应用的性能，而高性能则离不开非阻塞IO。Netty的非阻塞IO是基于Java NIO的，并且对其进行了封装（直接使用Java NIO API在高复杂度下的应用中是一项非常繁琐且容易出错的操作，而Netty帮你封装了这些复杂操作）。</p>
<p>NIO可以称为New IO也可以称为Non-blocking IO，它比Java旧的阻塞IO在性能上要高效许多（如果让每一个连接中的IO操作都单独创建一个线程，那么阻塞IO并不会比NIO在性能上落后，但不可能创建无限多的线程，在连接数非常多的情况下会很糟糕）。</p>
<ul>
<li><p>ByteBuffer：NIO的数据传输是基于缓冲区的，ByteBuffer正是NIO数据传输中所使用的缓冲区抽象。ByteBuffer支持在堆外分配内存，并且尝试避免在执行I/O操作中的多余复制。一般的I/O操作都需要进行系统调用，这样会先切换到内核态，内核态要先从文件读取数据到它的缓冲区，只有等数据准备完毕后，才会从内核态把数据写到用户态，所谓的阻塞IO其实就是说的在等待数据准备好的这段时间内进行阻塞。如果想要避免这个额外的内核操作，可以通过使用mmap（虚拟内存映射）的方式来让用户态直接操作文件。</p>
</li>
<li><p>Channel：它类似于文件描述符，简单地来说它代表了一个实体（如一个硬件设备、文件、Socket或者一个能够执行一个或多个不同的I/O操作的程序组件）。你可以从一个Channel中读取数据到缓冲区，也可以将一个缓冲区中的数据写入到Channel。</p>
</li>
<li><p>Selector：选择器是NIO实现的关键，NIO采用的是I/O多路复用的方式来实现非阻塞，Selector通过在一个线程中监听每个Channel的IO事件来确定有哪些已经准备好进行IO操作的Channel，因此可以在任何时间检查任意的读操作或写操作的完成状态。这种方式避免了等待IO操作准备数据时的阻塞，使用较少的线程便可以处理许多连接，减少了线程切换与维护的开销。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1flys7n7hvaj20h90doglj.jpg" alt=""></p>
</li>
</ul>
<p>了解了NIO的实现思想之后，我觉得还很有必要了解一下Unix中的I/O模型，Unix中拥有以下5种I/O模型：</p>
<ul>
<li><p>阻塞I/O（Blocking I/O）</p>
</li>
<li><p>非阻塞I/O（Non-blocking I/O）</p>
</li>
<li><p>I/O多路复用（I/O multiplexing (select and poll)）</p>
</li>
<li><p>信号驱动I/O（signal driven I/O (SIGIO)）</p>
</li>
<li><p>异步I/O（asynchronous I/O (the POSIX aio_functions)）</p>
</li>
</ul>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1flz1e7kzblj20wb0ftq3l.jpg" alt="阻塞I/O模型"></p>
<p>阻塞I/O模型是最常见的I/O模型，通常我们使用的InputStream/OutputStream都是基于阻塞I/O模型。在上图中，我们使用UDP作为例子，recvfrom()函数是UDP协议用于接收数据的函数，它需要使用系统调用并一直阻塞到内核将数据准备好，之后再由内核缓冲区复制数据到用户态（即是recvfrom()接收到数据），所谓阻塞就是在等待内核准备数据的这段时间内什么也不干。</p>
<p>举个生活中的例子，阻塞I/O就像是你去餐厅吃饭，在等待饭做好的时间段中，你只能在餐厅中坐着干等（如果你在玩手机那么这就是非阻塞I/O了）。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1flz1e8lh7rj20wb0ft0ty.jpg" alt="非阻塞I/O模型"></p>
<p>在非阻塞I/O模型中，内核在数据尚未准备好的情况下回返回一个错误码<code>EWOULDBLOCK</code>，而recvfrom并没有在失败的情况下选择阻塞休眠，而是不断地向内核询问是否已经准备完毕，在上图中，前三次内核都返回了<code>EWOULDBLOCK</code>，直到第四次询问时，内核数据准备完毕，然后开始将内核中缓存的数据复制到用户态。这种不断询问内核以查看某种状态是否完成的方式被称为<code>polling（轮询）</code>。</p>
<p>非阻塞I/O就像是你在点外卖，只不过你非常心急，每隔一段时间就要打电话问外卖小哥有没有到。</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1flz1e989dfj20wh0g80tw.jpg" alt="I/O多路复用模型"></p>
<p>I/O多路复用的思想跟非阻塞I/O是一样的，只不过在非阻塞I/O中，是在recvfrom的用户态（或一个线程）中去轮询内核，这种方式会消耗大量的CPU时间。而I/O多路复用则是通过select()或poll()系统调用来负责进行轮询，以实现监听I/O读写事件的状态。如上图中，select监听到一个datagram可读时，就交由recvfrom去发送系统调用将内核中的数据复制到用户态。</p>
<p>这种方式的优点很明显，通过I/O多路复用可以监听多个文件描述符，且在内核中完成监控的任务。但缺点是至少需要两个系统调用（select()与recvfrom()）。</p>
<p>I/O多路复用同样适用于点外卖这个例子，只不过你在等外卖的期间完全可以做自己的事情，当外卖到的时候会通过外卖APP或者由外卖小哥打电话来通知你。</p>
<p>Unix中提供了两种I/O多路复用函数，select()和poll()。select()的兼容性更好，但它在单个进程中所能监控的文件描述符是有限的，这个值与<code>FD_SETSIZE</code>相关，32位系统中默认为1024，64位系统中为2048。select()还有一个缺点就是他轮询的方式，它采取了线性扫描的轮询方式，每次都要遍历FD_SETSIZE个文件描述符，不管它们是否活不活跃的。poll()本质上与select()的实现没有区别，不过在数据结构上区别很大，用户必须分配一个pollfd结构数组，该数组维护在内核态中，正因如此，poll()并不像select()那样拥有大小上限的限制，但缺点同样也很明显，大量的fd数组会在用户态与内核态之间不断复制，不管这样的复制是否有意义。</p>
<p>还有一种比select()与poll()更加高效的实现叫做epoll()，它是由Linux内核2.6推出的可伸缩的I/O多路复用实现，目的是为了替代select()与poll()。epoll()同样没有文件描述符上限的限制，它使用一个文件描述符来管理多个文件描述符，并使用一个红黑树来作为存储结构。同时它还支持边缘触发（edge-triggered）与水平触发（level-triggered）两种模式（poll()只支持水平触发），在边缘触发模式下，<code>epoll_wait</code>仅会在新的事件对象首次被加入到epoll时返回，而在水平触发模式下，<code>epoll_wait</code>会在事件状态未变更前不断地触发。也就是说，边缘触发模式只会在文件描述符变为就绪状态时通知一次，水平触发模式会不断地通知该文件描述符直到被处理。</p>
<p>关于<code>epoll_wait</code>请参考如下epoll API。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个epoll对象并返回它的文件描述符。</span></div><div class="line"><span class="comment">// 参数flags允许修改epoll的行为，它只有一个有效值EPOLL_CLOEXEC。</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create1</span><span class="params">(<span class="keyword">int</span> flags)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 配置对象，该对象负责描述监控哪些文件描述符和哪些事件。</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 等待与epoll_ctl注册的任何事件，直至事件发生一次或超时。</span></div><div class="line"><span class="comment">// 返回在events中发生的事件，最多同时返回maxevents个。</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
<p>epoll另一亮点是采用了事件驱动的方式而不是轮询，在<code>epoll_ctl</code>中注册的文件描述符在事件触发的时候会通过一个回调机制来激活该文件描述符，<code>epoll_wait</code>便可以收到通知。这样效率就不会与文件描述符的数量成正比。epoll还采用了mmap来减少内核态与用户态之间的数据传输开销。</p>
<p>在Java NIO2（从JDK1.7开始引入）中，只要Linux内核版本在2.6以上，就会采用epoll，如下源码所示（DefaultSelectorProvider.java）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SelectorProvider <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">    String osname = AccessController.doPrivileged(</div><div class="line">        <span class="keyword">new</span> GetPropertyAction(<span class="string">"os.name"</span>));</div><div class="line">    <span class="keyword">if</span> (<span class="string">"SunOS"</span>.equals(osname)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> sun.nio.ch.DevPollSelectorProvider();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// use EPollSelectorProvider for Linux kernels &gt;= 2.6</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">"Linux"</span>.equals(osname)) &#123;</div><div class="line">        String osversion = AccessController.doPrivileged(</div><div class="line">            <span class="keyword">new</span> GetPropertyAction(<span class="string">"os.version"</span>));</div><div class="line">        String[] vers = osversion.split(<span class="string">"\\."</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (vers.length &gt;= <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> major = Integer.parseInt(vers[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">int</span> minor = Integer.parseInt(vers[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">if</span> (major &gt; <span class="number">2</span> || (major == <span class="number">2</span> &amp;&amp; minor &gt;= <span class="number">6</span>)) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> sun.nio.ch.EPollSelectorProvider();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException x) &#123;</div><div class="line">                <span class="comment">// format not recognized</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> sun.nio.ch.PollSelectorProvider();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1flz1e9uk8aj20wb0ft3zn.jpg" alt="信号驱动I/O模型"></p>
<p>信号驱动I/O模型使用到了信号，内核在数据准备就绪时会通过信号来进行通知。我们首先开启了一个信号驱动I/O套接字，并使用sigaction系统调用来安装信号处理程序，内核直接返回，不会阻塞用户态。当datagram准备好时，内核会发送SIGIO信号，recvfrom接收到信号后会发送系统调用开始进行I/O操作。</p>
<p>这种模型的优点是主进程（线程）不会被阻塞，当数据准备就绪时，通过信号处理程序来通知主进程（线程）准备进行I/O操作与对数据的处理。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1flz1eai66rj20wb0g8aau.jpg" alt="异步I/O模型"></p>
<p>我们之前讨论的各种I/O模型无论是阻塞还是非阻塞，它们所说的阻塞都是指的数据准备阶段。异步I/O模型同样依赖于信号处理程序来进行通知，但与以上I/O模型都不相同的是，异步I/O模型通知的是I/O操作已经完成，而不是数据准备完成。</p>
<p>可以说异步I/O模型才是真正的非阻塞，主进程只管做自己的事情，然后在I/O操作完成时调用回调函数来完成一些对数据的处理操作即可。</p>
<p>闲扯了这么多，想必大家已经对I/O模型有了一个深刻的认识。之后，我们将会结合部分源码（Netty4.X）来探讨Netty中的各大核心组件，以及如何使用Netty，你会发现实现一个Netty程序是多么简单（而且还伴随了高性能与可维护性）。</p>
<blockquote>
<p>本文作者为<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>，首发于<a href="https://sylvanassun.github.io/">SylvanasSun’s Blog</a>。<br>原文链接：<a href="https://sylvanassun.github.io/2017/11/30/2017-11-30-netty_introduction/">https://sylvanassun.github.io/2017/11/30/2017-11-30-netty_introduction/</a><br>（转载请务必保留本段声明，并且保留超链接。）</p>
</blockquote>
<h3 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h3><hr>
<p>网络传输的基本单位是字节，在Java NIO中提供了ByteBuffer作为字节缓冲区容器，但该类的API使用起来不太方便，所以Netty实现了ByteBuf作为其替代品，下面是使用ByteBuf的优点：</p>
<ul>
<li><p>相比ByteBuffer使用起来更加简单。</p>
</li>
<li><p>通过内置的复合缓冲区类型实现了透明的zero-copy。</p>
</li>
<li><p>容量可以按需增长。</p>
</li>
<li><p>读和写使用了不同的索引指针。</p>
</li>
<li><p>支持链式调用。</p>
</li>
<li><p>支持引用计数与池化。</p>
</li>
<li><p>可以被用户自定义的缓冲区类型扩展。</p>
</li>
</ul>
<p>在讨论ByteBuf之前，我们先需要了解一下ByteBuffer的实现，这样才能比较深刻地明白它们之间的区别。</p>
<p>ByteBuffer继承于<code>abstract class Buffer</code>（所以还有LongBuffer、IntBuffer等其他类型的实现），本质上它只是一个有限的线性的元素序列，包含了三个重要的属性。</p>
<ul>
<li><p>Capacity：缓冲区中元素的容量大小，你只能将capacity个数量的元素写入缓冲区，一旦缓冲区已满就需要清理缓冲区才能继续写数据。</p>
</li>
<li><p>Position：指向下一个写入数据位置的索引指针，初始位置为0，最大为capacity-1。当写模式转换为读模式时，position需要被重置为0。</p>
</li>
<li><p>Limit：在写模式中，limit是可以写入缓冲区的最大索引，也就是说它在写模式中等价于缓冲区的容量。在读模式中，limit表示可以读取数据的最大索引。</p>
</li>
</ul>
<p><img src="http://tutorials.jenkov.com/images/java-nio/buffers-modes.png" alt=""></p>
<p>由于Buffer中只维护了position一个索引指针，所以它在读写模式之间的切换需要调用一个flip()方法来重置指针。使用Buffer的流程一般如下：</p>
<ul>
<li><p>写入数据到缓冲区。</p>
</li>
<li><p>调用flip()方法。</p>
</li>
<li><p>从缓冲区中读取数据</p>
</li>
<li><p>调用buffer.clear()或者buffer.compact()清理缓冲区，以便下次写入数据。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">RandomAccessFile aFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"data/nio-data.txt"</span>, <span class="string">"rw"</span>);</div><div class="line">FileChannel inChannel = aFile.getChannel();</div><div class="line"></div><div class="line"><span class="comment">// 分配一个48字节大小的缓冲区</span></div><div class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</div><div class="line"></div><div class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf); <span class="comment">// 读取数据到缓冲区</span></div><div class="line"><span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">  buf.flip();  <span class="comment">// 将position重置为0</span></div><div class="line"></div><div class="line">  <span class="keyword">while</span>(buf.hasRemaining())&#123;</div><div class="line">      System.out.print((<span class="keyword">char</span>) buf.get()); <span class="comment">// 读取数据并输出到控制台</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  buf.clear(); <span class="comment">// 清理缓冲区</span></div><div class="line">  bytesRead = inChannel.read(buf);</div><div class="line">&#125;</div><div class="line">aFile.close();</div></pre></td></tr></table></figure>
<p>Buffer中核心方法的实现也非常简单，主要就是在操作指针position。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line">    * Sets this buffer's mark at its position.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span>  This buffer</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">mark</span><span class="params">()</span> </span>&#123;</div><div class="line">       mark = position; <span class="comment">// mark属性是用来标记当前索引位置的</span></div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 将当前索引位置重置为mark所标记的位置</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> m = mark;</div><div class="line">       <span class="keyword">if</span> (m &lt; <span class="number">0</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InvalidMarkException();</div><div class="line">       position = m;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;	</div><div class="line"></div><div class="line"><span class="comment">// 翻转这个Buffer，将limit设置为当前索引位置，然后再把position重置为0</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</div><div class="line">       limit = position;</div><div class="line">       position = <span class="number">0</span>;</div><div class="line">       mark = -<span class="number">1</span>;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 清理缓冲区</span></div><div class="line"><span class="comment">// 说是清理,也只是把postion与limit进行重置,之后再写入数据就会覆盖之前的数据了</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">       position = <span class="number">0</span>;</div><div class="line">       limit = capacity;</div><div class="line">       mark = -<span class="number">1</span>;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回剩余空间</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> limit - position;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Java NIO中的Buffer API操作的麻烦之处就在于读写转换需要手动重置指针。而ByteBuf没有这种繁琐性，它维护了两个不同的索引，一个用于读取，一个用于写入。当你从ByteBuf读取数据时，它的readerIndex将会被递增已经被读取的字节数，同样的，当你写入数据时，writerIndex则会递增。readerIndex的最大范围在writerIndex的所在位置，如果试图移动readerIndex超过该值则会触发异常。</p>
<p>ByteBuf中名称以read或write开头的方法将会递增它们其对应的索引，而名称以get或set开头的方法则不会。ByteBuf同样可以指定一个最大容量，试图移动writerIndex超过该值则会触发异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.checkReadableBytes0(<span class="number">1</span>); <span class="comment">// 检查readerIndex是否已越界</span></div><div class="line">       <span class="keyword">int</span> i = <span class="keyword">this</span>.readerIndex;</div><div class="line">       <span class="keyword">byte</span> b = <span class="keyword">this</span>._getByte(i);</div><div class="line">       <span class="keyword">this</span>.readerIndex = i + <span class="number">1</span>; <span class="comment">// 递增readerIndex</span></div><div class="line">       <span class="keyword">return</span> b;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkReadableBytes0</span><span class="params">(<span class="keyword">int</span> minimumReadableBytes)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.ensureAccessible();</div><div class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.readerIndex &gt; <span class="keyword">this</span>.writerIndex - minimumReadableBytes) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(String.format(<span class="string">"readerIndex(%d) + length(%d) exceeds 			  writerIndex(%d): %s"</span>, <span class="keyword">new</span> Object[]&#123;Integer.valueOf(<span class="keyword">this</span>.readerIndex), Integer.valueOf(minimumReadableBytes), Integer.valueOf(<span class="keyword">this</span>.writerIndex), <span class="keyword">this</span>&#125;));</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> ByteBuf <span class="title">writeByte</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.ensureAccessible();</div><div class="line">       <span class="keyword">this</span>.ensureWritable0(<span class="number">1</span>); <span class="comment">// 检查writerIndex是否会越过capacity</span></div><div class="line">       <span class="keyword">this</span>._setByte(<span class="keyword">this</span>.writerIndex++, value);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureWritable0</span><span class="params">(<span class="keyword">int</span> minWritableBytes)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span>(minWritableBytes &gt; <span class="keyword">this</span>.writableBytes()) &#123;</div><div class="line">           <span class="keyword">if</span>(minWritableBytes &gt; <span class="keyword">this</span>.maxCapacity - <span class="keyword">this</span>.writerIndex) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(String.format(<span class="string">"writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s"</span>, <span class="keyword">new</span> Object[]&#123;Integer.valueOf(<span class="keyword">this</span>.writerIndex), Integer.valueOf(minWritableBytes), Integer.valueOf(<span class="keyword">this</span>.maxCapacity), <span class="keyword">this</span>&#125;));</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">int</span> newCapacity = <span class="keyword">this</span>.alloc().calculateNewCapacity(<span class="keyword">this</span>.writerIndex + minWritableBytes, <span class="keyword">this</span>.maxCapacity);</div><div class="line">               <span class="keyword">this</span>.capacity(newCapacity);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;	</div><div class="line"></div><div class="line"><span class="comment">// get与set只对传入的索引进行了检查，然后对其位置进行get或set	</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">getByte</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.checkIndex(index);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>._getByte(index);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> ByteBuf <span class="title">setByte</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.checkIndex(index);</div><div class="line">       <span class="keyword">this</span>._setByte(index, value);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>ByteBuf同样支持在堆内和堆外进行分配。在堆内分配也被称为支撑数组模式，它能在没有使用池化的情况下提供快速的分配和释放。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ByteBuf heapBuf = Unpooled.copiedBuffer(bytes);</div><div class="line"><span class="keyword">if</span> (heapBuf.hasArray()) &#123; <span class="comment">// 判断是否有一个支撑数组</span></div><div class="line">	<span class="keyword">byte</span>[] array = heapBuf.array();</div><div class="line">	<span class="comment">// 计算第一个字节的偏移量</span></div><div class="line">	<span class="keyword">int</span> offset = heapBuf.arrayOffset() + heapBuf.readerIndex();</div><div class="line">	<span class="keyword">int</span> length = heapBuf.readableBytes(); <span class="comment">// 获得可读字节</span></div><div class="line">	handleArray(array,offset,length); <span class="comment">// 调用你的处理方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一种模式为堆外分配，Java NIO ByteBuffer类在JDK1.4时就已经允许JVM实现通过JNI调用来在堆外分配内存（调用malloc()函数在JVM堆外分配内存），这主要是为了避免额外的缓冲区复制操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ByteBuf directBuf = Unpooled.directBuffer(capacity);</div><div class="line"><span class="keyword">if</span> (!directBuf.hasArray()) &#123;</div><div class="line">	<span class="keyword">int</span> length = directBuf.readableBytes();</div><div class="line">	<span class="keyword">byte</span>[] array = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</div><div class="line">	<span class="comment">// 将字节复制到数组中</span></div><div class="line">	directBuf.getBytes(directBuf.readerIndex(),array);</div><div class="line">	handleArray(array,<span class="number">0</span>,length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ByteBuf还支持第三种模式，它被称为复合缓冲区，为多个ByteBuf提供了一个聚合视图。在这个视图中，你可以根据需要添加或者删除ByteBuf实例，ByteBuf的子类CompositeByteBuf实现了该模式。</p>
<p>一个适合使用复合缓冲区的场景是HTTP协议，通过HTTP协议传输的消息都会被分成两部分——头部和主体，如果这两部分由应用程序的不同模块产生，将在消息发送时进行组装，并且该应用程序还会为多个消息复用相同的消息主体，这样对于每个消息都将会创建一个新的头部，产生了很多不必要的内存操作。使用CompositeByteBuf是一个很好的选择，它消除了这些额外的复制，以帮助你复用这些消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CompositeByteBuf messageBuf = Unpooled.compositeBuffer();</div><div class="line">ByteBuf headerBuf = ....;</div><div class="line">ByteBuf bodyBuf = ....;</div><div class="line">messageBuf.addComponents(headerBuf,bodyBuf);</div><div class="line"><span class="keyword">for</span> (ByteBuf buf : messageBuf) &#123;</div><div class="line">	System.out.println(buf.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CompositeByteBuf透明的实现了zero-copy，zero-copy其实就是避免数据在两个内存区域中来回的复制。从操作系统层面上来讲，zero-copy指的是避免在内核态与用户态之间的数据缓冲区复制（通过mmap避免），而Netty中的zero-copy更偏向于在用户态中的数据操作的优化，就像使用CompositeByteBuf来复用多个ByteBuf以避免额外的复制，也可以使用wrap()方法来将一个字节数组包装成ByteBuf，又或者使用ByteBuf的slice()方法把它分割为多个共享同一内存区域的ByteBuf，这些都是为了优化内存的使用率。</p>
<p>那么如何创建ByteBuf呢？在上面的代码中使用到了Unpooled，它是Netty提供的一个用于创建与分配ByteBuf的工具类，建议都使用这个工具类来创建你的缓冲区，不要自己去调用构造函数。经常使用的是wrappedBuffer()与copiedBuffer()，它们一个是用于将一个字节数组或ByteBuffer包装为一个ByteBuf，一个是根据传入的字节数组与ByteBuffer/ByteBuf来复制出一个新的ByteBuf。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// 通过array.clone()来复制一个数组进行包装</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuf <span class="title">copiedBuffer</span><span class="params">(<span class="keyword">byte</span>[] array)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> array.length == <span class="number">0</span>?EMPTY_BUFFER:wrappedBuffer((<span class="keyword">byte</span>[])array.clone());</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 默认是堆内分配</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuf <span class="title">wrappedBuffer</span><span class="params">(<span class="keyword">byte</span>[] array)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> (ByteBuf)(array.length == <span class="number">0</span>?EMPTY_BUFFER:<span class="keyword">new</span> UnpooledHeapByteBuf(ALLOC, array, array.length));</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 也提供了堆外分配的方法</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteBufAllocator ALLOC;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuf <span class="title">directBuffer</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> ALLOC.directBuffer(initialCapacity);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>相对底层的分配方法是使用ByteBufAllocator，Netty实现了PooledByteBufAllocator和UnpooledByteBufAllocator，前者使用了<a href="https://github.com/jemalloc/jemalloc" target="_blank" rel="external">jemalloc（一种malloc()的实现）</a>来分配内存，并且实现了对ByteBuf的池化以提高性能。后者分配的是未池化的ByteBuf，其分配方式与之前讲的一致。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Channel channel = ...;</div><div class="line">ByteBufAllocator allocator = channel.alloc();</div><div class="line">ByteBuf buffer = allocator.directBuffer();</div><div class="line"><span class="keyword">do</span> something.......</div></pre></td></tr></table></figure>
<p>为了优化内存使用率，Netty提供了一套手动的方式来追踪不活跃对象，像UnpooledHeapByteBuf这种分配在堆内的对象得益于JVM的GC管理，无需额外操心，而UnpooledDirectByteBuf是在堆外分配的，它的内部基于DirectByteBuffer，DirectByteBuffer会先向Bits类申请一个额度（Bits还拥有一个全局变量totalCapacity，记录了所有DirectByteBuffer总大小），每次申请前都会查看是否已经超过-XX:MaxDirectMemorySize所设置的上限，如果超限就会尝试调用Sytem.gc()，以试图回收一部分内存，然后休眠100毫秒，如果内存还是不足，则只能抛出OOM异常。堆外内存的回收虽然有了这么一层保障，但为了提高性能与使用率，主动回收也是很有必要的。由于Netty还实现了ByteBuf的池化，像PooledHeapByteBuf和PooledDirectByteBuf就必须依赖于手动的方式来进行回收（放回池中）。</p>
<p>Netty使用了引用计数器的方式来追踪那些不活跃的对象。引用计数的接口为ReferenceCounted，它的思想很简单，只要ByteBuf对象的引用计数大于0，就保证该对象不会被释放回收，可以通过手动调用release()与retain()方法来操作该对象的引用计数值递减或递增。用户也可以通过自定义一个ReferenceCounted的实现类，以满足自定义的规则。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.buffer;</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractReferenceCountedByteBuf</span> <span class="keyword">extends</span> <span class="title">AbstractByteBuf</span> </span>&#123;</div><div class="line">	<span class="comment">// 由于ByteBuf的实例对象会非常多,所以这里没有将refCnt包装为AtomicInteger</span></div><div class="line">	<span class="comment">// 而是使用一个全局的AtomicIntegerFieldUpdater来负责操作refCnt</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicIntegerFieldUpdater&lt;AbstractReferenceCountedByteBuf&gt; refCntUpdater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, <span class="string">"refCnt"</span>);</div><div class="line">	<span class="comment">// 每个ByteBuf的初始引用值都为1</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> refCnt = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">refCnt</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.refCnt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setRefCnt</span><span class="params">(<span class="keyword">int</span> refCnt)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.refCnt = refCnt;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> ByteBuf <span class="title">retain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.retain0(<span class="number">1</span>);</div><div class="line">    &#125;	</div><div class="line">	</div><div class="line">	<span class="comment">// 引用计数值递增increment，increment必须大于0</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ByteBuf <span class="title">retain</span><span class="params">(<span class="keyword">int</span> increment)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.retain0(ObjectUtil.checkPositive(increment, <span class="string">"increment"</span>));</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">checkPositive</span><span class="params">(<span class="keyword">int</span> i, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(i &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(name + <span class="string">": "</span> + i + <span class="string">" (expected: &gt; 0)"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 使用CAS操作不断尝试更新值</span></div><div class="line">    <span class="function"><span class="keyword">private</span> ByteBuf <span class="title">retain0</span><span class="params">(<span class="keyword">int</span> increment)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> refCnt;</div><div class="line">        <span class="keyword">int</span> nextCnt;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            refCnt = <span class="keyword">this</span>.refCnt;</div><div class="line">            nextCnt = refCnt + increment;</div><div class="line">            <span class="keyword">if</span>(nextCnt &lt;= increment) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalReferenceCountException(refCnt, increment);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">while</span>(!refCntUpdater.compareAndSet(<span class="keyword">this</span>, refCnt, nextCnt));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.release0(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> decrement)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.release0(ObjectUtil.checkPositive(decrement, <span class="string">"decrement"</span>));</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">release0</span><span class="params">(<span class="keyword">int</span> decrement)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> refCnt;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            refCnt = <span class="keyword">this</span>.refCnt;</div><div class="line">            <span class="keyword">if</span>(refCnt &lt; decrement) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalReferenceCountException(refCnt, -decrement);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">while</span>(!refCntUpdater.compareAndSet(<span class="keyword">this</span>, refCnt, refCnt - decrement));</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(refCnt == decrement) &#123;</div><div class="line">            <span class="keyword">this</span>.deallocate(); </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">()</span></span>;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><hr>
<p>Netty中的Channel与Java NIO的概念一样，都是对一个实体或连接的抽象，但Netty提供了一套更加通用的API。就以网络套接字为例，在Java中OIO与NIO是截然不同的两套API，假设你之前使用的是OIO而又想更改为NIO实现，那么几乎需要重写所有代码。而在Netty中，只需要更改短短几行代码（更改Channel与EventLoop的实现类，如把OioServerSocketChannel替换为NioServerSocketChannel），就可以完成OIO与NIO（或其他）之间的转换。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fm103i127ej20xe0f074y.jpg" alt=""></p>
<p>每个Channel最终都会被分配一个ChannelPipeline和ChannelConfig，前者持有所有负责处理入站与出站数据以及事件的ChannelHandler，后者包含了该Channel的所有配置设置，并且支持热更新，由于不同的传输类型可能具有其特别的配置，所以该类可能会实现为ChannelConfig的不同子类。</p>
<p>Channel是线程安全的（与之后要讲的线程模型有关），因此你完全可以在多个线程中复用同一个Channel，就像如下代码所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Channel channel = ...</div><div class="line"><span class="keyword">final</span> ByteBuf buffer = Unpooled.copiedBuffer(<span class="string">"Hello,World!"</span>, CharsetUtil.UTF_8).retain();</div><div class="line">Runnable writer = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		channel.writeAndFlush(buffer.duplicate());</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Executor executor = Executors.newCachedThreadPool();</div><div class="line">executor.execute(writer);</div><div class="line">executor.execute(writer);</div><div class="line">.......</div></pre></td></tr></table></figure>
<p>Netty除了支持常见的NIO与OIO，还内置了其他的传输类型。</p>
<table>
<thead>
<tr>
<th>Nmae</th>
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>NIO</td>
<td>io.netty.channel.socket.nio</td>
<td>以Java NIO为基础实现</td>
</tr>
<tr>
<td>OIO</td>
<td>io.netty.channel.socket.oio</td>
<td>以java.net为基础实现，使用阻塞I/O模型</td>
</tr>
<tr>
<td>Epoll</td>
<td>io.netty.channel.epoll</td>
<td>由JNI驱动epoll()实现的更高性能的非阻塞I/O，它只能使用在Linux</td>
</tr>
<tr>
<td>Local</td>
<td>io.netty.channel.local</td>
<td>本地传输，在JVM内部通过管道进行通信</td>
</tr>
<tr>
<td>Embedded</td>
<td>io.netty.channel.embedded</td>
<td>允许在不需要真实网络传输的环境下使用ChannelHandler，主要用于对ChannelHandler进行测试</td>
</tr>
</tbody>
</table>
<p>NIO、OIO、Epoll我们应该已经很熟悉了，下面主要说说Local与Embedded。</p>
<p>Local传输用于在同一个JVM中运行的客户端和服务器程序之间的异步通信，与服务器Channel相关联的SocketAddress并没有绑定真正的物理网络地址，它会被存储在注册表中，并在Channel关闭时注销。因此Local传输不会接受真正的网络流量，也就是说它不能与其他传输实现进行互操作。</p>
<p>Embedded传输主要用于对ChannelHandler进行单元测试，ChannelHandler是用于处理消息的逻辑组件，Netty通过将入站消息与出站消息都写入到EmbeddedChannel中的方式（提供了write/readInbound()与write/readOutbound()来读写入站与出站消息）来实现对ChannelHandler的单元测试。</p>
<h3 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h3><hr>
<p>ChannelHandler充当了处理入站和出站数据的应用程序逻辑的容器，该类是基于事件驱动的，它会响应相关的事件然后去调用其关联的回调函数，例如当一个新的连接被建立时，ChannelHandler的channelActive()方法将会被调用。</p>
<p>关于入站消息和出站消息的数据流向定义，如果以客户端为主视角来说的话，那么从客户端流向服务器的数据被称为出站，反之为入站。</p>
<p>入站事件是可能被入站数据或者相关的状态更改而触发的事件，包括：连接已被激活、连接失活、读取入站数据、用户事件、发生异常等。</p>
<p>出站事件是未来将会触发的某个动作的结果的事件，这些动作包括：打开或关闭远程节点的连接、将数据写（或冲刷）到套接字。</p>
<p>ChannelHandler的主要用途包括：</p>
<ul>
<li><p>对入站与出站数据的业务逻辑处理</p>
</li>
<li><p>记录日志</p>
</li>
<li><p>将数据从一种格式转换为另一种格式，实现编解码器。以一次HTTP协议（或者其他应用层协议）的流程为例，数据在网络传输时的单位为字节，当客户端发送请求到服务器时，服务器需要通过解码器（处理入站消息）将字节解码为协议的消息内容，服务器在发送响应的时候（处理出站消息），还需要通过编码器将消息内容编码为字节。</p>
</li>
<li><p>捕获异常</p>
</li>
<li><p>提供Channel生命周期内的通知，如Channel活动时与非活动时</p>
</li>
</ul>
<p>Netty中到处都充满了异步与事件驱动，而回调函数正是用于响应事件之后的操作。由于异步会直接返回一个结果，所以Netty提供了ChannelFuture（实现了java.util.concurrent.Future）来作为异步调用返回的占位符，真正的结果会在未来的某个时刻完成，到时候就可以通过ChannelFuture对其进行访问，每个Netty的出站I/O操作都将会返回一个ChannelFuture。</p>
<p>Netty还提供了ChannelFutureListener接口来监听ChannelFuture是否成功，并采取对应的操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Channel channel = ...</div><div class="line">ChannelFuture future = channel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"192.168.0.1"</span>,<span class="number">6666</span>));</div><div class="line"><span class="comment">// 注册一个监听器</span></div><div class="line">future.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (future.isSuccess()) &#123;</div><div class="line">			<span class="comment">// do something....</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 输出错误信息</span></div><div class="line">			Throwable cause = future.cause();</div><div class="line">			cause.printStackTrace();</div><div class="line">			<span class="comment">// do something....</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ChannelFutureListener接口中还提供了几个简单的默认实现，方便我们使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.channel;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</div><div class="line"><span class="keyword">import</span> io.netty.util.concurrent.GenericFutureListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelFutureListener</span> <span class="keyword">extends</span> <span class="title">GenericFutureListener</span>&lt;<span class="title">ChannelFuture</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">// 在Future完成时关闭</span></div><div class="line">    ChannelFutureListener CLOSE = <span class="keyword">new</span> ChannelFutureListener() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> </span>&#123;</div><div class="line">            future.channel().close();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">	<span class="comment">// 如果失败则关闭</span></div><div class="line">    ChannelFutureListener CLOSE_ON_FAILURE = <span class="keyword">new</span> ChannelFutureListener() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(!future.isSuccess()) &#123;</div><div class="line">                future.channel().close();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">	<span class="comment">// 将异常信息传递给下一个ChannelHandler</span></div><div class="line">    ChannelFutureListener FIRE_EXCEPTION_ON_FAILURE = <span class="keyword">new</span> ChannelFutureListener() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(!future.isSuccess()) &#123;</div><div class="line">                future.channel().pipeline().fireExceptionCaught(future.cause());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ChannelHandler接口定义了对它生命周期进行监听的回调函数，在ChannelHandler被添加到ChannelPipeline或者被移除时都会调用这些函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.channel;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelHandler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext var1, Throwable var2)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 该注解表明这个ChannelHandler可被其他线程复用</span></div><div class="line">    <span class="meta">@Inherited</span></div><div class="line">    <span class="meta">@Documented</span></div><div class="line">    <span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line">    <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Sharable &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>入站消息与出站消息由其对应的接口ChannelInboundHandler与ChannelOutboundHandler负责，这两个接口定义了监听Channel的生命周期的状态改变事件的回调函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.channel;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandler;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelInboundHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandler</span> </span>&#123;</div><div class="line">	<span class="comment">// 当channel被注册到EventLoop时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当channel已经被创建，但还未注册到EventLoop（或者从EventLoop中注销）被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelUnregistered</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当channel处于活动状态（连接到远程节点）被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 当channel处于非活动状态（没有连接到远程节点）被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当从channel读取数据时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext var1, Object var2)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当channel的上一个读操作完成时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当ChannelInboundHandler.fireUserEventTriggered()方法被调用时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext var1, Object var2)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当channel的可写状态发生改变时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当处理过程中发生异常时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext var1, Throwable var2)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> io.netty.channel;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandler;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelPromise;</div><div class="line"><span class="keyword">import</span> java.net.SocketAddress;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelOutboundHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandler</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 当请求将Channel绑定到一个地址时被调用</span></div><div class="line">	<span class="comment">// ChannelPromise是ChannelFuture的一个子接口，定义了如setSuccess(),setFailure()等方法</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bind</span><span class="params">(ChannelHandlerContext var1, SocketAddress var2, ChannelPromise var3)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当请求将Channel连接到远程节点时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(ChannelHandlerContext var1, SocketAddress var2, SocketAddress var3, ChannelPromise var4)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当请求将Channel从远程节点断开时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disconnect</span><span class="params">(ChannelHandlerContext var1, ChannelPromise var2)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 当请求关闭Channel时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(ChannelHandlerContext var1, ChannelPromise var2)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 当请求将Channel从它的EventLoop中注销时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deregister</span><span class="params">(ChannelHandlerContext var1, ChannelPromise var2)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当请求从Channel读取数据时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 当请求通过Channel将数据写到远程节点时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext var1, Object var2, ChannelPromise var3)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 当请求通过Channel将缓冲中的数据冲刷到远程节点时被调用</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过实现ChannelInboundHandler或者ChannelOutboundHandler就可以完成用户自定义的应用逻辑处理程序，不过Netty已经帮你实现了一些基本操作，用户只需要继承并扩展ChannelInboundHandlerAdapter或ChannelOutboundHandlerAdapter来作为自定义实现的起始点。</p>
<p>ChannelInboundHandlerAdapter与ChannelOutboundHandlerAdapter都继承于ChannelHandlerAdapter，该抽象类简单实现了ChannelHandler接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">ChannelHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> added;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChannelHandlerAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 该方法不允许将此ChannelHandler共享复用</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ensureNotSharable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isSharable()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"ChannelHandler "</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">" is not allowed to be shared"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 使用反射判断实现类有没有@Sharable注解，以确认该类是否为可共享复用的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSharable</span><span class="params">()</span> </span>&#123;</div><div class="line">        Class clazz = <span class="keyword">this</span>.getClass();</div><div class="line">        Map cache = InternalThreadLocalMap.get().handlerSharableCache();</div><div class="line">        Boolean sharable = (Boolean)cache.get(clazz);</div><div class="line">        <span class="keyword">if</span>(sharable == <span class="keyword">null</span>) &#123;</div><div class="line">            sharable = Boolean.valueOf(clazz.isAnnotationPresent(Sharable.class));</div><div class="line">            cache.put(clazz, sharable);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sharable.booleanValue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireExceptionCaught(cause);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ChannelInboundHandlerAdapter与ChannelOutboundHandlerAdapter默认只是简单地将请求传递给ChannelPipeline中的下一个ChannelHandler，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">ChannelInboundHandler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChannelInboundHandlerAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireChannelRegistered();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelUnregistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireChannelUnregistered();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireChannelActive();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireChannelInactive();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireChannelRead(msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireChannelReadComplete();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireUserEventTriggered(evt);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireChannelWritabilityChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.fireExceptionCaught(cause);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelOutboundHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">ChannelOutboundHandler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChannelOutboundHandlerAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.bind(localAddress, promise);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.connect(remoteAddress, localAddress, promise);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">(ChannelHandlerContext ctx, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.disconnect(promise);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ChannelHandlerContext ctx, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.close(promise);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deregister</span><span class="params">(ChannelHandlerContext ctx, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.deregister(promise);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.read();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.write(msg, promise);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.flush();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于处理入站消息，另外一种选择是继承SimpleChannelInboundHandler，它是Netty的一个继承于ChannelInboundHandlerAdapter的抽象类，并在其之上实现了自动释放资源的功能。</p>
<p>我们在了解ByteBuf时就已经知道了Netty使用了一套自己实现的引用计数算法来主动释放资源，假设你的ChannelHandler继承于ChannelInboundHandlerAdapter或ChannelOutboundHandlerAdapter，那么你就有责任去管理你所分配的ByteBuf，一般来说，一个消息对象（ByteBuf）已经被消费（或丢弃）了，并且不会传递给ChannelHandler链中的下一个处理器（如果该消息到达了实际的传输层，那么当它被写入或Channel关闭时，都会被自动释放），那么你就需要去手动释放它。通过一个简单的工具类ReferenceCountUtil的release方法，就可以做到这一点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这个泛型为消息对象的类型</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">I</span>&gt; <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeParameterMatcher matcher;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> autoRelease;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SimpleChannelInboundHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SimpleChannelInboundHandler</span><span class="params">(<span class="keyword">boolean</span> autoRelease)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.matcher = TypeParameterMatcher.find(<span class="keyword">this</span>, SimpleChannelInboundHandler.class, <span class="string">"I"</span>);</div><div class="line">        <span class="keyword">this</span>.autoRelease = autoRelease;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SimpleChannelInboundHandler</span><span class="params">(Class&lt;? extends I&gt; inboundMessageType)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(inboundMessageType, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SimpleChannelInboundHandler</span><span class="params">(Class&lt;? extends I&gt; inboundMessageType, <span class="keyword">boolean</span> autoRelease)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.matcher = TypeParameterMatcher.get(inboundMessageType);</div><div class="line">        <span class="keyword">this</span>.autoRelease = autoRelease;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acceptInboundMessage</span><span class="params">(Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.matcher.match(msg);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// SimpleChannelInboundHandler只是替你做了ReferenceCountUtil.release()</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> release = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.acceptInboundMessage(msg)) &#123;</div><div class="line">                <span class="keyword">this</span>.channelRead0(ctx, msg);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                release = <span class="keyword">false</span>;</div><div class="line">                ctx.fireChannelRead(msg);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.autoRelease &amp;&amp; release) &#123;</div><div class="line">                ReferenceCountUtil.release(msg);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">	<span class="comment">// 这个方法才是我们需要实现的方法</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext var1, I var2)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// ReferenceCountUtil中的源码，release方法对消息对象的类型进行判断然后调用它的release()方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> msg <span class="keyword">instanceof</span> ReferenceCounted?((ReferenceCounted)msg).release():<span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h3><hr>
<p>为了模块化与解耦合，不可能由一个ChannelHandler来完成所有应用逻辑，所以Netty采用了拦截器链的设计。ChannelPipeline就是用来管理ChannelHandler实例链的容器，它的职责就是保证实例链的流动。</p>
<p>每一个新创建的Channel都将会被分配一个新的ChannelPipeline，这种关联关系是永久性的，一个Channel一生只能对应一个ChannelPipeline。</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fm1er9l4jfj213h0fcq3d.jpg" alt=""></p>
<p>一个入站事件被触发时，它会先从ChannelPipeline的最左端（头部）开始一直传播到ChannelPipeline的最右端（尾部），而出站事件正好与入站事件顺序相反（从最右端一直传播到最左端）。这个顺序是定死的，Netty总是将ChannelPipeline的入站口作为头部，而将出站口作为尾部。在事件传播的过程中，ChannelPipeline会判断下一个ChannelHandler的类型是否和事件的运动方向相匹配，如果不匹配，就跳过该ChannelHandler并继续检查下一个（保证入站事件只会被ChannelInboundHandler处理），一个ChannelHandler也可以同时实现ChannelInboundHandler与ChannelOutboundHandler，它在入站事件与出站事件中都会被调用。</p>
<p>在阅读ChannelHandler的源码时，发现很多方法需要一个ChannelHandlerContext类型的参数，该接口是ChannelPipeline与ChannelHandler之间相关联的关键。ChannelHandlerContext可以通知ChannelPipeline中的当前ChannelHandler的下一个ChannelHandler，还可以动态地改变当前ChannelHandler在ChannelPipeline中的位置（通过调用ChannelPipeline中的各种方法来修改）。</p>
<p>ChannelHandlerContext负责了在同一个ChannelPipeline中的ChannelHandler与其他ChannelHandler之间的交互，每个ChannelHandlerContext都对应了一个ChannelHandler。在DefaultChannelPipeline的源码中，已经表现的很明显了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;</div><div class="line">    .........</div><div class="line">	<span class="comment">// 头部节点和尾部节点的引用变量</span></div><div class="line">	<span class="comment">// ChannelHandlerContext在ChannelPipeline中是以链表的形式组织的</span></div><div class="line">    <span class="keyword">final</span> AbstractChannelHandlerContext head; </div><div class="line">    <span class="keyword">final</span> AbstractChannelHandlerContext tail;	</div><div class="line">	.........</div><div class="line">	</div><div class="line">	<span class="comment">// 添加一个ChannelHandler到链表尾部</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">addLast</span><span class="params">(String name, ChannelHandler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addLast((EventExecutorGroup)<span class="keyword">null</span>, name, handler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">addLast</span><span class="params">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> AbstractChannelHandlerContext newCtx;</div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">			<span class="comment">// 检查ChannelHandler是否为一个共享对象(@Sharable)</span></div><div class="line">			<span class="comment">// 如果该ChannelHandler没有@Sharable注解，并且是已被添加过的那么就抛出异常</span></div><div class="line">            checkMultiplicity(handler); </div><div class="line">			<span class="comment">// 返回一个DefaultChannelHandlerContext，注意该对象持有了传入的ChannelHandler</span></div><div class="line">            newCtx = <span class="keyword">this</span>.newContext(group, <span class="keyword">this</span>.filterName(name, handler), handler);</div><div class="line">            <span class="keyword">this</span>.addLast0(newCtx);</div><div class="line">			<span class="comment">// 如果当前ChannelPipeline没有被注册，那么就先加到未决链表中</span></div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.registered) &#123;</div><div class="line">                newCtx.setAddPending();</div><div class="line">                <span class="keyword">this</span>.callHandlerCallbackLater(newCtx, <span class="keyword">true</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">			</div><div class="line">			<span class="comment">// 否则就调用ChannelHandler中的handlerAdded()</span></div><div class="line">            EventExecutor executor = newCtx.executor();</div><div class="line">            <span class="keyword">if</span>(!executor.inEventLoop()) &#123;</div><div class="line">                newCtx.setAddPending();</div><div class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        DefaultChannelPipeline.<span class="keyword">this</span>.callHandlerAdded0(newCtx);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.callHandlerAdded0(newCtx);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 将新的ChannelHandlerContext插入到尾部与尾部之前的节点之间</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addLast0</span><span class="params">(AbstractChannelHandlerContext newCtx)</span> </span>&#123;</div><div class="line">        AbstractChannelHandlerContext prev = <span class="keyword">this</span>.tail.prev;</div><div class="line">        newCtx.prev = prev;</div><div class="line">        newCtx.next = <span class="keyword">this</span>.tail;</div><div class="line">        prev.next = newCtx;</div><div class="line">        <span class="keyword">this</span>.tail.prev = newCtx;</div><div class="line">    &#125;</div><div class="line">	.....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ChannelHandlerContext还定义了许多与Channel和ChannelPipeline重合的方法（像read()、write()、connect()这些用于出站的方法或者如fireChannelXXXX()这样用于入站的方法），不同之处在于调用Channel或者ChannelPipeline上的这些方法，它们将会从头沿着整个ChannelHandler实例链进行传播，而调用位于ChannelHandlerContext上的相同方法，则会从当前所关联的ChannelHandler开始，且只会传播给实例链中的下一个ChannelHandler。而且，事件之间的移动（从一个ChannelHandler到下一个ChannelHandler）也是通过ChannelHandlerContext中的方法调用完成的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;	</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">fireChannelRead</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">		<span class="comment">// 注意这里将头节点传入了进去</span></div><div class="line">        AbstractChannelHandlerContext.invokeChannelRead(<span class="keyword">this</span>.head, msg);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span> <span class="keyword">implements</span> <span class="title">ChannelHandlerContext</span>, <span class="title">ResourceLeakHint</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeChannelRead</span><span class="params">(<span class="keyword">final</span> AbstractChannelHandlerContext next, Object msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class="string">"msg"</span>), next);</div><div class="line">        EventExecutor executor = next.executor();</div><div class="line">        <span class="keyword">if</span>(executor.inEventLoop()) &#123;</div><div class="line">            next.invokeChannelRead(m);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            executor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    next.invokeChannelRead(m);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeChannelRead</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.invokeHandler()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ((ChannelInboundHandler)<span class="keyword">this</span>.handler()).channelRead(<span class="keyword">this</span>, msg);</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</div><div class="line">                <span class="keyword">this</span>.notifyHandlerException(var3);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 寻找下一个ChannelHandler</span></div><div class="line">            <span class="keyword">this</span>.fireChannelRead(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;	</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ChannelHandlerContext <span class="title">fireChannelRead</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        invokeChannelRead(<span class="keyword">this</span>.findContextInbound(), msg);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> AbstractChannelHandlerContext <span class="title">findContextInbound</span><span class="params">()</span> </span>&#123;</div><div class="line">        AbstractChannelHandlerContext ctx = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            ctx = ctx.next;</div><div class="line">        &#125; <span class="keyword">while</span>(!ctx.inbound); <span class="comment">// 直到找到一个ChannelInboundHandler</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> ctx;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h3><hr>
<p>为了最大限度地提供高性能和可维护性，Netty设计了一套强大又易用的线程模型。在一个网络框架中，最重要的能力是能够快速高效地处理在连接的生命周期内发生的各种事件，与之相匹配的程序构造被称为事件循环，Netty定义了接口EventLoop来负责这项工作。</p>
<p>如果是经常用Java进行多线程开发的童鞋想必经常会使用到线程池，也就是Executor这套API。Netty就是从Executor（java.util.concurrent）之上扩展了自己的EventExecutorGroup（io.netty.util.concurrent），同时为了与Channel的事件进行交互，还扩展了EventLoopGroup接口（io.netty.channel）。在io.netty.util.concurrent包下的EventExecutorXXX负责实现线程并发相关的工作，而在io.netty.channel包下的EventLoopXXX负责实现网络编程相关的工作（处理Channel中的事件）。</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fm296hz0p9j20ff0kc3z2.jpg" alt=""></p>
<p>在Netty的线程模型中，一个EventLoop将由一个永远不会改变的Thread驱动，而一个Channel一生只会使用一个EventLoop（但是一个EventLoop可能会被指派用于服务多个Channel），在Channel中的所有I/O操作和事件都由EventLoop中的线程处理，也就是说一个Channel的一生之中都只会使用到一个线程。不过在Netty3，只有入站事件会被EventLoop处理，所有出站事件都会由调用线程处理，这种设计导致了ChannelHandler的线程安全问题。Netty4简化了线程模型，通过在同一个线程处理所有事件，既解决了这个问题，还提供了一个更加简单的架构。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.channel;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadEventLoop</span> <span class="keyword">extends</span> <span class="title">SingleThreadEventExecutor</span> <span class="keyword">implements</span> <span class="title">EventLoop</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX_PENDING_TASKS = Math.max(<span class="number">16</span>, SystemPropertyUtil.getInt(<span class="string">"io.netty.eventLoop.maxPendingTasks"</span>, <span class="number">2147483647</span>));</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Runnable&gt; tailTasks;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventLoop</span><span class="params">(EventLoopGroup parent, ThreadFactory threadFactory, <span class="keyword">boolean</span> addTaskWakesUp)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(parent, threadFactory, addTaskWakesUp, DEFAULT_MAX_PENDING_TASKS, RejectedExecutionHandlers.reject());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventLoop</span><span class="params">(EventLoopGroup parent, Executor executor, <span class="keyword">boolean</span> addTaskWakesUp)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(parent, executor, addTaskWakesUp, DEFAULT_MAX_PENDING_TASKS, RejectedExecutionHandlers.reject());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventLoop</span><span class="params">(EventLoopGroup parent, ThreadFactory threadFactory, <span class="keyword">boolean</span> addTaskWakesUp, <span class="keyword">int</span> maxPendingTasks, RejectedExecutionHandler rejectedExecutionHandler)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(parent, threadFactory, addTaskWakesUp, maxPendingTasks, rejectedExecutionHandler);</div><div class="line">        <span class="keyword">this</span>.tailTasks = <span class="keyword">this</span>.newTaskQueue(maxPendingTasks);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventLoop</span><span class="params">(EventLoopGroup parent, Executor executor, <span class="keyword">boolean</span> addTaskWakesUp, <span class="keyword">int</span> maxPendingTasks, RejectedExecutionHandler rejectedExecutionHandler)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(parent, executor, addTaskWakesUp, maxPendingTasks, rejectedExecutionHandler);</div><div class="line">        <span class="keyword">this</span>.tailTasks = <span class="keyword">this</span>.newTaskQueue(maxPendingTasks);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 返回它所在的EventLoopGroup</span></div><div class="line">    <span class="function"><span class="keyword">public</span> EventLoopGroup <span class="title">parent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (EventLoopGroup)<span class="keyword">super</span>.parent();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> EventLoop <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (EventLoop)<span class="keyword">super</span>.next();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 注册Channel,这里ChannelPromise和Channel关联到了一起</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">register</span><span class="params">(Channel channel)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.register((ChannelPromise)(<span class="keyword">new</span> DefaultChannelPromise(channel, <span class="keyword">this</span>)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">register</span><span class="params">(ChannelPromise promise)</span> </span>&#123;</div><div class="line">        ObjectUtil.checkNotNull(promise, <span class="string">"promise"</span>);</div><div class="line">        promise.channel().unsafe().register(<span class="keyword">this</span>, promise);</div><div class="line">        <span class="keyword">return</span> promise;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 剩下这些函数都是用于调度任务</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">executeAfterEventLoopIteration</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">        ObjectUtil.checkNotNull(task, <span class="string">"task"</span>);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isShutdown()) &#123;</div><div class="line">            reject();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.tailTasks.offer(task)) &#123;</div><div class="line">            <span class="keyword">this</span>.reject(task);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.wakesUpForTask(task)) &#123;</div><div class="line">            <span class="keyword">this</span>.wakeup(<span class="keyword">this</span>.inEventLoop());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">removeAfterEventLoopIterationTask</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.tailTasks.remove(ObjectUtil.checkNotNull(task, <span class="string">"task"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">wakesUpForTask</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !(task <span class="keyword">instanceof</span> SingleThreadEventLoop.NonWakeupRunnable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterRunningAllTasks</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.runAllTasksFrom(<span class="keyword">this</span>.tailTasks);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">hasTasks</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hasTasks() || !<span class="keyword">this</span>.tailTasks.isEmpty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pendingTasks</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.pendingTasks() + <span class="keyword">this</span>.tailTasks.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">NonWakeupRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了确保一个Channel的整个生命周期中的I/O事件会被一个EventLoop负责，Netty通过inEventLoop()方法来判断当前执行的线程的身份，确定它是否是分配给当前Channel以及它的EventLoop的那一个线程。如果当前（调用）线程正是EventLoop中的线程，那么所提交的任务将会被直接执行，否则，EventLoop将调度该任务以便稍后执行，并将它放入内部的任务队列（每个EventLoop都有它自己的任务队列，从SingleThreadEventLoop的源码就能发现很多用于调度内部任务队列的方法），在下次处理它的事件时，将会执行队列中的那些任务。这种设计可以让任何线程与Channel直接交互，而无需在ChannelHandler中进行额外的同步。</p>
<p>从性能上来考虑，千万不要将一个需要长时间来运行的任务放入到任务队列中，它会影响到该队列中的其他任务的执行。解决方案是使用一个专门的EventExecutor来执行它（ChannelPipeline提供了带有EventExecutorGroup参数的addXXX()方法，该方法可以将传入的ChannelHandler绑定到你传入的EventExecutor之中），这样它就会在另一条线程中执行，与其他任务隔离。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadEventExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractScheduledEventExecutor</span> <span class="keyword">implements</span> <span class="title">OrderedEventExecutor</span> </span>&#123;</div><div class="line">.....</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(task == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"task"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">boolean</span> inEventLoop = <span class="keyword">this</span>.inEventLoop();</div><div class="line">            <span class="keyword">if</span>(inEventLoop) &#123;</div><div class="line">                <span class="keyword">this</span>.addTask(task);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.startThread();</div><div class="line">                <span class="keyword">this</span>.addTask(task);</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.isShutdown() &amp;&amp; <span class="keyword">this</span>.removeTask(task)) &#123;</div><div class="line">                    reject();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.addTaskWakesUp &amp;&amp; <span class="keyword">this</span>.wakesUpForTask(task)) &#123;</div><div class="line">                <span class="keyword">this</span>.wakeup(inEventLoop);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">inEventLoop</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> thread == <span class="keyword">this</span>.thread;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">.....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>EventLoopGroup负责管理和分配EventLoop（创建EventLoop和为每个新创建的Channel分配EventLoop），根据不同的传输类型，EventLoop的创建和分配方式也不同。例如，使用NIO传输类型，EventLoopGroup就会只使用较少的EventLoop（一个EventLoop服务于多个Channel），这是因为NIO基于I/O多路复用，一个线程可以处理多个连接，而如果使用的是OIO，那么新创建一个Channel（连接）就需要分配一个EventLoop（线程）。</p>
<h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><hr>
<p>在深入了解地Netty的核心组件之后，发现它们的设计都很模块化，如果想要实现你自己的应用程序，就需要将这些组件组装到一起。Netty通过Bootstrap类，以对一个Netty应用程序进行配置（组装各个组件），并最终使它运行起来。对于客户端程序和服务器程序所使用到的Bootstrap类是不同的，后者需要使用ServerBootstrap，这样设计是因为，在如TCP这样有连接的协议中，服务器程序往往需要一个以上的Channel，通过父Channel来接受来自客户端的连接，然后创建子Channel用于它们之间的通信，而像UDP这样无连接的协议，它不需要每个连接都创建子Channel，只需要一个Channel即可。</p>
<p>一个比较明显的差异就是Bootstrap与ServerBootstrap的group()方法，后者提供了一个接收2个EventLoopGroup的版本。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 该方法在Bootstrap的父类AbstractBootstrap中，泛型B为它当前子类的类型（为了链式调用）</span></div><div class="line">   <span class="function"><span class="keyword">public</span> B <span class="title">group</span><span class="params">(EventLoopGroup group)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span>(group == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"group"</span>);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.group != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"group set already"</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">this</span>.group = group;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// ServerBootstrap中的实现，它也支持只用一个EventLoopGroup</span></div><div class="line">   <span class="function"><span class="keyword">public</span> ServerBootstrap <span class="title">group</span><span class="params">(EventLoopGroup group)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.group(group, group);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> ServerBootstrap <span class="title">group</span><span class="params">(EventLoopGroup parentGroup, EventLoopGroup childGroup)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.group(parentGroup);</div><div class="line">       <span class="keyword">if</span>(childGroup == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"childGroup"</span>);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.childGroup != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"childGroup set already"</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">this</span>.childGroup = childGroup;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Bootstrap其实没有什么可以好说的，它就只是一个装配工，将各个组件拼装组合到一起，然后进行一些配置，有关它的详细API请参考<a href="http://netty.io/4.1/api/index.html" target="_blank" rel="external">Netty JavaDoc</a>。下面我们将通过一个经典的Echo客户端与服务器的例子，来梳理一遍创建Netty应用的流程。</p>
<p>首先实现的是服务器，我们先实现一个EchoServerInboundHandler，处理入站消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerInboundHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ByteBuf in = (ByteBuf) msg;</div><div class="line">        System.out.printf(<span class="string">"Server received: %s \n"</span>, in.toString(CharsetUtil.UTF_8));</div><div class="line">		<span class="comment">// 由于读事件不是一次性就能把完整消息发送过来的，这里并没有调用writeAndFlush</span></div><div class="line">        ctx.write(in); <span class="comment">// 直接把消息写回给客户端(会被出站消息处理器处理,不过我们的应用没有实现任何出站消息处理器)</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 等读事件已经完成时,冲刷之前写数据的缓冲区</span></div><div class="line">		<span class="comment">// 然后添加了一个监听器，它会在Future完成时进行关闭该Channel.</span></div><div class="line">        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)</div><div class="line">                .addListener(ChannelFutureListener.CLOSE);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 处理异常，输出异常信息，然后关闭Channel</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务器的应用逻辑只有这么多，剩下就是用ServerBootstrap进行配置了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">final</span> EchoServerInboundHandler serverHandler = <span class="keyword">new</span> EchoServerInboundHandler();</div><div class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">// 传输类型使用NIO</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">            b.group(group) <span class="comment">// 配置EventLoopGroup</span></div><div class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">// 配置Channel的类型</span></div><div class="line">                    .localAddress(<span class="keyword">new</span> InetSocketAddress(port)) <span class="comment">// 配置端口号</span></div><div class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123; </div><div class="line">						<span class="comment">// 实现一个ChannelInitializer，它可以方便地添加多个ChannelHandler</span></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                            socketChannel.pipeline().addLast(serverHandler);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            <span class="comment">// i绑定地址，同步等待它完成</span></div><div class="line">            ChannelFuture f = b.bind().sync();</div><div class="line">            <span class="comment">// 关闭这个Future</span></div><div class="line">            f.channel().closeFuture().sync();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">// 关闭应用程序，一般来说Netty应用只需要调用这个方法就够了</span></div><div class="line">            group.shutdownGracefully().sync();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</div><div class="line">            System.err.printf(</div><div class="line">                    <span class="string">"Usage: %s &lt;port&gt; \n"</span>,</div><div class="line">                    EchoServer.class.getSimpleName()</div><div class="line">            );</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">new</span> EchoServer(port).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来实现客户端，同样需要先实现一个入站消息处理器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClientInboundHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 我们在Channel连接到远程节点直接发送一条消息给服务器</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">"Hello, Netty!"</span>, CharsetUtil.UTF_8));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// 输出从服务器Echo的消息</span></div><div class="line">        System.out.printf(<span class="string">"Client received: %s \n"</span>, byteBuf.toString(CharsetUtil.UTF_8));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后配置客户端。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.host = host;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</div><div class="line">            b.group(group)</div><div class="line">                    .channel(NioSocketChannel.class)</div><div class="line">                    .remoteAddress(<span class="keyword">new</span> InetSocketAddress(host, port)) <span class="comment">// 服务器的地址</span></div><div class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123; </div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> EchoClientInboundHandler());</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            ChannelFuture f = b.connect().sync(); <span class="comment">// 连接到服务器</span></div><div class="line">            f.channel().closeFuture().sync();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            group.shutdownGracefully().sync();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</div><div class="line">            System.err.printf(<span class="string">"Usage: %s &lt;host&gt; &lt;port&gt; \n"</span>, EchoClient.class.getSimpleName());</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String host = args[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">new</span> EchoClient(host, port).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现一个Netty应用程序就是如此简单，用户大多数都是在编写各种应用逻辑的ChannelHandler（或者使用Netty内置的各种实用ChannelHandler），然后只需要将它们全部添加到ChannelPipeline即可。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><p><a href="https://netty.io/" target="_blank" rel="external">Netty: Home</a></p>
</li>
<li><p><a href="https://notes.shichao.io/unp/ch6/#io-multiplexing-model" target="_blank" rel="external">Chapter 6. I/O Multiplexing: The select and poll Functions - Shichao’s Notes</a></p>
</li>
<li><p><a href="http://man7.org/linux/man-pages/man7/epoll.7.html" target="_blank" rel="external">epoll(7) - Linux manual page</a></p>
</li>
<li><p><a href="http://tutorials.jenkov.com/java-nio/" target="_blank" rel="external">Java NIO</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://netty.io/images/components.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Netty是一个基于异步与事件驱动的网络应用程序框架，它支持快速与简单地开发可维护的高性能的服务器与客户端。&lt;/p&gt;
&lt;p&gt;所谓事件驱动就是由通
    
    </summary>
    
      <category term="后端" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
      <category term="Netty" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/Netty/"/>
    
    
      <category term="Java" scheme="https://sylvanassun.github.io/tags/Java/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="网络" scheme="https://sylvanassun.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="后端" scheme="https://sylvanassun.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Netty" scheme="https://sylvanassun.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Docker的那点事儿</title>
    <link href="https://sylvanassun.github.io/2017/11/19/2017-11-19-docker_introduction/"/>
    <id>https://sylvanassun.github.io/2017/11/19/2017-11-19-docker_introduction/</id>
    <published>2017-11-19T10:00:00.000Z</published>
    <updated>2017-11-19T11:54:20.966Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker是什么？"><a href="#Docker是什么？" class="headerlink" title="Docker是什么？"></a>Docker是什么？</h3><hr>
<p>Docker是一个基于轻量级虚拟化技术的容器，整个项目基于Go语言开发，并采用了Apache 2.0协议。Docker可以将我们的应用程序打包封装到一个容器中，该容器包含了应用程序的代码、运行环境、依赖库、配置文件等必需的资源，通过容器就可以实现方便快速并且与平台解耦的自动化部署方式，无论你部署时的环境如何，容器中的应用程序都会运行在同一种环境下。</p>
<p>举个栗子，小明写了一个CMS系统，该系统的技术栈非常广，需要依赖于各种开源库和中间件。如果按照纯手动的部署方式，小明需要安装各种开源软件，还需要写好每个开源软件的配置文件。如果只是部署一次，这点时间开销还是可以接受的，但如果小明每隔几天就需要换个服务器去部署他的程序，那么这些繁琐的重复工作无疑是会令人发狂的。这时候，Docker的用处就派上场了，小明只需要根据应用程序的部署步骤编写一份Dockerfile文件（将安装、配置等操作交由Docker自动化处理），然后构建并发布他的镜像，这样，不管在什么机器上，小明都只需要拉取他需要的镜像，然后就可以直接部署运行了，这正是Docker的魅力所在。</p>
<p>那么镜像又是什么呢？镜像是Docker中的一个重要概念：</p>
<ul>
<li><p>Image（镜像）：它类似于虚拟机中使用到的镜像，由于任何应用程序都需要有它自己的运行环境，Image就是用来提供所需运行环境的一个模板。</p>
</li>
<li><p>Container（容器）：Container是Docker提供的一个抽象层，它就像一个轻量级的沙盒，其中包含了一个极简的Linux系统环境与运行在其中的应用程序。Container是Image的运行实例（Image本身是只读的，Container启动时，Docker会在Image的上层创建一个可写层，任何在Container中的修改都不会影响到Image，如果想要在Image保存Container中的修改，Docker采用了基于Container生成新的Image层的策略），Docker引擎利用Container来操作并隔离每个应用（也就是说，每个容器中的应用都是互相独立的）。</p>
</li>
</ul>
<p>其实从Docker与Container的英文单词原意中就可以体会出Docker的思想。Container可以释义为集装箱，集装箱是一个可以便于机械设备装卸的封装货物的通用标准规格，它的发明简化了物流运输的机械化过程，使其建立起了一套标准化的物流运输体系。而Docker的意思为码头工人，可以认为，Docker就像是在码头上辛勤工作的工人，把应用打包成一个个具有某种标准化规格的”集装箱”（其实这里指出的集装箱对应的是Image，在Docker中Container更像是一个运行中的沙盒），当货物运输到目的地后，码头工人们（Docker）就可以把集装箱拆开取出其中的货物（基于Image来创建Container并运行）。这种标准化与隔离性可以很方便地组合使用多个Image来构建你的应用环境（Docker也提倡每个Image都遵循单一职责原则，也就是只做好一件事），或者与其他人共享你的Image。</p>
<blockquote>
<p>本文作者为<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>，首发于<a href="https://sylvanassun.github.io/">SylvanasSun’s Blog</a>。<br>原文链接：<a href="https://sylvanassun.github.io/2017/11/19/2017-11-19-docker_introduction/">https://sylvanassun.github.io/2017/11/19/2017-11-19-docker_introduction/</a><br>（转载请务必保留本段声明，并且保留超链接。）</p>
</blockquote>
<h3 id="Docker-VS-虚拟机"><a href="#Docker-VS-虚拟机" class="headerlink" title="Docker VS 虚拟机"></a>Docker VS 虚拟机</h3><hr>
<p>在上文中我们提到了Docker是基于轻量级虚拟化技术的，所以它与我们平常使用的虚拟机是不一样的。虚拟机技术可以分成以下两类：</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/08/Hardware_Virtualization_%28copy%29.svg" alt="系统虚拟机"></p>
<ul>
<li><p>系统虚拟机：通过软件对计算机系统的模拟来提供一个真实计算机的替代品。它是物理硬件的抽象并提供了运行完整操作系统所需的功能。虚拟机通过物理机器来管理和共享硬件，这样实现了多个虚拟机环境彼此之间的隔离，一台机器上可以运行多个虚拟机，每个虚拟机包括一个操作系统的完整副本。在系统虚拟机中，所运行的所有软件或操作都只会影响到该虚拟机的环境。我们经常使用的VMWare就是系统虚拟机的实现。</p>
</li>
<li><p>程序虚拟机：允许程序独立运行在平台之外。比较典型的例子就是JVM，Java通过JVM这一抽象层使得Java程序与操作系统和硬件平台解耦（因为每个Java程序都是运行在JVM中的），因此实现了所谓的compile once, run everywhere。</p>
</li>
</ul>
<p>Docker所用到的技术与上述两种都不相同，它使用了更轻量级的虚拟化技术，多个Container共享了同一个操作系统内核，并且就像运行在本地上一样。Container技术相对于虚拟机来说，只是一个应用程序层的抽象，它将代码与依赖关系打包到一起，多个Container可以在同一台机器上运行（意味着一个虚拟机上也可以运行多个Container），并与其它Container共享操作系统内核，每一个Container都在用户空间中作为一个独立的进程运行，这些特性都证明了Container要比虚拟机更加灵活与轻量（一般都是结合虚拟机与Docker一起使用）。</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1flnj7b3v1lj214x0d7mxs.jpg" alt=""></p>
<p>Container技术其实并不是个新鲜事物，最早可以追溯到UNIX中的chroot（在1979年的V7 Unix中引入），它可以改变当前正在运行的进程及其子目录的根目录，在这种修改过的环境下运行的程序不能在指定的目录树之外访问文件，从而限制用户的活动范围，为进程提供了隔离空间。</p>
<p>之后各种Unix版本涌现出很多Container技术，在2006年，Google提出了”Process Containers”期望在Linux内核中实现进程资源隔离的相关特性，由于Container在Linux内核中的定义过于宽泛混乱，后来该项目改名为CGroups（Control Groups），实现了对进程的资源限制。</p>
<p>2008年，LXC（Linux Containers）发布，它是一种在操作系统层级上的虚拟化方法，用于在Linux系统上通过共享一个内核来运行多个互相隔离的程序（Container）。LXC正是结合了Linux内核中的CGroups和对分离的名称空间的支持来为应用程序提供了一个隔离的环境。而Docker也是基于LXC实现的（Docker的前身是dotClound公司中的内部项目，它是一家提供PaaS服务的公司。），并作出了许多改进。</p>
<h3 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h3><hr>
<p>在使用Docker之前你需要先安装Docker（这好像是一句废话。。。），根据不同的平台安装方法都不相同，可以去参考<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">Install Docker | Docker Documentation</a>或者自行Google。</p>
<p>安装完毕之后，输入<code>docker --version</code>来确认是否安装成功。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> docker --version</div><div class="line">Docker version 17.05.0-ce-rc1, build 2878a85</div></pre></td></tr></table></figure>
<p>从<a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a>中可以pull到其他人发布的Image，我们也可以注册一个账号去发布自己的Image与他人共享。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@Jack ~]# docker search redis # 查看redis镜像是否存在</div><div class="line">[root@Jack ~]# docker pull redis # 拉取redis镜像到本机</div><div class="line">Using default tag: latest</div><div class="line">Trying to pull repository docker.io/library/redis ... </div><div class="line">latest: Pulling from docker.io/library/redis</div><div class="line">Digest: sha256:cd277716dbff2c0211c8366687d275d2b53112fecbf9d6c86e9853edb0900956</div><div class="line">[root@Jack ~]# docker images # 查看镜像信息</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">docker.io/python    3.6-onbuild         7195f9298ffb        2 weeks ago         691.1 MB</div><div class="line">docker.io/mongo     latest              d22888af0ce0        2 weeks ago         360.9 MB</div><div class="line">docker.io/redis     latest              8f2e175b3bd1        2 weeks ago         106.6 MB</div></pre></td></tr></table></figure>
<p>有了Image，之后就可以在其之上运行一个Container了，命令如下。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@Jack ~]# docker run -d -p 6379:6379 redis # 运行redis，-p代表将本机上6379端口映射到Container的6379端口 -d代表在后台启动</div><div class="line">[root@Jack ~]# docker ps -a # 查看容器信息，如果不加-a只会显示当前运行中的容器</div><div class="line"><span class="meta">#</span> 如果想要进入容器中，那么需要执行以下命令</div><div class="line">[root@Jack ~]# docker ps # 先获得容器的id</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</div><div class="line">1f928073b7eb        redis               "docker-entrypoint.sh"   45 seconds ago      Up 44 seconds       0.0.0.0:6379-&gt;6379/tcp   desperate_khorana</div><div class="line">[root@Jack ~]# docker exec -it 1f928073b7eb /bin/bash # 然后再执行该命令进入到容器中</div><div class="line">root@1f928073b7eb:/data# touch hello_docker.txt # 在容器中创建一个文件</div><div class="line">root@1f928073b7eb:/data# exit # 退出</div><div class="line">exit</div><div class="line">[root@Jack ~]# </div><div class="line"><span class="meta">#</span> 也可以在启动时直接进入 命令如下</div><div class="line">[root@Jack ~]# docker run -d -it -p 6379:6379 redis /bin/bash</div></pre></td></tr></table></figure>
<p>我们对Container做出了修改，如果想要保留这个修改，可以通过commit命令来生成一个新的Image。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> -m为描述信息 -a为作者 1f9是你要保存的容器id 取前3个字符 docker可以自行识别</div><div class="line"><span class="meta">#</span> sylvanassun/redis为镜像名 :test 为一个tag 一般用于标识版本</div><div class="line">[root@Jack ~]# docker commit -m "test" -a "SylvanasSun" 1f9 sylvanassun/redis:test</div><div class="line">sha256:e7073e8e5bd70b8d58092fd6bd8c2551e65dd29241c235eddf2a7f4b4b25cbbd</div><div class="line">[root@Jack ~]# docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">sylvanassun/redis   test                e7073e8e5bd7        2 seconds ago       106.6 MB</div><div class="line">docker.io/python    3.6-onbuild         7195f9298ffb        2 weeks ago         691.1 MB</div><div class="line">docker.io/mongo     latest              d22888af0ce0        2 weeks ago         360.9 MB</div><div class="line">docker.io/redis     latest              8f2e175b3bd1        2 weeks ago         106.6 MB</div></pre></td></tr></table></figure>
<p>想删除一个容器或镜像也很简单，但在删除镜像前需要先删除依赖于它的容器。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@Jack ~]# docker stop 1f9 # 关闭运行中的容器，相应的也有docker start id命令来启动一个容器</div><div class="line">1f9</div><div class="line">[root@Jack ~]# docker rm 1f9 # 删除容器</div><div class="line">1f9</div><div class="line">[root@Jack ~]# docker rmi e70 # 删除上面保存的镜像</div><div class="line">Untagged: sylvanassun/redis:test</div><div class="line">Deleted: sha256:e7073e8e5bd70b8d58092fd6bd8c2551e65dd29241c235eddf2a7f4b4b25cbbd</div><div class="line">Deleted: sha256:751db4a870e5f703082b31c1614a19c86e0c967334a61f5d22b2511072aef56d</div></pre></td></tr></table></figure>
<p>如果想要自己构建一个镜像，那么需要编写Dockerfile文件，该文件描述了镜像的依赖环境以及如何配置你的应用环境。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用python:2.7-slim 作为父镜像</span></div><div class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span>-slim</div><div class="line"></div><div class="line"><span class="comment"># 跳转到/app 其实就是cd命令</span></div><div class="line"><span class="keyword">WORKDIR</span> /app</div><div class="line"></div><div class="line"><span class="comment"># 将当前目录的内容(.)复制到镜像的/app目录下</span></div><div class="line"><span class="keyword">ADD</span> . /app</div><div class="line"></div><div class="line"><span class="comment"># RUN代表运行的shell命令，下面这条命令是根据requirements.txt安装python应用的依赖包</span></div><div class="line"><span class="keyword">RUN</span> pip install --trusted-host pypi.python.org -r requirements.txt</div><div class="line"></div><div class="line"><span class="comment"># 暴露80端口让外界访问</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"></div><div class="line"><span class="comment"># 定义环境变量</span></div><div class="line"><span class="keyword">ENV</span> NAME World</div><div class="line"></div><div class="line"><span class="comment"># 当容器启动时执行的命令，它与RUN不同，只在容器启动时执行一次</span></div><div class="line"><span class="keyword">CMD</span> ["python", "app.py"]</div></pre></td></tr></table></figure>
<p>然后就可以通过<code>docker build -t xxx/xxxx .</code>命令来构建镜像，<code>-t</code>后面是镜像名与tag等信息，注意<code>.</code>表示在当前目录下寻找Dockerfile文件。</p>
<p>学会如何构建自己的镜像之后，你是否也想将它发布到<a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a>上与他人分享呢？要想做到这一点，需要先注册一个<a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a>账号，之后通过<code>docker login</code>命令登录，然后再<code>docker push image name</code>，就像在使用Git一样简单。</p>
<p>关于Docker的更多命令与使用方法，请参考<a href="https://docs.docker.com/" target="_blank" rel="external">Docker Documentation | Docker Documentation</a>，另外我还推荐使用<a href="https://docs.docker.com/compose/" target="_blank" rel="external">Docker Compose</a>来构建镜像，它可以很方便地组合管理多个镜像。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><hr>
<p>Docker提供了非常强大的自动化部署方式与灵活性，对多个应用程序之间做到了解耦，提供了开发上的敏捷性、可控性以及可移植性。同时，Docker也在不断地帮助越来越多的企业实现了向云端迁移、向微服务转型以及向DevOps模式的实践。</p>
<p>如今，微服务与DevOps火爆程度日益渐高，你又有何理由选择拒绝Docker呢？让我们一起选择拥抱Docker，拥抱未来！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker是什么？&quot;&gt;&lt;a href=&quot;#Docker是什么？&quot; class=&quot;headerlink&quot; title=&quot;Docker是什么？&quot;&gt;&lt;/a&gt;Docker是什么？&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Docker是一个基于轻量级虚拟化技术的容器，整个项目基于Go语言
    
    </summary>
    
      <category term="后端" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Docker" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Docker/"/>
    
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="后端" scheme="https://sylvanassun.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Docker" scheme="https://sylvanassun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊Spring中的线程安全性</title>
    <link href="https://sylvanassun.github.io/2017/11/06/2017-11-06-spring_and_thread-safe/"/>
    <id>https://sylvanassun.github.io/2017/11/06/2017-11-06-spring_and_thread-safe/</id>
    <published>2017-11-06T04:00:00.000Z</published>
    <updated>2017-11-06T11:17:45.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring与线程安全"><a href="#Spring与线程安全" class="headerlink" title="Spring与线程安全"></a>Spring与线程安全</h3><hr>
<p>Spring作为一个IOC/DI容器，帮助我们管理了许许多多的“bean”。但其实，<strong>Spring并没有保证这些对象的线程安全，需要由开发者自己编写解决线程安全问题的代码。</strong></p>
<p><strong>Spring对每个bean提供了一个scope属性来表示该bean的作用域</strong>。它是bean的生命周期。例如，一个scope为singleton的bean，在第一次被注入时，会创建为一个单例对象，该对象会一直被复用到应用结束。</p>
<ul>
<li><p>singleton：默认的scope，每个scope为singleton的bean都会被定义为一个单例对象，该对象的生命周期是与Spring IOC容器一致的（但在第一次被注入时才会创建）。</p>
</li>
<li><p>prototype：bean被定义为在每次注入时都会创建一个新的对象。</p>
</li>
<li><p>request：bean被定义为在每个HTTP请求中创建一个单例对象，也就是说在单个请求中都会复用这一个单例对象。</p>
</li>
<li><p>session：bean被定义为在一个session的生命周期内创建一个单例对象。</p>
</li>
<li><p>application：bean被定义为在ServletContext的生命周期中复用一个单例对象。</p>
</li>
<li><p>websocket：bean被定义为在websocket的生命周期中复用一个单例对象。</p>
</li>
</ul>
<p>我们交由Spring管理的大多数对象其实都是一些无状态的对象，这种不会因为多线程而导致状态被破坏的对象很适合Spring的默认scope，<strong>每个单例的无状态对象都是线程安全的（也可以说只要是无状态的对象，不管单例多例都是线程安全的，不过单例毕竟节省了不断创建对象与GC的开销）。</strong></p>
<p><strong>无状态的对象即是自身没有状态的对象，自然也就不会因为多个线程的交替调度而破坏自身状态导致线程安全问题</strong>。无状态对象包括我们经常使用的DO、DTO、VO这些只作为数据的实体模型的贫血对象，还有Service、DAO和Controller，这些对象并没有自己的状态，它们只是用来执行某些操作的。例如，每个DAO提供的函数都只是对数据库的CRUD，而且每个数据库Connection都作为函数的局部变量（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题），用完即关（或交还给连接池）。</p>
<p>有人可能会认为，我使用request作用域不就可以避免每个请求之间的安全问题了吗？这是完全错误的，因为Controller默认是单例的，一个HTTP请求是会被多个线程执行的，这就又回到了线程的安全问题。当然，你也可以把Controller的scope改成prototype，实际上Struts2就是这么做的，但有一点要注意，Spring MVC对请求的拦截粒度是基于每个方法的，而Struts2是基于每个类的，所以把Controller设为多例将会频繁的创建与回收对象，严重影响到了性能。</p>
<p>通过阅读上文其实已经说的很清楚了，<strong>Spring根本就没有对bean的多线程安全问题做出任何保证与措施</strong>。对于每个bean的线程安全问题，根本原因是每个bean自身的设计。<strong>不要在bean中声明任何有状态的实例变量或类变量，如果必须如此，那么就使用ThreadLocal把变量变为线程私有的，如果bean的实例变量或类变量需要在多个线程之间共享，那么就只能使用synchronized、lock、CAS等这些实现线程同步的方法了。</strong></p>
<p>下面将通过解析ThreadLocal的源码来了解它的实现与作用，ThreadLocal是一个很好用的工具类，它在某些情况下解决了线程安全问题（在变量不需要被多个线程共享时）。</p>
<blockquote>
<p>本文作者为<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>，首发于<a href="https://sylvanassun.github.io/">SylvanasSun’s Blog</a>。<br>原文链接：<a href="https://sylvanassun.github.io/2017/11/06/2017-11-06-spring_and_thread-safe/">https://sylvanassun.github.io/2017/11/06/2017-11-06-spring_and_thread-safe/</a><br>（转载请务必保留本段声明，并且保留超链接。）</p>
</blockquote>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><hr>
<p>ThreadLocal是一个为线程提供线程局部变量的工具类。它的思想也十分简单，就是<strong>为线程提供一个线程私有的变量副本</strong>，这样多个线程都可以随意更改自己线程局部的变量，不会影响到其他线程。不过需要注意的是，<strong>ThreadLocal提供的只是一个浅拷贝，如果变量是一个引用类型，那么就要考虑它内部的状态是否会被改变，想要解决这个问题可以通过重写ThreadLocal的initialValue()函数来自己实现深拷贝</strong>，建议在使用ThreadLocal时一开始就重写该函数。</p>
<p>ThreadLocal与像synchronized这样的锁机制是不同的。首先，它们的应用场景与实现思路就不一样，<strong>锁更强调的是如何同步多个线程去正确地共享一个变量，ThreadLocal则是为了解决同一个变量如何不被多个线程共享</strong>。从性能开销的角度上来讲，如果锁机制是用时间换空间的话，那么ThreadLocal就是用空间换时间。</p>
<p>ThreadLocal中含有一个叫做ThreadLocalMap的内部类，该类为一个采用线性探测法实现的HashMap。它的key为ThreadLocal对象而且还使用了WeakReference，ThreadLocalMap正是用来存储变量副本的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line">    * ThreadLocalMap is a customized hash map suitable only for</div><div class="line">    * maintaining thread local values. No operations are exported</div><div class="line">    * outside of the ThreadLocal class. The class is package private to</div><div class="line">    * allow declaration of fields in class Thread.  To help deal with</div><div class="line">    * very large and long-lived usages, the hash table entries use</div><div class="line">    * WeakReferences for keys. However, since reference queues are not</div><div class="line">    * used, stale entries are guaranteed to be removed only when</div><div class="line">    * the table starts running out of space.</div><div class="line">    */</div><div class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * The entries in this hash map extend WeakReference, using</div><div class="line">        * its main ref field as the key (which is always a</div><div class="line">        * ThreadLocal object).  Note that null keys (i.e. entry.get()</div><div class="line">        * == null) mean that the key is no longer referenced, so the</div><div class="line">        * entry can be expunged from table.  Such entries are referred to</div><div class="line">        * as "stale entries" in the code that follows.</div><div class="line">        */</div><div class="line">       <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class="line">           <span class="comment">/** The value associated with this ThreadLocal. */</span></div><div class="line">           Object value;</div><div class="line"></div><div class="line">           Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class="line">               <span class="keyword">super</span>(k);</div><div class="line">               value = v;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">	....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ThreadLocal中只含有三个成员变量，这三个变量都是与ThreadLocalMap的hash策略相关的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * ThreadLocals rely on per-thread linear-probe hash maps attached</div><div class="line"> * to each thread (Thread.threadLocals and</div><div class="line"> * inheritableThreadLocals).  The ThreadLocal objects act as keys,</div><div class="line"> * searched via threadLocalHashCode.  This is a custom hash code</div><div class="line"> * (useful only within ThreadLocalMaps) that eliminates collisions</div><div class="line"> * in the common case where consecutively constructed ThreadLocals</div><div class="line"> * are used by the same threads, while remaining well-behaved in</div><div class="line"> * less common cases.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The next hash code to be given out. Updated atomically. Starts at</div><div class="line"> * zero.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =</div><div class="line">    <span class="keyword">new</span> AtomicInteger();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The difference between successively generated hash codes - turns</div><div class="line"> * implicit sequential thread-local IDs into near-optimally spread</div><div class="line"> * multiplicative hash values for power-of-two-sized tables.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the next hash code.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>唯一的实例变量threadLocalHashCode是用来进行寻址的hashcode，它由函数nextHashCode()生成，该函数简单地通过一个增量HASH_INCREMENT来生成hashcode。至于为什么这个增量为0x61c88647，主要是因为ThreadLocalMap的初始大小为16，每次扩容都会为原来的2倍，这样它的容量永远为2的n次方，该增量选为0x61c88647也是为了尽可能均匀地分布，减少碰撞冲突。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The initial capacity -- MUST be a power of two.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;	</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Construct a new map initially containing (firstKey, firstValue).</div><div class="line"> * ThreadLocalMaps are constructed lazily, so we only create</div><div class="line"> * one when we have at least one entry to put in it.</div><div class="line"> */</div><div class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</div><div class="line">    table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</div><div class="line">    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</div><div class="line">    table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</div><div class="line">    size = <span class="number">1</span>;</div><div class="line">    setThreshold(INITIAL_CAPACITY);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要获得当前线程私有的变量副本需要调用get()函数。首先，它会调用getMap()函数去获得当前线程的ThreadLocalMap，这个函数需要接收当前线程的实例作为参数。如果得到的ThreadLocalMap为null，那么就去调用setInitialValue()函数来进行初始化，如果不为null，就通过map来获得变量副本并返回。</p>
<p>setInitialValue()函数会去先调用initialValue()函数来生成初始值，该函数默认返回null，我们可以通过重写这个函数来返回我们想要在ThreadLocal中维护的变量。之后，去调用getMap()函数获得ThreadLocalMap，如果该map已经存在，那么就用新获得value去覆盖旧值，否则就调用createMap()函数来创建新的map。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the value in the current thread's copy of this</div><div class="line"> * thread-local variable.  If the variable has no value for the</div><div class="line"> * current thread, it is first initialized to the value returned</div><div class="line"> * by an invocation of the &#123;<span class="doctag">@link</span> #initialValue&#125; method.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> the current thread's value of this thread-local</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            T result = (T)e.value;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> setInitialValue();</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Variant of set() to establish initialValue. Used instead</div><div class="line"> * of set() in case user has overridden the set() method.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> the initial value</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    T value = initialValue();</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">        map.set(<span class="keyword">this</span>, value);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        createMap(t, value);</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ThreadLocal的set()与remove()函数要比get()的实现还要简单，都只是通过getMap()来获得ThreadLocalMap然后对其进行操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sets the current thread's copy of this thread-local variable</div><div class="line"> * to the specified value.  Most subclasses will have no need to</div><div class="line"> * override this method, relying solely on the &#123;<span class="doctag">@link</span> #initialValue&#125;</div><div class="line"> * method to set the values of thread-locals.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> value the value to be stored in the current thread's copy of</div><div class="line"> *        this thread-local.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">        map.set(<span class="keyword">this</span>, value);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Removes the current thread's value for this thread-local</div><div class="line"> * variable.  If this thread-local variable is subsequently</div><div class="line"> * &#123;<span class="doctag">@linkplain</span> #get read&#125; by the current thread, its value will be</div><div class="line"> * reinitialized by invoking its &#123;<span class="doctag">@link</span> #initialValue&#125; method,</div><div class="line"> * unless its value is &#123;<span class="doctag">@linkplain</span> #set set&#125; by the current thread</div><div class="line"> * in the interim.  This may result in multiple invocations of the</div><div class="line"> * &#123;<span class="doctag">@code</span> initialValue&#125; method in the current thread.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> 1.5</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">     ThreadLocalMap m = getMap(Thread.currentThread());</div><div class="line">     <span class="keyword">if</span> (m != <span class="keyword">null</span>)</div><div class="line">         m.remove(<span class="keyword">this</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>getMap()函数与createMap()函数的实现也十分简单，但是通过观察这两个函数可以发现一个秘密：<strong>ThreadLocalMap是存放在Thread中的。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line">    * Get the map associated with a ThreadLocal. Overridden in</div><div class="line">    * InheritableThreadLocal.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span>  t the current thread</div><div class="line">    * <span class="doctag">@return</span> the map</div><div class="line">    */</div><div class="line">   <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> t.threadLocals;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Create the map associated with a ThreadLocal. Overridden in</div><div class="line">    * InheritableThreadLocal.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> t the current thread</div><div class="line">    * <span class="doctag">@param</span> firstValue value for the initial entry of the map</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</div><div class="line">       t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// Thread中的源码</span></div><div class="line"></div><div class="line">   <span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></div><div class="line">    * by the ThreadLocal class. */</div><div class="line">   ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">   <span class="comment">/*</span></div><div class="line">    * InheritableThreadLocal values pertaining to this thread. This map is</div><div class="line">    * maintained by the InheritableThreadLocal class.</div><div class="line">    */</div><div class="line">   ThreadLocal.ThreadLocalMap inheritableThreadLocals = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>仔细想想其实就能够理解这种设计的思想。有一种普遍的方法是通过一个全局的线程安全的Map来存储各个线程的变量副本，但是这种做法已经完全违背了ThreadLocal的本意，设计ThreadLocal的初衷就是为了避免多个线程去并发访问同一个对象，尽管它是线程安全的。而在每个Thread中存放与它关联的ThreadLocalMap是完全符合ThreadLocal的思想的，当想要对线程局部变量进行操作时，只需要把Thread作为key来获得Thread中的ThreadLocalMap即可。这种设计相比采用一个全局Map的方法会多占用很多内存空间，但也因此不需要额外的采取锁等线程同步方法而节省了时间上的消耗。</p>
<h3 id="ThreadLocal中的内存泄漏"><a href="#ThreadLocal中的内存泄漏" class="headerlink" title="ThreadLocal中的内存泄漏"></a>ThreadLocal中的内存泄漏</h3><hr>
<p>我们要考虑一种会发生内存泄漏的情况，如果ThreadLocal被设置为null后，而且没有任何强引用指向它，根据垃圾回收的可达性分析算法，ThreadLocal将会被回收。这样一来，ThreadLocalMap中就会含有key为null的Entry，而且ThreadLocalMap是在Thread中的，只要线程迟迟不结束，这些无法访问到的value会形成内存泄漏。为了解决这个问题，ThreadLocalMap中的getEntry()、set()和remove()函数都会清理key为null的Entry，以下面的getEntry()函数的源码为例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">     <span class="comment">/**</span></div><div class="line">      * Get the entry associated with key.  This method</div><div class="line">      * itself handles only the fast path: a direct hit of existing</div><div class="line">      * key. It otherwise relays to getEntryAfterMiss.  This is</div><div class="line">      * designed to maximize performance for direct hits, in part</div><div class="line">      * by making this method readily inlinable.</div><div class="line">      *</div><div class="line">      * <span class="doctag">@param</span>  key the thread local object</div><div class="line">      * <span class="doctag">@return</span> the entry associated with key, or null if no such</div><div class="line">      */</div><div class="line">     <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class="line">         <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</div><div class="line">         Entry e = table[i];</div><div class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</div><div class="line">             <span class="keyword">return</span> e;</div><div class="line">         <span class="keyword">else</span></div><div class="line">             <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">      * Version of getEntry method for use when key is not found in</div><div class="line">      * its direct hash slot.</div><div class="line">      *</div><div class="line">      * <span class="doctag">@param</span>  key the thread local object</div><div class="line">      * <span class="doctag">@param</span>  i the table index for key's hash code</div><div class="line">      * <span class="doctag">@param</span>  e the entry at table[i]</div><div class="line">      * <span class="doctag">@return</span> the entry associated with key, or null if no such</div><div class="line">      */</div><div class="line">     <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</div><div class="line">         Entry[] tab = table;</div><div class="line">         <span class="keyword">int</span> len = tab.length;</div><div class="line"></div><div class="line"><span class="comment">// 清理key为null的Entry</span></div><div class="line">         <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">             ThreadLocal&lt;?&gt; k = e.get();</div><div class="line">             <span class="keyword">if</span> (k == key)</div><div class="line">                 <span class="keyword">return</span> e;</div><div class="line">             <span class="keyword">if</span> (k == <span class="keyword">null</span>)</div><div class="line">                 expungeStaleEntry(i);</div><div class="line">             <span class="keyword">else</span></div><div class="line">                 i = nextIndex(i, len);</div><div class="line">             e = tab[i];</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>在上文中我们发现了ThreadLocalMap的key是一个弱引用，那么为什么使用弱引用呢？使用强引用key与弱引用key的差别如下：</p>
<ul>
<li><p>强引用key：ThreadLocal被设置为null，由于ThreadLocalMap持有ThreadLocal的强引用，如果不手动删除，那么ThreadLocal将不会回收，产生内存泄漏。</p>
</li>
<li><p>弱引用key：ThreadLocal被设置为null，由于ThreadLocalMap持有ThreadLocal的弱引用，即便不手动删除，ThreadLocal仍会被回收，ThreadLocalMap在之后调用set()、getEntry()和remove()函数时会清除所有key为null的Entry。</p>
</li>
</ul>
<p>但要注意的是，ThreadLocalMap仅仅含有这些被动措施来补救内存泄漏问题。如果你在之后没有调用ThreadLocalMap的set()、getEntry()和remove()函数的话，那么仍然会存在内存泄漏问题。</p>
<p>在使用线程池的情况下，如果不及时进行清理，内存泄漏问题事小，甚至还会产生程序逻辑上的问题。所以，<strong>为了安全地使用ThreadLocal，必须要像每次使用完锁就解锁一样，在每次使用完ThreadLocal后都要调用remove()来清理无用的Entry。</strong></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><p><a href="https://stackoverflow.com/questions/15745140/are-spring-objects-thread-safe" target="_blank" rel="external">Are Spring objects thread safe? - Stack Overflow</a></p>
</li>
<li><p><a href="https://tarunsapra.wordpress.com/2011/08/21/spring-singleton-request-session-beans-and-thread-safety/" target="_blank" rel="external">Spring Singleton, Request, Session Beans and Thread Safety | Java Enterprise Ecosystem.</a></p>
</li>
<li><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/index.html" target="_blank" rel="external">Spring Framework Documentation</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring与线程安全&quot;&gt;&lt;a href=&quot;#Spring与线程安全&quot; class=&quot;headerlink&quot; title=&quot;Spring与线程安全&quot;&gt;&lt;/a&gt;Spring与线程安全&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Spring作为一个IOC/DI容器，帮助我们管理了许许多
    
    </summary>
    
      <category term="后端" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
      <category term="Spring" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/Spring/"/>
    
    
      <category term="Java" scheme="https://sylvanassun.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://sylvanassun.github.io/tags/Spring/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="后端" scheme="https://sylvanassun.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="多线程" scheme="https://sylvanassun.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>虚拟内存的那点事儿</title>
    <link href="https://sylvanassun.github.io/2017/10/29/2017-10-29-virtual_memory/"/>
    <id>https://sylvanassun.github.io/2017/10/29/2017-10-29-virtual_memory/</id>
    <published>2017-10-29T10:00:00.000Z</published>
    <updated>2017-10-31T10:37:54.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><hr>
<p>我们都知道一个进程是与其他进程共享CPU和内存资源的。正因如此，操作系统需要有一套完善的内存管理机制才能防止进程之间内存泄漏的问题。</p>
<p>为了更加有效地管理内存并减少出错，现代操作系统提供了一种对主存的抽象概念，即是虚拟内存（Virtual Memory）。<strong>虚拟内存为每个进程提供了一个一致的、私有的地址空间，它让每个进程产生了一种自己在独享主存的错觉（每个进程拥有一片连续完整的内存空间）</strong>。</p>
<p>理解不深刻的人会认为虚拟内存只是“使用硬盘空间来扩展内存“的技术，这是不对的。<strong>虚拟内存的重要意义是它定义了一个连续的虚拟地址空间</strong>，使得程序的编写难度降低。并且，<strong>把内存扩展到硬盘空间只是使用虚拟内存的必然结果，虚拟内存空间会存在硬盘中，并且会被内存缓存（按需），有的操作系统还会在内存不够的情况下，将某一进程的内存全部放入硬盘空间中，并在切换到该进程时再从硬盘读取</strong>（这也是为什么Windows会经常假死的原因…）。</p>
<p>虚拟内存主要提供了如下三个重要的能力：</p>
<ul>
<li><p>它把主存看作为一个存储在硬盘上的虚拟地址空间的高速缓存，并且只在主存中缓存活动区域（按需缓存）。</p>
</li>
<li><p>它为每个进程提供了一个一致的地址空间，从而降低了程序员对内存管理的复杂性。</p>
</li>
<li><p>它还保护了每个进程的地址空间不会被其他进程破坏。</p>
</li>
</ul>
<p>介绍了虚拟内存的基本概念之后，接下来的内容将会从虚拟内存在硬件中如何运作逐渐过渡到虚拟内存在操作系统（Linux）中的实现。</p>
<blockquote>
<p>本文作者为<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>，首发于<a href="https://sylvanassun.github.io/">SylvanasSun’s Blog</a>。<br>原文链接：<a href="https://sylvanassun.github.io/2017/10/29/2017-10-29-virtual_memory/">https://sylvanassun.github.io/2017/10/29/2017-10-29-virtual_memory/</a><br>（转载请务必保留本段声明，并且保留超链接。）</p>
</blockquote>
<h3 id="CPU寻址"><a href="#CPU寻址" class="headerlink" title="CPU寻址"></a>CPU寻址</h3><hr>
<p>内存通常被组织为一个由M个连续的字节大小的单元组成的数组，每个字节都有一个唯一的物理地址（Physical Address PA），作为到数组的索引。CPU访问内存最简单直接的方法就是使用物理地址，这种寻址方式被称为物理寻址。</p>
<p>现代处理器使用的是一种称为虚拟寻址（Virtual  Addressing）的寻址方式。<strong>使用虚拟寻址，CPU需要将虚拟地址翻译成物理地址，这样才能访问到真实的物理内存。</strong></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/dc/MMU_principle_updated.png" alt="虚拟寻址"></p>
<p>虚拟寻址需要硬件与操作系统之间互相合作。<strong>CPU中含有一个被称为内存管理单元（Memory Management Unit, MMU）的硬件，它的功能是将虚拟地址转换为物理地址。MMU需要借助存放在内存中的页表来动态翻译虚拟地址，该页表由操作系统管理。</strong></p>
<h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><hr>
<p>虚拟内存空间被组织为一个存放在硬盘上的M个连续的字节大小的单元组成的数组，每个字节都有一个唯一的虚拟地址，作为到数组的索引（这点其实与物理内存是一样的）。</p>
<p><strong>操作系统通过将虚拟内存分割为大小固定的块来作为硬盘和内存之间的传输单位，这个块被称为虚拟页（Virtual Page, VP），每个虚拟页的大小为<code>P=2^p</code>字节。物理内存也会按照这种方法分割为物理页（Physical Page, PP），大小也为<code>P</code>字节。</strong></p>
<p>CPU在获得虚拟地址之后，需要通过MMU将虚拟地址翻译为物理地址。而在翻译的过程中还需要借助页表，所谓<strong>页表就是一个存放在物理内存中的数据结构，它记录了虚拟页与物理页的映射关系。</strong></p>
<p><strong>页表是一个元素为页表条目（Page Table Entry, PTE）的集合，每个虚拟页在页表中一个固定偏移量的位置上都有一个PTE</strong>。下面是PTE仅含有一个有效位标记的页表结构，该有效位代表这个虚拟页是否被缓存在物理内存中。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fkxzl7qsdij20tv0ngjti.jpg" alt=""></p>
<p>虚拟页<code>VP 0</code>、<code>VP 4</code>、<code>VP 6</code>、<code>VP 7</code>被缓存在物理内存中，虚拟页<code>VP 2</code>和<code>VP 5</code>被分配在页表中，但并没有缓存在物理内存，虚拟页<code>VP 1</code>和<code>VP 3</code>还没有被分配。</p>
<p>在进行动态内存分配时，例如<code>malloc()</code>函数或者其他高级语言中的<code>new</code>关键字，操作系统会在硬盘中创建或申请一段虚拟内存空间，并更新到页表（分配一个PTE，使该PTE指向硬盘上这个新创建的虚拟页）。</p>
<p><strong>由于CPU每次进行地址翻译的时候都需要经过PTE，所以如果想控制内存系统的访问，可以在PTE上添加一些额外的许可位（例如读写权限、内核权限等）</strong>，这样只要有指令违反了这些许可条件，CPU就会触发一个一般保护故障，将控制权传递给内核中的异常处理程序。一般这种异常被称为“段错误（Segmentation Fault）”。</p>
<h4 id="页命中"><a href="#页命中" class="headerlink" title="页命中"></a>页命中</h4><hr>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fky3k2710cj20xv0ngtax.jpg" alt="页命中"></p>
<p>如上图所示，MMU根据虚拟地址在页表中寻址到了<code>PTE 4</code>，该PTE的有效位为1，代表该虚拟页已经被缓存在物理内存中了，最终MMU得到了PTE中的物理内存地址（指向<code>PP 1</code>）。</p>
<h4 id="缺页"><a href="#缺页" class="headerlink" title="缺页"></a>缺页</h4><hr>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fky3k2krk0j20xv0ngmzd.jpg" alt="缺页"></p>
<p>如上图所示，MMU根据虚拟地址在页表中寻址到了<code>PTE 2</code>，该PTE的有效位为0，代表该虚拟页并没有被缓存在物理内存中。<strong>虚拟页没有被缓存在物理内存中（缓存未命中）被称为缺页。</strong></p>
<p><strong>当CPU遇见缺页时会触发一个缺页异常，缺页异常将控制权转向操作系统内核，然后调用内核中的缺页异常处理程序，该程序会选择一个牺牲页，如果牺牲页已被修改过，内核会先将它复制回硬盘（采用写回机制而不是直写也是为了尽量减少对硬盘的访问次数），然后再把该虚拟页覆盖到牺牲页的位置，并且更新PTE。</strong></p>
<p><strong>当缺页异常处理程序返回时，它会重新启动导致缺页的指令，该指令会把导致缺页的虚拟地址重新发送给MMU</strong>。由于现在已经成功处理了缺页异常，所以最终结果是页命中，并得到物理地址。</p>
<p>这种在硬盘和内存之间传送页的行为称为页面调度（paging）：页从硬盘换入内存和从内存换出到硬盘。当缺页异常发生时，才将页面换入到内存的策略称为按需页面调度（demand paging），所有现代操作系统基本都使用的是按需页面调度的策略。</p>
<p><strong>虚拟内存跟CPU高速缓存（或其他使用缓存的技术）一样依赖于局部性原则</strong>。虽然处理缺页消耗的性能很多（毕竟还是要从硬盘中读取），而且程序在运行过程中引用的不同虚拟页的总数可能会超出物理内存的大小，但是<strong>局部性原则保证了在任意时刻，程序将趋向于在一个较小的活动页面（active page）集合上工作，这个集合被称为工作集（working set）</strong>。根据空间局部性原则（一个被访问过的内存地址以及其周边的内存地址都会有很大几率被再次访问）与时间局部性原则（一个被访问过的内存地址在之后会有很大几率被再次访问），只要将工作集缓存在物理内存中，接下来的地址翻译请求很大几率都在其中，从而减少了额外的硬盘流量。</p>
<p>如果一个程序没有良好的局部性，将会使工作集的大小不断膨胀，直至超过物理内存的大小，这时程序会产生一种叫做抖动（thrashing）的状态，页面会不断地换入换出，如此多次的读写硬盘开销，性能自然会十分“恐怖”。<strong>所以，想要编写出性能高效的程序，首先要保证程序的时间局部性与空间局部性。</strong></p>
<h4 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h4><hr>
<p>我们目前为止讨论的只是单页表，但在实际的环境中虚拟空间地址都是很大的（一个32位系统的地址空间有<code>2^32 = 4GB</code>，更别说64位系统了）。在这种情况下，使用一个单页表明显是效率低下的。</p>
<p><strong>常用方法是使用层次结构的页表</strong>。假设我们的环境为一个32位的虚拟地址空间，它有如下形式：</p>
<ul>
<li><p>虚拟地址空间被分为4KB的页，每个PTE都是4字节。</p>
</li>
<li><p>内存的前2K个页面分配给了代码和数据。</p>
</li>
<li><p>之后的6K个页面还未被分配。</p>
</li>
<li><p>再接下来的1023个页面也未分配，其后的1个页面分配给了用户栈。</p>
</li>
</ul>
<p>下图是为该虚拟地址空间构造的二级页表层次结构（真实情况中多为四级或更多），一级页表（1024个PTE正好覆盖4GB的虚拟地址空间，同时每个PTE只有4字节，这样一级页表与二级页表的大小也正好与一个页面的大小一致都为4KB）的每个PTE负责映射虚拟地址空间中一个4MB的片（chunk），每一片都由1024个连续的页面组成。二级页表中的每个PTE负责映射一个4KB的虚拟内存页面。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fkyw24aje1j21060kmac9.jpg" alt=""></p>
<p>这个结构看起来很像是一个<code>B-Tree</code>，这种层次结构有效的减缓了内存要求：</p>
<ul>
<li><p>如果一个一级页表的一个PTE是空的，那么相应的二级页表也不会存在。这代表一种巨大的潜在节约（对于一个普通的程序来说，虚拟地址空间的大部分都会是未分配的）。</p>
</li>
<li><p>只有一级页表才总是需要缓存在内存中的，这样虚拟内存系统就可以在需要时创建、页面调入或调出二级页表（只有经常使用的二级页表才会被缓存在内存中），这就减少了内存的压力。</p>
</li>
</ul>
<h3 id="地址翻译的过程"><a href="#地址翻译的过程" class="headerlink" title="地址翻译的过程"></a>地址翻译的过程</h3><hr>
<p>从形式上来说，<strong>地址翻译是一个N元素的虚拟地址空间中的元素和一个M元素的物理地址空间中元素之间的映射。</strong></p>
<p>下图为MMU利用页表进行寻址的过程：</p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fkz5z2vvi4j20up0fwt9n.jpg" alt=""></p>
<p>页表基址寄存器（PTBR）指向当前页表。<strong>一个n位的虚拟地址包含两个部分，一个p位的虚拟页面偏移量（Virtual Page Offset, VPO）和一个（n - p）位的虚拟页号（Virtual Page Number, VPN）。</strong></p>
<p><strong>MMU根据VPN来选择对应的PTE</strong>，例如<code>VPN 0</code>代表<code>PTE 0</code>、<code>VPN 1</code>代表<code>PTE 1</code>….因为物理页与虚拟页的大小是一致的，所以物理页面偏移量（Physical Page Offset, PPO）与VPO是相同的。那么之后<strong>只要将PTE中的物理页号（Physical Page Number, PPN）与虚拟地址中的VPO串联起来，就能得到相应的物理地址</strong>。</p>
<p>多级页表的地址翻译也是如此，只不过因为有多个层次，所以VPN需要分成多段。<strong>假设有一个k级页表，虚拟地址会被分割成k个VPN和1个VPO，每个<code>VPN i</code>都是一个到第i级页表的索引</strong>。为了构造物理地址，MMU需要访问k个PTE才能拿到对应的PPN。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fkz5z434u5j20ng0f0weo.jpg" alt=""></p>
<h4 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h4><hr>
<p>页表是被缓存在内存中的，尽管内存的速度相对于硬盘来说已经非常快了，但与CPU还是有所差距。<strong>为了防止每次地址翻译操作都需要去访问内存，CPU使用了高速缓存与TLB来缓存PTE。</strong></p>
<p>在最糟糕的情况下（不包括缺页），MMU需要访问内存取得相应的PTE，这个代价大约为几十到几百个周期，如果PTE凑巧缓存在L1高速缓存中（如果L1没有还会从L2中查找，不过我们忽略多级缓冲区的细节），那么性能开销就会下降到1个或2个周期。然而，许多系统甚至需要消除即使这样微小的开销，TLB由此而生。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fkz5z4klv8j20g106j3yf.jpg" alt=""></p>
<p>TLB（Translation Lookaside Buffer, TLB）被称为翻译后备缓冲器或翻译旁路缓冲器，它是<strong>MMU中的一个缓冲区，其中每一行都保存着一个由单个PTE组成的块。用于组选择和行匹配的索引与标记字段是从VPN中提取出来的，如果TLB中有<code>T = 2^t</code>个组，那么TLB索引（TLBI）是由VPN的t个最低位组成的，而TLB标记（TLBT）是由VPN中剩余的位组成的。</strong></p>
<p>下图为地址翻译的流程（TLB命中的情况下）：</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fkz5z55afaj20vb0gxwf3.jpg" alt=""></p>
<ul>
<li><p>第一步，CPU将一个虚拟地址交给MMU进行地址翻译。</p>
</li>
<li><p>第二步和第三步，MMU通过TLB取得相应的PTE。</p>
</li>
<li><p>第四步，MMU通过PTE翻译出物理地址并将它发送给高速缓存/内存。</p>
</li>
<li><p>第五步，高速缓存返回数据到CPU（如果缓存命中的话，否则还需要访问内存）。</p>
</li>
</ul>
<p><strong>当TLB未命中时，MMU必须从高速缓存/内存中取出相应的PTE，并将新取得的PTE存放到TLB（如果TLB已满会覆盖一个已经存在的PTE）。</strong></p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fkz5z5m1yij20vb0gxjs7.jpg" alt=""></p>
<h3 id="Linux中的虚拟内存系统"><a href="#Linux中的虚拟内存系统" class="headerlink" title="Linux中的虚拟内存系统"></a>Linux中的虚拟内存系统</h3><hr>
<p><strong>Linux为每个进程维护了一个单独的虚拟地址空间</strong>。虚拟地址空间分为内核空间与用户空间，用户空间包括代码、数据、堆、共享库以及栈，内核空间包括内核中的代码和数据结构，内核空间的某些区域被映射到所有进程共享的物理页面。<strong>Linux也将一组连续的虚拟页面（大小等于内存总量）映射到相应的一组连续的物理页面，这种做法为内核提供了一种便利的方法来访问物理内存中任何特定的位置。</strong></p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fl00rjmbbuj20k90jyjt7.jpg" alt=""></p>
<p><strong>Linux将虚拟内存组织成一些区域（也称为段）的集合，区域的概念允许虚拟地址空间有间隙。一个区域就是已经存在着的已分配的虚拟内存的连续片（chunk）</strong>。例如，代码段、数据段、堆、共享库段，以及用户栈都属于不同的区域，<strong>每个存在的虚拟页都保存在某个区域中，而不属于任何区域的虚拟页是不存在的，也不能被进程所引用。</strong></p>
<p>内核为系统中的每个进程维护一个单独的任务结构（task_struct）。<strong>任务结构中的元素包含或者指向内核运行该进程所需的所有信息（PID、指向用户栈的指针、可执行目标文件的名字、程序计数器等）。</strong></p>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fl00rk2akcj20wl0k2wfo.jpg" alt=""></p>
<ul>
<li><p>mm_struct：描述了虚拟内存的当前状态。pgd指向一级页表的基址（当内核运行这个进程时，pgd会被存放在CR3控制寄存器，也就是页表基址寄存器中），mmap指向一个vm_area_structs的链表，其中每个vm_area_structs都描述了当前虚拟地址空间的一个区域。</p>
</li>
<li><p>vm_starts：指向这个区域的起始处。</p>
</li>
<li><p>vm_end：指向这个区域的结束处。</p>
</li>
<li><p>vm_prot：描述这个区域内包含的所有页的读写许可权限。</p>
</li>
<li><p>vm_flags：描述这个区域内的页面是与其他进程共享的，还是这个进程私有的以及一些其他信息。</p>
</li>
<li><p>vm_next：指向链表的下一个区域结构。</p>
</li>
</ul>
<h3 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h3><hr>
<p><strong>Linux通过将一个虚拟内存区域与一个硬盘上的文件关联起来，以初始化这个虚拟内存区域的内容，这个过程称为内存映射（memory mapping）。这种将虚拟内存系统集成到文件系统的方法可以简单而高效地把程序和数据加载到内存中。</strong></p>
<p>一个区域可以映射到一个普通硬盘文件的连续部分，例如一个可执行目标文件。文件区（section）被分成页大小的片，每一片包含一个虚拟页的初始内容。<strong>由于按需页面调度的策略，这些虚拟页面没有实际交换进入物理内存，直到CPU引用的虚拟地址在该区域的范围内</strong>。如果区域比文件区要大，那么就用零来填充这个区域的余下部分。</p>
<p><strong>一个区域也可以映射到一个匿名文件，匿名文件是由内核创建的，包含的全是二进制零</strong>。当CPU第一次引用这样一个区域内的虚拟页面时，内核就在物理内存中找到一个合适的牺牲页面，如果该页面被修改过，就先将它写回到硬盘，之后用二进制零覆盖牺牲页并更新页表，将这个页面标记为已缓存在内存中的。</p>
<p>简单的来说：<strong>普通文件映射就是将一个文件与一块内存建立起映射关系，对该文件进行IO操作可以绕过内核直接在用户态完成（用户态在该虚拟地址区域读写就相当于读写这个文件）。匿名文件映射一般在用户空间需要分配一段内存来存放数据时，由内核创建匿名文件并与内存进行映射，之后用户态就可以通过操作这段虚拟地址来操作内存了。匿名文件映射最熟悉的应用场景就是动态内存分配（malloc()函数）。</strong></p>
<p>Linux很多地方都采用了“懒加载”机制，自然也包括内存映射。不管是普通文件映射还是匿名映射，Linux只会先划分虚拟内存地址。只有当CPU第一次访问该区域内的虚拟地址时，才会真正的与物理内存建立映射关系。</p>
<p><strong>只要虚拟页被初始化了，它就在一个由内核维护的交换文件（swap file）之间换来换去。交换文件又称为交换空间（swap space）或交换区域（swap area）。swap区域不止用于页交换，在物理内存不够的情况下，还会将部分内存数据交换到swap区域（使用硬盘来扩展内存）。</strong></p>
<h4 id="共享对象"><a href="#共享对象" class="headerlink" title="共享对象"></a>共享对象</h4><hr>
<p>虚拟内存系统为每个进程提供了私有的虚拟地址空间，这样可以保证进程之间不会发生错误的读写。但多个进程之间也含有相同的部分，例如每个C程序都使用到了C标准库，如果每个进程都在物理内存中保持这些代码的副本，那会造成很大的内存资源浪费。</p>
<p><strong>内存映射提供了共享对象的机制，来避免内存资源的浪费。一个对象被映射到虚拟内存的一个区域，要么是作为共享对象，要么是作为私有对象的。</strong></p>
<p>如果一个进程将一个共享对象映射到它的虚拟地址空间的一个区域内，那么这个进程对这个区域的任何写操作，对于那些也把这个共享对象映射到它们虚拟内存的其他进程而言，也是可见的。相对的，对一个映射到私有对象的区域的任何写操作，对于其他进程来说是不可见的。一个映射到共享对象的虚拟内存区域叫做共享区域，类似地，也有私有区域。</p>
<p><strong>为了节约内存，私有对象开始的生命周期与共享对象基本上是一致的（在物理内存中只保存私有对象的一份副本），并使用写时复制的技术来应对多个进程的写冲突。</strong></p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fl0dggg7d9j218e0kgtab.jpg" alt=""></p>
<p>只要没有进程试图写它自己的私有区域，那么多个进程就可以继续共享物理内存中私有对象的一个单独副本。然而，只要有一个进程试图对私有区域的某一页面进行写操作，就会触发一个保护异常。在上图中，进程B试图对私有区域的一个页面进行写操作，该操作触发了保护异常。<strong>异常处理程序会在物理内存中创建这个页面的一个新副本，并更新PTE指向这个新的副本，然后恢复这个页的可写权限。</strong></p>
<p>还有一个典型的例子就是<code>fork()</code>函数，该函数用于创建子进程。当<code>fork()</code>函数被当前进程调用时，内核会为新进程创建各种必要的数据结构，并分配给它一个唯一的PID。为了给新进程创建虚拟内存，它复制了当前进程的<code>mm_struct</code>、<code>vm_area_struct</code>和页表的原样副本。并将两个进程的每个页面都标为只读，两个进程中的每个区域都标记为私有区域（写时复制）。</p>
<p>这样，父进程和子进程的虚拟内存空间完全一致，只有当这两个进程中的任一个进行写操作时，再使用写时复制来保证每个进程的虚拟地址空间私有的抽象概念。</p>
<h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><hr>
<p>虽然可以使用内存映射（<code>mmap()</code>函数）来创建和删除虚拟内存区域来满足运行时动态内存分配的问题。然而，为了更好的移植性与便利性，还需要一个更高层面的抽象，也就是动态内存分配器（dynamic memory allocator）。</p>
<p><strong>动态内存分配器维护着一个进程的虚拟内存区域，也就是我们所熟悉的“堆（heap）”，内核中还维护着一个指向堆顶的指针brk（break）。动态内存分配器将堆视为一个连续的虚拟内存块（chunk）的集合，每个块有两种状态，已分配和空闲。已分配的块显式地保留为供应用程序使用，空闲块则可以用来进行分配，它的空闲状态直到它显式地被应用程序分配为止。已分配的块要么被应用程序显式释放，要么被垃圾回收器所释放。</strong></p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fl0lmtd3u8j20nz0a1dhr.jpg" alt=""></p>
<p>本文只讲解动态内存分配的一些概念，关于动态内存分配器的实现已经超出了本文的讨论范围。如果有对它感兴趣的同学，可以去参考<a href="http://gee.cs.oswego.edu/" target="_blank" rel="external">dlmalloc</a>的源码，它是由Doug Lea（就是写Java并发包的那位）实现的一个设计巧妙的内存分配器，而且源码中的注释十分多。</p>
<h4 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h4><hr>
<p><strong>造成堆的空间利用率很低的主要原因是一种被称为碎片（fragmentation）的现象，当虽然有未使用的内存但这块内存并不能满足分配请求时，就会产生碎片</strong>。有以下两种形式的碎片：</p>
<ul>
<li><p>内部碎片：在一个已分配块比有效载荷大时发生。例如，程序请求一个5字（这里我们不纠结字的大小，假设一个字为4字节，堆的大小为16字并且要保证边界双字对齐）的块，内存分配器为了保证空闲块是双字边界对齐的（具体实现中对齐的规定可能略有不同，但对齐是肯定会有的），只好分配一个6字的块。在本例中，已分配块为6字，有效载荷为5字，内部碎片为已分配块减去有效载荷，为1字。</p>
</li>
<li><p>外部碎片：当空闲内存合计起来足够满足一个分配请求，但是没有一个单独的空闲块足够大到可以来处理这个请求时发生。外部碎片难以量化且不可预测，所以分配器通常采用启发式策略来试图维持少量的大空闲块，而不是维持大量的小空闲块。分配器也会根据策略与分配请求的匹配来分割空闲块与合并空闲块（必须相邻）。</p>
</li>
</ul>
<h4 id="空闲链表"><a href="#空闲链表" class="headerlink" title="空闲链表"></a>空闲链表</h4><hr>
<p><strong>分配器将堆组织为一个连续的已分配块和空闲块的序列，该序列被称为空闲链表</strong>。空闲链表分为隐式空闲链表与显式空闲链表。</p>
<ul>
<li><p>隐式空闲链表，是一个单向链表，并且每个空闲块仅仅是通过头部中的大小字段隐含地连接着的。</p>
</li>
<li><p>显式空闲链表，即是将空闲块组织为某种形式的显式数据结构（为了更加高效地合并与分割空闲块）。例如，将堆组织为一个双向空闲链表，在每个空闲块中，都包含一个前驱节点的指针与后继节点的指针。</p>
</li>
</ul>
<p>查找一个空闲块一般有如下几种策略：</p>
<ul>
<li><p>首次适配：从头开始搜索空闲链表，选择第一个遇见的合适的空闲块。它的优点在于趋向于将大的空闲块保留在链表的后面，缺点是它趋向于在靠近链表前部处留下碎片。</p>
</li>
<li><p>下一次适配：每次从上一次查询结束的地方开始进行搜索，直到遇见合适的空闲块。这种策略通常比首次适配效率高，但是内存利用率则要低得多了。</p>
</li>
<li><p>最佳适配：检查每个空闲块，选择适合所需请求大小的最小空闲块。最佳适配的内存利用率是三种策略中最高的，但它需要对堆进行彻底的搜索。</p>
</li>
</ul>
<p>对一个链表进行查找操作的效率是线性的，为了减少分配请求对空闲块匹配的时间，<strong>分配器通常采用分离存储（segregated storage）的策略，即是维护多个空闲链表，其中每个链表的块有大致相等的大小。</strong></p>
<p>一种简单的分离存储策略：分配器维护一个空闲链表数组，然后将所有可能的块分成一些等价类（也叫做大小类（size class）），每个大小类代表一个空闲链表，并且每个大小类的空闲链表包含大小相等的块，每个块的大小就是这个大小类中最大元素的大小（例如，某个大小类的范围定义为（17~32），那么这个空闲链表全由大小为32的块组成）。</p>
<p>当有一个分配请求时，我们检查相应的空闲链表。如果链表非空，那么就分配其中第一块的全部。如果链表为空，分配器就向操作系统请求一个固定大小的额外内存片，将这个片分成大小相等的块，然后将这些块链接起来形成新的空闲链表。</p>
<p>要释放一个块，分配器只需要简单地将这个块插入到相应的空闲链表的头部。</p>
<h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><hr>
<p>在编写C程序时，一般只能显式地分配与释放堆中的内存（<code>malloc()</code>与<code>free()</code>），程序员不仅需要分配内存，还需要负责内存的释放。</p>
<p>许多现代编程语言都内置了自动内存管理机制（通过引入自动内存管理库也可以让C/C++实现自动内存管理），<strong>所谓自动内存管理，就是自动判断不再需要的堆内存（被称为垃圾内存），然后自动释放这些垃圾内存。</strong></p>
<p>自动内存管理的实现是垃圾收集器（garbage collector），它是一种动态内存分配器，它会自动释放应用程序不再需要的已分配块。</p>
<p>垃圾收集器一般采用以下两种（之一）的策略来判断一块堆内存是否为垃圾内存：</p>
<ul>
<li><p>引用计数器：在数据的物理空间中添加一个计数器，当有其他数据与其相关时（引用），该计数器加一，反之则减一。通过定期检查计数器的值，只要为0则认为是垃圾内存，可以释放它所占用的已分配块。使用引用计数器，实现简单直接，但缺点也很明显，它无法回收循环引用的两个对象（假设有对象A与对象B，它们2个互相引用，但实际上对象A与对象B都已经是没用的对象了）。</p>
</li>
<li><p>可达性分析：垃圾收集器将堆内存视为一张有向图，然后选出一组根节点（例如，在Java中一般为类加载器、全局变量、运行时常量池中的引用类型变量等），根节点必须是足够“活跃“的对象。然后计算从根节点集合出发的可达路径，只要从根节点出发不可达的节点，都视为垃圾内存。</p>
</li>
</ul>
<p>垃圾收集器进行回收的算法有如下几种：</p>
<ul>
<li><p>标记-清除：该算法分为标记（mark）和清除（sweep）两个阶段。首先标记出所有需要回收的对象，然后在标记完成后统一回收所有被标记的对象。标记-清除算法实现简单，但它的效率不高，而且会产生许多内存碎片。</p>
</li>
<li><p>标记-整理：标记-整理与标记-清除算法基本一致，只不过后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。</p>
</li>
<li><p>复制：<strong>将程序所拥有的内存空间划分为大小相等的两块，每次都只使用其中的一块。当这一块的内存用完了，就把还存活着的对象复制到另一块内存上，然后将已使用过的内存空间进行清理</strong>。这种方法不必考虑内存碎片问题，但内存利用率很低。这个比例不是绝对的，像HotSpot虚拟机为了避免浪费，将内存划分为Eden空间与两个Survivor空间，每次都只使用Eden和其中一个Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一个Survivor空间上，然后清理掉Eden和刚才使用过的Survivor空间。HotSpot虚拟机默认的Eden和Survivor的大小比例为8：1，只有10%的内存空间会被闲置浪费。</p>
</li>
<li><p>分代：<strong>分代算法根据对象的存活周期的不同将内存划分为多块，这样就可以对不同的年代采用不同的回收算法</strong>。一般分为新生代与老年代，新生代存放的是存活率较低的对象，可以采用复制算法；老年代存放的是存活率较高的对象，如果使用复制算法，那么内存空间会不够用，所以必须使用标记-清除或标记-整理算法。</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr>
<p>虚拟内存是对内存的一个抽象。支持虚拟内存的CPU需要通过虚拟寻址的方式来引用内存中的数据。CPU加载一个虚拟地址，然后发送给MMU进行地址翻译。地址翻译需要硬件与操作系统之间紧密合作，MMU借助页表来获得物理地址。</p>
<ul>
<li><p>首先，MMU先将虚拟地址发送给TLB以获得PTE（根据VPN寻址）。</p>
</li>
<li><p>如果恰好TLB中缓存了该PTE，那么就返回给MMU，否则MMU需要从高速缓存/内存中获得PTE，然后更新缓存到TLB。</p>
</li>
<li><p>MMU获得了PTE，就可以从PTE中获得对应的PPN，然后结合VPO构造出物理地址。</p>
</li>
<li><p>如果在PTE中发现该虚拟页没有缓存在内存，那么会触发一个缺页异常。缺页异常处理程序会把虚拟页缓存进物理内存，并更新PTE。异常处理程序返回后，CPU会重新加载这个虚拟地址，并进行翻译。</p>
</li>
</ul>
<p>虚拟内存系统简化了内存管理、链接、加载、代码和数据的共享以及访问权限的保护：</p>
<ul>
<li><p>简化链接，独立的地址空间允许每个进程的内存映像使用相同的基本格式，而不管代码和数据实际存放在物理内存的何处。</p>
</li>
<li><p>简化加载，虚拟内存使向内存中加载可执行文件和共享对象文件变得更加容易。</p>
</li>
<li><p>简化共享，独立的地址空间为操作系统提供了一个管理用户进程和内核之间共享的一致机制。</p>
</li>
<li><p>访问权限保护，每个虚拟地址都要经过查询PTE的过程，在PTE中设定访问权限的标记位从而简化内存的权限保护。</p>
</li>
</ul>
<p>操作系统通过将虚拟内存与文件系统结合的方式，来初始化虚拟内存区域，这个过程称为内存映射。应用程序显式分配内存的区域叫做堆，通过动态内存分配器来直接操作堆内存。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><p><a href="http://www.csapp.cs.cmu.edu/" target="_blank" rel="external">CS:APP3e, Bryant and O’Hallaron</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Virtual_memory" target="_blank" rel="external">Virtual memory - Wikipedia</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" target="_blank" rel="external">Garbage collection (computer science) - Wikipedia</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;我们都知道一个进程是与其他进程共享CPU和内存资源的。正因如此，操作系统需要有一套完善的内存管理机制才能防止进程之间内存泄漏的问题
    
    </summary>
    
      <category term="计算机" scheme="https://sylvanassun.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="计算机" scheme="https://sylvanassun.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>注解的那点事儿</title>
    <link href="https://sylvanassun.github.io/2017/10/15/2017-10-15-JavaAnnotation/"/>
    <id>https://sylvanassun.github.io/2017/10/15/2017-10-15-JavaAnnotation/</id>
    <published>2017-10-15T10:00:00.000Z</published>
    <updated>2017-10-15T13:44:59.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解?"></a>什么是注解?</h3><hr>
<p><strong>注解是<code>JDK1.5</code>引入的一个语法糖，它主要用来当作元数据，简单的说就是用于解释数据的数据</strong>。在Java中，类、方法、变量、参数、包都可以被注解。很多开源框架都使用了注解，例如<code>Spring</code>、<code>MyBatis</code>、<code>Junit</code>。我们平常最常见的注解可能就是<code>@Override</code>了，该注解用来标识一个重写的函数。</p>
<p>注解的作用：</p>
<ul>
<li><p>配置文件：替代<code>xml</code>等文本文件格式的配置文件。使用注解作为配置文件可以在代码中实现动态配置，相比外部配置文件，注解的方式会减少很多文本量。但缺点也很明显，更改配置需要对代码进行重新编译，无法像外部配置文件一样进行集中管理（所以现在基本都是外部配置文件+注解混合使用）。</p>
</li>
<li><p>数据的标记：注解可以作为一个标记（例如：被<code>@Override</code>标记的方法代表被重写的方法）。</p>
</li>
<li><p>减少重复代码：注解可以减少重复且乏味的代码。比如我们定义一个<code>@ValidateInt</code>，然后通过反射来获得类中所有成员变量，只要是含有<code>@ValidateInt</code>注解的成员变量，我们就可以对其进行数据的规则校验。</p>
</li>
</ul>
<p>定义一个注解非常简单，只需要遵循以下的语法规则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ValidateInt &#123;</div><div class="line">	<span class="comment">// 它们看起来像是定义一个函数，但其实这是注解中的属性</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxLength</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minLength</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们发现上面的代码在定义注解时也使用了注解，这些注解被称为元注解。<strong>作用于注解上的注解称为元注解（元注解其实就是注解的元数据）</strong>，<code>Java</code>中一共有以下元注解。</p>
<ul>
<li><p><code>@Target</code>：用于描述注解的使用范围（注解可以用在什么地方）。</p>
<ul>
<li><p>ElementType.CONSTRUCTOR：构造器。</p>
</li>
<li><p>ElementType.FIELD：成员变量。</p>
</li>
<li><p>ElementType.LOCAL_VARIABLE：局部变量。</p>
</li>
<li><p>ElementType.PACKAGE：包。</p>
</li>
<li><p>ElementType.PARAMETER：参数。</p>
</li>
<li><p>ElementType.METHOD：方法。</p>
</li>
<li><p>ElementType.TYPE：类、接口(包括注解类型) 或enum声明。</p>
</li>
</ul>
</li>
<li><p><code>@Retention</code>：注解的生命周期，用于表示该注解会在什么时期保留。</p>
<ul>
<li><p>RetentionPolicy.RUNTIME：运行时保留，这样就可以通过反射获得了。</p>
</li>
<li><p>RetentionPolicy.CLASS：在class文件中保留。</p>
</li>
<li><p>RetentionPolicy.SOURCE：在源文件中保留。</p>
</li>
</ul>
</li>
<li><p><code>@Documented</code>：表示该注解会被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。</p>
</li>
<li><p><code>@Inherited</code>：表示该注解是可被继承的（如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类）。</p>
</li>
</ul>
<p>了解了这些基础知识之后，接着完成上述定义的<code>@ValidateInt</code>，我们定义一个<code>Cat</code>类然后在它的成员变量中使用<code>@ValidateInt</code>，并通过反射进行数据校验。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@ValidateInt</span>(minLength = <span class="number">0</span>, maxLength = <span class="number">10</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</div><div class="line">        Cat cat = <span class="keyword">new</span> Cat();</div><div class="line">        cat.setName(<span class="string">"楼楼"</span>);</div><div class="line">        cat.setAge(<span class="number">11</span>);</div><div class="line"></div><div class="line">        Class&lt;? extends Cat&gt; clazz = cat.getClass();</div><div class="line">        Field[] fields = clazz.getDeclaredFields();</div><div class="line">        <span class="keyword">if</span> (fields != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">                ValidateInt annotation = field.getDeclaredAnnotation(ValidateInt.class);</div><div class="line">                <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</div><div class="line">                    field.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">int</span> value = field.getInt(cat);</div><div class="line">                    <span class="keyword">if</span> (value &lt; annotation.minLength()) &#123;</div><div class="line">                        <span class="comment">// ....</span></div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; annotation.maxLength()) &#123;</div><div class="line">                        <span class="comment">// ....</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>本文作者为:<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>，首发于<a href="https://sylvanassun.github.io/">SylvanasSun’s Blog</a>。<br>原文链接：<a href="https://sylvanassun.github.io/2017/10/15/2017-10-15-JavaAnnotation/">https://sylvanassun.github.io/2017/10/15/2017-10-15-JavaAnnotation/</a><br>（转载请务必保留本段声明，并且保留超链接。）</p>
</blockquote>
<h3 id="注解的实现"><a href="#注解的实现" class="headerlink" title="注解的实现"></a>注解的实现</h3><hr>
<p>注解其实只是<code>Java</code>的一颗语法糖（语法糖是一种方便程序员使用的语法规则，但它其实并没有表面上那么神奇的功能，只不过是由编译器帮程序员生成那些繁琐的代码）。在<code>Java</code>中这样的语法糖还有很多，例如<code>enum</code>、泛型、<code>forEach</code>等。</p>
<p>通过阅读<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.6" target="_blank" rel="external">JLS(Java Language Specification</a>（当你想了解一个语言特性的实现时，最好的方法就是阅读官方规范）发现，<strong>注解是一个继承自<code>java.lang.annotation.Annotation</code>接口的特殊接口</strong>，原文如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">An annotation type declaration specifies a new annotation type, a special kind of interface type. To distinguish an annotation type declaration from a normal interface declaration, the keyword interface is preceded by an at-sign (@).</div><div class="line"></div><div class="line">Note that the at-sign (@) and the keyword interface are distinct tokens. It is possible to separate them with whitespace, but this is discouraged as a matter of style.</div><div class="line"></div><div class="line">The rules for annotation modifiers on an annotation type declaration are specified in §9.7.4 and §9.7.5.</div><div class="line"></div><div class="line">The Identifier in an annotation type declaration specifies the name of the annotation type.</div><div class="line"></div><div class="line">It is a compile-time error if an annotation type has the same simple name as any of its enclosing classes or interfaces.</div><div class="line"></div><div class="line">The direct superinterface of every annotation type is java.lang.annotation.Annotation.</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang.annotation;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The common interface extended by all annotation types.  Note that an</div><div class="line"> * interface that manually extends this one does &lt;i&gt;not&lt;/i&gt; define</div><div class="line"> * an annotation type.  Also note that this interface does not itself</div><div class="line"> * define an annotation type.</div><div class="line"> *</div><div class="line"> * More information about annotation types can be found in section 9.6 of</div><div class="line"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</div><div class="line"> *</div><div class="line"> * The &#123;<span class="doctag">@link</span> java.lang.reflect.AnnotatedElement&#125; interface discusses</div><div class="line"> * compatibility concerns when evolving an annotation type from being</div><div class="line"> * non-repeatable to being repeatable.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span>  Josh Bloch</div><div class="line"> * <span class="doctag">@since</span>   1.5</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将上节定义的<code>@ValidateInt</code>注解进行反编译来验证这个说法。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">  Last modified Oct 14, 2017; size 479 bytes</div><div class="line">  MD5 checksum 2d9dd2c169fe854db608c7950af3eca7</div><div class="line">  Compiled from "ValidateInt.java"</div><div class="line">public interface com.sun.annotation.ValidateInt extends java.lang.annotation.Annotation</div><div class="line">  minor version: 0</div><div class="line">  major version: 52</div><div class="line">  flags: ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT, ACC_ANNOTATION</div><div class="line">Constant pool:</div><div class="line">   #1 = Class              #18            // com/sun/annotation/ValidateInt</div><div class="line">   #2 = Class              #19            // java/lang/Object</div><div class="line">   #3 = Class              #20            // java/lang/annotation/Annotation</div><div class="line">   #4 = Utf8               maxLength</div><div class="line">   #5 = Utf8               ()I</div><div class="line">   #6 = Utf8               minLength</div><div class="line">   #7 = Utf8               SourceFile</div><div class="line">   #8 = Utf8               ValidateInt.java</div><div class="line">   #9 = Utf8               RuntimeVisibleAnnotations</div><div class="line">  #10 = Utf8               Ljava/lang/annotation/Retention;</div><div class="line">  #11 = Utf8               value</div><div class="line">  #12 = Utf8               Ljava/lang/annotation/RetentionPolicy;</div><div class="line">  #13 = Utf8               RUNTIME</div><div class="line">  #14 = Utf8               Ljava/lang/annotation/Target;</div><div class="line">  #15 = Utf8               Ljava/lang/annotation/ElementType;</div><div class="line">  #16 = Utf8               FIELD</div><div class="line">  #17 = Utf8               Ljava/lang/annotation/Documented;</div><div class="line">  #18 = Utf8               com/sun/annotation/ValidateInt</div><div class="line">  #19 = Utf8               java/lang/Object</div><div class="line">  #20 = Utf8               java/lang/annotation/Annotation</div><div class="line">&#123;</div><div class="line">  public abstract int maxLength();</div><div class="line">    descriptor: ()I</div><div class="line">    flags: ACC_PUBLIC, ACC_ABSTRACT</div><div class="line"></div><div class="line">  public abstract int minLength();</div><div class="line">    descriptor: ()I</div><div class="line">    flags: ACC_PUBLIC, ACC_ABSTRACT</div><div class="line">&#125;</div><div class="line">SourceFile: "ValidateInt.java"</div><div class="line">RuntimeVisibleAnnotations:</div><div class="line">  0: #10(#11=e#12.#13)</div><div class="line">  1: #14(#11=[e#15.#16])</div><div class="line">  2: #17()</div></pre></td></tr></table></figure>
<p><code>public interface com.sun.annotation.ValidateInt extends java.lang.annotation.Annotation</code>，很明显<code>ValidateInt</code>继承自<code>java.lang.annotation.Annotation</code>。</p>
<p>那么，如果注解只是一个接口，又是如何实现对属性的设置呢？这是<strong>因为<code>Java</code>使用了动态代理对我们定义的注解接口生成了一个代理类，而对注解的属性设置其实都是在对这个代理类中的变量进行赋值</strong>。所以我们才能用反射获得注解中的各种属性。</p>
<p>为了证实注解其实是个动态代理对象，接下来我们使用<code>CLHSDB(Command-Line HotSpot Debugger)</code>来查看<code>JVM</code>的运行时数据。如果有童鞋不了解怎么使用的话，可以参考R大的文章<a href="http://rednaxelafx.iteye.com/blog/1847971" target="_blank" rel="external">借HSDB来探索HotSpot VM的运行时数据 - Script Ahead, Code Behind - ITeye博客</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0x000000000257f538</span> com/sun/proxy/$Proxy1</div></pre></td></tr></table></figure>
<p>注解的类型为<code>com/sun/proxy/$Proxy1</code>，这正是动态代理生成代理类的默认类型，<code>com/sun/proxy</code>为默认包名，<code>$Proxy</code>是默认的类名，<code>1</code>为自增的编号。</p>
<h3 id="实践-包扫描器"><a href="#实践-包扫描器" class="headerlink" title="实践-包扫描器"></a>实践-包扫描器</h3><hr>
<p>我们在使用<code>Spring</code>的时候，只需要指定一个包名，框架就会去扫描该包下所有带有<code>Spring</code>中的注解的类。实现一个包扫描器很简单，主要思路如下：</p>
<ul>
<li><p>先将传入的包名通过类加载器获得项目内的路径。</p>
</li>
<li><p>然后遍历并获得该路径下的所有class文件路径（需要处理为包名的格式）。</p>
</li>
<li><p>得到了class文件的路径就可以使用反射生成Class对象并获得其中的各种信息了。</p>
</li>
</ul>
<p>定义包扫描器接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PackageScanner</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;Class&lt;?&gt;&gt; scan(String packageName);</div><div class="line"></div><div class="line">    List&lt;Class&lt;?&gt;&gt; scan(String packageName, ScannedClassHandler handler);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数2需要传入一个<code>ScannedClassHandler</code>接口，该接口是我们定义的回调函数，用于在扫描所有类文件之后执行的处理操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 这个注解表示该接口为一个函数接口，用于支持Lambda表达式</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScannedClassHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Class&lt;?&gt; clazz)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我想要包扫描器可以识别和支持不同的文件类型，定义一个枚举类<code>ResourceType</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResourceType &#123;</div><div class="line"></div><div class="line">    JAR(<span class="string">"jar"</span>),</div><div class="line">    FILE(<span class="string">"file"</span>),</div><div class="line">    CLASS_FILE(<span class="string">"class"</span>),</div><div class="line">    INVALID(<span class="string">"invalid"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String typeName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTypeName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.typeName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResourceType</span><span class="params">(String typeName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.typeName = typeName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>PathUtils</code>是一个用来处理路径和包转换等操作的工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_SEPARATOR = System.getProperty(<span class="string">"file.separator"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_FILE_SUFFIX = <span class="string">".class"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JAR_PROTOCOL = <span class="string">"jar"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_PROTOCOL = <span class="string">"file"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PathUtils</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 去除后缀名</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimSuffix</span><span class="params">(String filename)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (filename == <span class="keyword">null</span> || <span class="string">""</span>.equals(filename))</div><div class="line">            <span class="keyword">return</span> filename;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> dotIndex = filename.lastIndexOf(<span class="string">"."</span>);</div><div class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == dotIndex)</div><div class="line">            <span class="keyword">return</span> filename;</div><div class="line">        <span class="keyword">return</span> filename.substring(<span class="number">0</span>, dotIndex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">pathToPackage</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (path == <span class="keyword">null</span> || <span class="string">""</span>.equals(path))</div><div class="line">            <span class="keyword">return</span> path;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (path.startsWith(FILE_SEPARATOR))</div><div class="line">            path = path.substring(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> path.replace(FILE_SEPARATOR, <span class="string">"."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">packageToPath</span><span class="params">(String packageName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (packageName == <span class="keyword">null</span> || <span class="string">""</span>.equals(packageName))</div><div class="line">            <span class="keyword">return</span> packageName;</div><div class="line">        <span class="keyword">return</span> packageName.replace(<span class="string">"."</span>, FILE_SEPARATOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据URL的协议来判断资源类型</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResourceType <span class="title">getResourceType</span><span class="params">(URL url)</span> </span>&#123;</div><div class="line">        String protocol = url.getProtocol();</div><div class="line">        <span class="keyword">switch</span> (protocol) &#123;</div><div class="line">            <span class="keyword">case</span> JAR_PROTOCOL:</div><div class="line">                <span class="keyword">return</span> ResourceType.JAR;</div><div class="line">            <span class="keyword">case</span> FILE_PROTOCOL:</div><div class="line">                <span class="keyword">return</span> ResourceType.FILE;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> ResourceType.INVALID;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isClassFile</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (path == <span class="keyword">null</span> || <span class="string">""</span>.equals(path))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> path.endsWith(CLASS_FILE_SUFFIX);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 抽取URL中的主要路径.</div><div class="line">     * Example:</div><div class="line">     * "file:/com/example/hello" to "/com/example/hello"</div><div class="line">     * "jar:file:/com/example/hello.jar!/" to "/com/example/hello.jar"</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUrlMainPath</span><span class="params">(URL url)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">		</div><div class="line">		<span class="comment">// 如果不使用URLDecoder解码的话，路径会出现中文乱码问题</span></div><div class="line">        String filePath = URLDecoder.decode(url.getFile(), <span class="string">"utf-8"</span>);</div><div class="line">        <span class="comment">// if file is not the jar</span></div><div class="line">        <span class="keyword">int</span> pos = filePath.indexOf(<span class="string">"!"</span>);</div><div class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == pos)</div><div class="line">            <span class="keyword">return</span> filePath;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> filePath.substring(<span class="number">5</span>, pos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">concat</span><span class="params">(Object... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (args == <span class="keyword">null</span> || args.length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line"></div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++)</div><div class="line">            stringBuilder.append(args[i]);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> stringBuilder.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义了这些辅助类之后，就可以去实现包扫描器了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePackageScanner</span> <span class="keyword">implements</span> <span class="title">PackageScanner</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String packageName;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String packagePath;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> ClassLoader classLoader;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Logger logger;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimplePackageScanner</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.classLoader = Thread.currentThread().getContextClassLoader();</div><div class="line">        <span class="keyword">this</span>.logger = LoggerFactory.getLogger(SimplePackageScanner.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;Class&lt;?&gt;&gt; scan(String packageName) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.scan(packageName, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;Class&lt;?&gt;&gt; scan(String packageName, ScannedClassHandler handler) &#123;</div><div class="line">        <span class="keyword">this</span>.initPackageNameAndPath(packageName);</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled())</div><div class="line">            logger.debug(<span class="string">"Start scanning package: &#123;&#125; ...."</span>, <span class="keyword">this</span>.packageName);</div><div class="line">        URL url = <span class="keyword">this</span>.getResource(<span class="keyword">this</span>.packagePath);</div><div class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.parseUrlThenScan(url, handler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPackageNameAndPath</span><span class="params">(String packageName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.packageName = packageName;</div><div class="line">        <span class="keyword">this</span>.packagePath = PathUtils.packageToPath(packageName);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数<code>getResource()</code>会根据包名来通过类加载器获得当前项目下的URL对象，如果这个URL为空则直接返回一个空的<code>ArrayList</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> URL <span class="title">getResource</span><span class="params">(String packagePath)</span> </span>&#123;</div><div class="line">    URL url = <span class="keyword">this</span>.classLoader.getResource(packagePath);</div><div class="line">    <span class="keyword">if</span> (url != <span class="keyword">null</span>)</div><div class="line">        logger.debug(<span class="string">"Get resource: &#123;&#125; success!"</span>, packagePath);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        logger.debug(<span class="string">"Get resource: &#123;&#125; failed,end of scan."</span>, packagePath);</div><div class="line">    <span class="keyword">return</span> url;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数<code>parseUrlThenScan()</code>会解析URL对象并进行扫描，最终返回一个类列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">protected</span> List&lt;Class&lt;?&gt;&gt; parseUrlThenScan(URL url, ScannedClassHandler handler) &#123;</div><div class="line">      String urlPath = <span class="string">""</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 先提取出URL中的路径（不含协议名等信息）</span></div><div class="line">          urlPath = PathUtils.getUrlMainPath(url);</div><div class="line">      &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">          logger.debug(<span class="string">"Get url path failed."</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 判断URL的类型</span></div><div class="line">      ResourceType type = PathUtils.getResourceType(url);</div><div class="line">      List&lt;Class&lt;?&gt;&gt; classList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">switch</span> (type) &#123;</div><div class="line">              <span class="keyword">case</span> FILE:</div><div class="line">                  classList = <span class="keyword">this</span>.getClassListFromFile(urlPath, <span class="keyword">this</span>.packageName);</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">              <span class="keyword">case</span> JAR:</div><div class="line">                  classList = <span class="keyword">this</span>.getClassListFromJar(urlPath);</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">              <span class="keyword">default</span>:</div><div class="line">                  logger.debug(<span class="string">"Unsupported file type."</span>);</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">          logger.debug(<span class="string">"Get class list failed."</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line"><span class="comment">// 执行回调函数</span></div><div class="line">      <span class="keyword">this</span>.invokeCallback(classList, handler);</div><div class="line">      logger.debug(<span class="string">"End of scan &lt;&#123;&#125;&gt;."</span>, urlPath);</div><div class="line">      <span class="keyword">return</span> classList;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>函数<code>getClassListFromFile()</code>会扫描路径下的所有class文件，并拼接包名生成Class对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> List&lt;Class&lt;?&gt;&gt; getClassListFromFile(String path, String packageName) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">    File file = <span class="keyword">new</span> File(path);</div><div class="line">    List&lt;Class&lt;?&gt;&gt; classList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    File[] listFiles = file.listFiles();</div><div class="line">    <span class="keyword">if</span> (listFiles != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (File f : listFiles) &#123;</div><div class="line">            <span class="keyword">if</span> (f.isDirectory()) &#123;</div><div class="line">	<span class="comment">// 如果是一个文件夹，则继续递归调用，注意传递的包名</span></div><div class="line">                List&lt;Class&lt;?&gt;&gt; list = getClassListFromFile(f.getAbsolutePath(),</div><div class="line">                        PathUtils.concat(packageName, <span class="string">"."</span>, f.getName()));</div><div class="line">                classList.addAll(list);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PathUtils.isClassFile(f.getName())) &#123;</div><div class="line">                <span class="comment">// 我们不添加名字带有$的class文件，这些都是JVM动态生成的</span></div><div class="line">                String className = PathUtils.trimSuffix(f.getName());</div><div class="line">                <span class="keyword">if</span> (-<span class="number">1</span> != className.lastIndexOf(<span class="string">"$"</span>))</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                String finalClassName = PathUtils.concat(packageName, <span class="string">"."</span>, className);</div><div class="line">                classList.add(Class.forName(finalClassName));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> classList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数<code>getClassListFromJar()</code>会扫描Jar中的class文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> List&lt;Class&lt;?&gt;&gt; getClassListFromJar(String jarPath) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</div><div class="line">    <span class="keyword">if</span> (logger.isDebugEnabled())</div><div class="line">        logger.debug(<span class="string">"Start scanning jar: &#123;&#125;"</span>, jarPath);</div><div class="line"></div><div class="line">    JarInputStream jarInputStream = <span class="keyword">new</span> JarInputStream(<span class="keyword">new</span> FileInputStream(jarPath));</div><div class="line">    JarEntry jarEntry = jarInputStream.getNextJarEntry();</div><div class="line">    List&lt;Class&lt;?&gt;&gt; classList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (jarEntry != <span class="keyword">null</span>) &#123;</div><div class="line">        String name = jarEntry.getName();</div><div class="line">        <span class="keyword">if</span> (name.startsWith(<span class="keyword">this</span>.packageName) &amp;&amp; PathUtils.isClassFile(name))</div><div class="line">            classList.add(Class.forName(name));</div><div class="line">        jarEntry = jarInputStream.getNextJarEntry();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> classList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数<code>invokeCallback()</code>遍历类对象列表，然后执行回调函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeCallback</span><span class="params">(List&lt;Class&lt;?&gt;&gt; classList, ScannedClassHandler handler)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (classList != <span class="keyword">null</span> &amp;&amp; handler != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz : classList) &#123;</div><div class="line">            handler.execute(clazz);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本节中实现的包扫描器源码地址：<a href="https://gist.github.com/SylvanasSun/6ab31dcfd9670f29a46917decdba36d1" target="_blank" rel="external">https://gist.github.com/SylvanasSun/6ab31dcfd9670f29a46917decdba36d1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解?&quot;&gt;&lt;/a&gt;什么是注解?&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;注解是&lt;code&gt;JDK1.5&lt;/code&gt;引入的一个语法糖，它主要用来当作元数据，简
    
    </summary>
    
      <category term="后端" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
      <category term="Java" scheme="https://sylvanassun.github.io/tags/Java/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="后端" scheme="https://sylvanassun.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浏览器性能优化-渲染性能</title>
    <link href="https://sylvanassun.github.io/2017/10/08/2017-10-08-BrowserRenderOptimization/"/>
    <id>https://sylvanassun.github.io/2017/10/08/2017-10-08-BrowserRenderOptimization/</id>
    <published>2017-10-08T04:00:00.000Z</published>
    <updated>2017-10-08T15:20:54.483Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://sylvanassun.github.io/2017/10/03/2017-10-03-BrowserCriticalRenderingPath/">浏览器渲染过程与性能优化</a>一文中（建议先去看一下这篇文章再来阅读本文），我们了解与认识了浏览器的关键渲染路径以及如何优化页面的加载速度。在本文中，我们主要关注的是如何提高浏览器的渲染性能（浏览器进行布局计算、绘制像素等操作）与效率。</p>
<p>很多网页都使用了看起来效果非常酷炫的动画与用户进行交互，这些动画效果显著提高了用户的体验，但如果因为性能原因导致动画的每秒帧数太低，反而会让用户体验变得更差（如果一个酷炫的动画效果运行起来总是经常卡顿或者看起来反应很慢，这些都会让用户感觉糟透了）。</p>
<p>一个流畅的动画需要保持在每秒60帧，换算成毫秒浏览器需要在10毫秒左右完成渲染任务（每秒有1000毫秒，1000/60 约等于 16毫秒一帧，但浏览器还有其他工作需要占用时间，所以估算为10毫秒），如果能够理解浏览器的渲染过程并发现性能瓶颈对其优化，可以使你的项目变得具有交互性且动画效果如飘柔般顺滑。</p>
<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>.转载请务必将本段话置于文章开头处(保留超链接).<br>本文首发自<a href="https://sylvanassun.github.io/">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/10/08/2017-10-08-BrowserRenderOptimization/">https://sylvanassun.github.io/2017/10/08/2017-10-08-BrowserRenderOptimization/</a></p>
</blockquote>
<h3 id="像素管道"><a href="#像素管道" class="headerlink" title="像素管道"></a>像素管道</h3><hr>
<p><strong>所谓像素管道其实就是浏览器将渲染树绘制成像素的流程。管道的每个区域都有可能产生卡顿，即管道中的某一区域如果发生变化，浏览器将会进行自动重排，然后重新绘制受影响的区域。</strong></p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fk9uu5zk8xj20o603zdh7.jpg" alt="像素管道"></p>
<ul>
<li><p>JavaScript：<strong>该区域其实指的是实现动画效果的方法</strong>，一般使用<code>JavaScript</code>来实现动画，例如<code>JQuery</code>的<code>animate</code>函数、对一个数据集进行排序或动态添加一些<code>DOM</code>节点等。当然，也可以使用其他的方法来实现动画效果，像<code>CSS</code>的<code>Animation</code>、<code>Transition</code>和<code>Transform</code>。</p>
</li>
<li><p>Style：<strong>该区域为样式计算阶段，浏览器会根据选择器（就是<code>CSS</code>选择器，如<code>.td</code>）计算出哪些节点应用哪些<code>CSS</code>规则，然后计算出每个节点的最终样式并应用到节点上。</strong></p>
</li>
<li><p>Layout：<strong>该区域为布局计算阶段，浏览器会在该过程中根据节点的样式规则来计算它要占据的空间大小以及在屏幕中的位置</strong>。</p>
</li>
<li><p>Paint：<strong>该区域为绘制阶段，浏览器会先创建绘图调用的列表，然后填充像素</strong>。绘制阶段会涉及到文本、颜色、图像、边框和阴影，基本上包括了每个可视部分。绘制一般是在多个图层（用过<code>Photoshop</code>等图片编辑软件的童鞋一定很眼熟图层这个词，这里的图层的含义其实是差不多的）上完成的。</p>
</li>
<li><p>Composite：<strong>该区域为合成阶段，浏览器将多个图层按照正确顺序绘制到屏幕上。</strong></p>
</li>
</ul>
<p>假设我们修改了一个几何属性（例如宽度、高度等影响布局的属性），这时Layout阶段受到了影响，浏览器必须检查所有其他区域的元素，然后自动重排页面，任何受到影响的部分都需要重新绘制，并且最终绘制的元素还需要重新进行合成（简单地说就是整个像素管道都要重新执行一遍）。</p>
<p>如果我们只修改了不会影响页面布局的属性，例如背景图片、文字颜色等，那么浏览器会跳过布局阶段，但仍需要重新绘制。</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fk9uu6h7edj20nr03wq46.jpg" alt=""></p>
<p>又或者，我们只修改了一个不影响布局也不影响绘制的属性，那么浏览器将跳过布局与绘制阶段，显然这种改动是性能开销最小的。</p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fk9uu6u2u3j20o5040wfm.jpg" alt=""></p>
<p>如果想要知道每个<code>CSS</code>属性将会对哪个阶段产生怎样的影响，请去<a href="https://csstriggers.com/" target="_blank" rel="external">CSS Triggers</a>，该网站详细地说明了每个<code>CSS</code>属性会影响到哪个阶段。</p>
<h3 id="使用RequestAnimationFrame函数实现动画"><a href="#使用RequestAnimationFrame函数实现动画" class="headerlink" title="使用RequestAnimationFrame函数实现动画"></a>使用RequestAnimationFrame函数实现动画</h3><hr>
<p>我们经常使用<code>JavaScript</code>来实现动画效果，然而时机不当或长时间运行的<code>JavaScript</code>可能就是导致你性能下降的原因。</p>
<p>避免使用<code>setTimeout()</code>或者<code>setInterval()</code>函数来实现动画效果，这种做法的主要问题是<strong>回调将会在帧中的某个时间点运行，这可能会刚好在末尾（会丢失帧导致发生卡顿）。</strong></p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fka0wxn8m2j20p40by40d.jpg" alt=""></p>
<p>有些第三方库仍在使用<code>setTimeout()&amp;setInterval()</code>函数来实现动画效果，这会产生很多不必要的性能下降，例如老版本的<code>JQuery</code>，如果你使用的是<code>JQuery3</code>，那么不必为此担心，<code>JQuery3</code>已经全面改写了动画模块，采用了<code>requestAnimationFrame()</code>函数来实现动画效果。但如果你使用的是之前版本的<code>JQuery</code>，那么就需要<a href="https://github.com/gnarf/jquery-requestAnimationFrame" target="_blank" rel="external">jquery-requestAnimationFrame</a>来将<code>setTimeout()</code>替换为<code>requestAnimationFrame()</code>函数。</p>
<p>读到这里，想必一定会对<code>requestAnimationFrame()</code>产生好奇。要想得到一个流畅的动画，我们希望让视觉变化发生在每一帧的开头，而保证<code>JavaScript</code>在帧开始时运行的方式则是使用<code>requestAnimationFrame()</code>函数，本质上它与<code>setTimeout()</code>没有什么区别，都是在递归调用同一个回调函数来不断更新画面以达到动画的效果，<code>requestAnimationFrame()</code>的使用方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateScreen</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">	<span class="comment">// 这是你的动画效果函数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将你的动画效果函数放入requestAnimationFrame()作为回调函数</span></div><div class="line">requestAnimationFrame(updateScreen);</div></pre></td></tr></table></figure>
<p>并不是所有浏览器都支持<code>requestAnimationFrame()</code>函数，如<code>IE9</code>（又是万恶的<code>IE</code>），但基本上现代浏览器都会支持这个功能的，如果你需要兼容老旧版本的浏览器，可以使用以下函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 本段代码截取自Paul Irish : https://gist.github.com/paulirish/1579671</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> vendors = [<span class="string">'ms'</span>, <span class="string">'moz'</span>, <span class="string">'webkit'</span>, <span class="string">'o'</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x]+<span class="string">'RequestAnimationFrame'</span>];</div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x]+<span class="string">'CancelAnimationFrame'</span>] </div><div class="line">                                   || <span class="built_in">window</span>[vendors[x]+<span class="string">'CancelRequestAnimationFrame'</span>];</div><div class="line">    &#125;</div><div class="line"> 	</div><div class="line">	<span class="comment">// 如果浏览器不支持，则使用setTimeout()</span></div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame)</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback, element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">            <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16</span> - (currTime - lastTime));</div><div class="line">            <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback(currTime + timeToCall); &#125;, </div><div class="line">              timeToCall);</div><div class="line">            lastTime = currTime + timeToCall;</div><div class="line">            <span class="keyword">return</span> id;</div><div class="line">        &#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame)</div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">            clearTimeout(id);</div><div class="line">        &#125;;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h3 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h3><hr>
<p><strong>我们知道<code>JavaScript</code>是单线程的，但浏览器可不是单线程的</strong>。<strong><code>JavaScript</code>在浏览器的主线程上运行</strong>，这恰好与样式计算、布局等许多其他情况下的渲染操作一起运行，<strong>如果<code>JavaScript</code>的运行时间过长，就会阻塞这些后续工作，导致帧丢失。</strong></p>
<p>使用<code>Chrome</code>开发者工具的<code>Timeline</code>功能可以帮助我们查看每个<code>JavaScript</code>脚本的运行时间（包括子脚本），帮助我们发现并突破性能瓶颈。</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fka16g0tbyj20tq0lqacb.jpg" alt="数据采自掘金"></p>
<p>在找到影响性能的<code>JavaScript</code>脚本后，我们可以通过<code>Web Workers</code>进行优化。<code>Web Workers</code>是<code>HTML5</code>提出的一个标准，它<strong>可以让<code>JavaScript</code>脚本运行在后台线程（类似于创建一个子线程），而后台线程不会影响到主线程中的页面</strong>。不过，<strong>使用<code>Web Workers</code>创建的线程是不能操作<code>DOM</code>树的</strong>（这也是<code>Web Workers</code>没有颠覆<code>JavaScript</code>是单线程的原因，<code>JavaScript</code>之所以一直是单线程设计主要也是因为为了避免多个脚本操作<code>DOM</code>树的同步问题，这会提高很多复杂性），所以它只适合于做一些纯计算的工作（数据的排序、遍历等）。</p>
<p>如果你的<code>JavaScript</code>必须要在主线程中执行，那么只能选择另一种方法。将一个大任务分割为多个小任务（每个占用时间不超过几毫秒），并且在每帧的<code>requestAnimationFrame()</code>函数中运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> taskList = breakBigTaskIntoMicroTasks(monsterTaskList);</div><div class="line">requestAnimationFrame(processTaskList);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processTaskList</span>(<span class="params">taskStartTime</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> taskFinishTime;</div><div class="line"></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="comment">// 从列表中弹出任务</span></div><div class="line">    <span class="keyword">var</span> nextTask = taskList.pop();</div><div class="line"></div><div class="line">    <span class="comment">// 执行任务</span></div><div class="line">    processTask(nextTask);</div><div class="line"></div><div class="line">    <span class="comment">// 如果有足够的时间进行下一个任务则继续执行</span></div><div class="line">    taskFinishTime = <span class="built_in">window</span>.performance.now();</div><div class="line">  &#125; <span class="keyword">while</span> (taskFinishTime - taskStartTime &lt; <span class="number">3</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (taskList.length &gt; <span class="number">0</span>)</div><div class="line">    requestAnimationFrame(processTaskList);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个<code>Web Workers</code>对象很简单，只需要调用<code>Worker()</code>构造器，然后传入指定脚本的<code>URI</code>。现代主流浏览器均支持<code>Web Workers</code>，除了<code>Internet Explorer</code>（又是万恶的IE），所以我们在下面的示例代码中还需要检测浏览器是否兼容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myWorker;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(Worker) !== <span class="string">"undefined"</span>) &#123;</div><div class="line">	<span class="comment">// 支持Web Workers</span></div><div class="line">	myWorker = <span class="keyword">new</span> Worker(<span class="string">"worker.js"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// 不支持Web Workers</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><code>Web Workers</code>与主线程之间通过<code>postMessage()</code>函数来发送信息，使用<code>onmessage()</code>事件处理函数来响应消息（主线程与子线程之间并没有共享数据，只是通过复制数据来交互）。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">main.js: </div><div class="line"><span class="comment">// 在主线程js中发送数据到myWorker绑定的js脚本线程</span></div><div class="line">myWorker.postMessage(<span class="string">"Hello,World"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Message posted to worker'</span>);</div><div class="line"> </div><div class="line">worker.js:</div><div class="line"><span class="comment">// onmessage处理函数允许我们在任何时刻，</span></div><div class="line"><span class="comment">// 一旦接收到消息就可以执行一些代码，代码中消息本身作为事件的data属性进行使用。</span></div><div class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Message received from main script."</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Posting message back to main script."</span>);</div><div class="line">	postMessage(<span class="string">"Hello~"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">main.js:</div><div class="line"><span class="comment">// 主线程使用onmessage接收消息</span></div><div class="line">myWorker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Received message: "</span> + data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你需要从主线程中立刻终止一个运行中的worker，可以调用worker的<code>terminate()</code>函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myWorker.terminate();</div></pre></td></tr></table></figure>
<p>myWorker会被立即杀死，不会有任何机会让它继续完成剩下的工作。而在worker线程中也可以调用<code>close()</code>函数进行关闭：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">close();</div></pre></td></tr></table></figure>
<p>有关更多的<code>Web Workers</code>使用方法，请参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">Using Web Workers - Web APIs | MDN</a>。</p>
<h3 id="降低样式计算的复杂度"><a href="#降低样式计算的复杂度" class="headerlink" title="降低样式计算的复杂度"></a>降低样式计算的复杂度</h3><hr>
<p><strong>每次修改<code>DOM</code>和<code>CSS</code>都会导致浏览器重新计算样式</strong>，在很多情况下还会对页面或页面的一部分重新进行布局计算。</p>
<p>计算样式的第一部分是创建一组匹配选择器（用于计算哪些节点应用哪些样式），第二部分涉及从匹配选择器中获取所有样式规则，并计算出节点的最终样式。</p>
<p><strong>通过降低选择器的复杂性可以提升样式计算的速度。</strong></p>
<p>下面是一个复杂的<code>CSS</code>选择器：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:nth-last-child(-n+1)</span> <span class="selector-class">.title</span> &#123;</div><div class="line">  <span class="comment">/* styles */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>浏览器如果想要找到应用该样式的节点，需要先找到有<code>.title</code>类的节点，然后其父节点正好是负n个子元素+1个带<code>.box</code>类的节点。浏览器计算此结果可能需要大量的时间，但我们可以把选择器的预期行为更改为一个类：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.final-box-title</span> &#123;</div><div class="line">  <span class="comment">/* styles */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们只是将<code>CSS</code>的命名模块化（降低选择器的复杂性），然后只让浏览器简单地将选择器与节点进行匹配，这样浏览器计算样式的效率会提升许多。</p>
<p><code>BEM</code>是一种模块化的<code>CSS</code>命名规范，使用这种方法组织<code>CSS</code>不仅结构上十分清晰，也对浏览器的样式查找提供了帮助。</p>
<p><code>BEM</code>其实就是<code>Block,Element,Modifier</code>，它是一种基于组件的开发方式，其背后的思想就是将用户界面划分为独立的块。这样即使是使用复杂的<code>UI</code>也可以轻松快速地开发，并且模块化的方式可以提高代码的复用性。</p>
<p><strong><code>Block</code>是一个功能独立的页面组件（可以被重用），<code>Block</code>的命名方式就像写<code>Class</code>名一样</strong>。如下面的<code>.button</code>就是代表<code>&lt;button&gt;</code>的<code>Block</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.button &#123;</div><div class="line">    background-color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;button class=&quot;button&quot;&gt;I&apos;m a button&lt;/button&gt;</div></pre></td></tr></table></figure>
<p><strong><code>Element</code>是一个不能单独使用的<code>Block</code>的复合部分</strong>。可以认为<code>Element</code>是<code>Block</code>的子节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- `search-form`是一个block --&gt;</div><div class="line">&lt;form class=&quot;search-form&quot;&gt;</div><div class="line">    &lt;!-- &apos;search-form__input&apos;是&apos;search-form&apos; block中的一个element --&gt;</div><div class="line">    &lt;input class=&quot;search-form__input&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!-- &apos;search-form__button&apos;是&apos;search-form&apos; block中的一个element  --&gt;</div><div class="line">    &lt;button class=&quot;search-form__button&quot;&gt;Search&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p><strong><code>Modifier</code>是用于定义<code>Block</code>或<code>Element</code>的外观、状态或行为的实体</strong>。假设，我们有了一个新的需求，对<code>button</code>的背景颜色使用绿色，那么我们可以使用<code>Modifier</code>对<code>.button</code>进行一次扩展：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.button &#123;</div><div class="line">    background-color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--secondary &#123;</div><div class="line">    background-color: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一次接触<code>BEM</code>的童鞋可能会对这种命名方式感到奇怪，但<code>BEM</code>重要的是模块化与可维护性的思想，至于命名完全可以按照你所能接受的方式修改。限于篇幅，本文就不再继续探讨<code>BEM</code>了，感兴趣的童鞋可以去看<a href="https://en.bem.info/methodology/quick-start/" target="_blank" rel="external">BEM的官方文档</a>。</p>
<h3 id="避免强制同步布局和布局抖动"><a href="#避免强制同步布局和布局抖动" class="headerlink" title="避免强制同步布局和布局抖动"></a>避免强制同步布局和布局抖动</h3><hr>
<p><strong>浏览器每次进行布局计算时几乎总是会作用到整个<code>DOM</code>，如果有大量元素，那么将会需要很长时间才能计算出所有元素的位置与尺寸。</strong></p>
<p>所以我们<strong>应当尽量避免在运行时动态地修改几何属性</strong>（宽度、高度等），因为这些改动都会导致浏览器重新进行布局计算。如果无法避免，那么要<strong>优先使用<code>Flexbox</code></strong>，它会尽量减少布局所需的开销。</p>
<p><strong>强制同步布局就是使用<code>JavaScript</code>强制浏览器提前执行布局</strong>。需要先明白一点，<strong>在<code>JavaScript</code>运行时，来自上一帧的所有旧布局值都是已知的。</strong></p>
<p>以下代码为例，它在每一帧的开头输出了元素的高度：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">requestAnimationFrame(logBoxHeight);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logBoxHeight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(box.offsetHeight);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但如果在请求高度之前，修改了其样式，就会出现问题，浏览器必须先应用样式，然后进行布局计算，之后才能返回正确的高度。这是不必要的且会产生非常大的开销。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logBoxHeight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  box.classList.add(<span class="string">'super-big'</span>);</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log(box.offsetHeight);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正确的做法，应该利用浏览器可以使用上一帧布局值的特性，然后再执行任何写操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logBoxHeight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(box.offsetHeight);</div><div class="line"></div><div class="line">  box.classList.add(<span class="string">'super-big'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>如果接二连三地发生强制同步布局，那么就会产生布局抖动</strong>。以下代码循环处理一组段落，并设置每个段落的宽度以匹配一个名为“box”的元素的宽度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeAllParagraphsToMatchBlockWidth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</div><div class="line">    paragraphs[i].style.width = box.offsetWidth + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的问题在于每次迭代都会读取<code>box.offsetWidth</code>，然后立即使用此值来更新段落的宽度。在循环的下次迭代中，浏览器必须考虑样式更新这一事实（<code>box.offsetWidth</code>是在上一次迭代中请求的），因此它必须应用样式更改，然后执行布局。这会导致每次迭代都会产生强制同步布局，正确的做法应该先读取值，然后再写入值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Read.</span></div><div class="line"><span class="keyword">var</span> width = box.offsetWidth;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeAllParagraphsToMatchBlockWidth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</div><div class="line">    <span class="comment">// Now write.</span></div><div class="line">    paragraphs[i].style.width = width + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要想轻松地解决这个问题，可以使用<a href="https://github.com/wilsonpage/fastdom" target="_blank" rel="external">FastDOM</a>进行批量读取与写入，它可以防止强制布局同步与布局抖动。</p>
<h3 id="使用不会触发布局与绘制的属性来实现动画"><a href="#使用不会触发布局与绘制的属性来实现动画" class="headerlink" title="使用不会触发布局与绘制的属性来实现动画"></a>使用不会触发布局与绘制的属性来实现动画</h3><hr>
<p>在像素管道一节中，我们发现有种属性修改后会跳过布局与绘制阶段，这显然会减少不少性能开销。目前只有两种属性符合这个条件：<code>transform</code>和<code>opacity</code> 。</p>
<p>需要注意的是，使用<code>transform</code>和<code>opacity</code>时，更改这些属性所在的元素应处于其自身的图层，<strong>所以我们需要将设置动画的元素单独新建一个图层（这样做的好处是该图层上的重绘可以在不影响其他图层上元素的情况下进行处理。如果你用过<code>Photoshop</code>，想必能够理解多图层工作的方便之处）。</strong></p>
<p>创建新图层的最佳方式是使用<code>will-change</code>属性，<strong>该属性告知浏览器该元素会有哪些变化，这样浏览器可以在元素属性真正发生变化之前提前做好对应的优化准备工作。</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.moving-element &#123;</div><div class="line">  will-change: transform;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 对于不支持 will-change 但受益于层创建的浏览器，需要使用（滥用）3D 变形来强制创建一个新层</div><div class="line">.moving-element &#123;</div><div class="line">  transform: translateZ(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>但不要认为<code>will-change</code>可以提高性能就随便滥用，使用<code>will-change</code>进行预优化与创建图层都需要额外的内存和管理开销，随便滥用只会得不偿失。</strong></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><p><a href="https://developers.google.com/web/" target="_blank" rel="external">Web   |  Google Developers</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">Using Web Workers - Web APIs | MDN</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change" target="_blank" rel="external">will-change - CSS | MDN</a></p>
</li>
<li><p><a href="https://en.bem.info/methodology/quick-start/" target="_blank" rel="external">Quick start / Methodology / BEM</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://sylvanassun.github.io/2017/10/03/2017-10-03-BrowserCriticalRenderingPath/&quot;&gt;浏览器渲染过程与性能优化&lt;/a&gt;一文中（建议先去看一下这篇文章再来阅读本文），我们了解与
    
    </summary>
    
      <category term="前端" scheme="https://sylvanassun.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="https://sylvanassun.github.io/categories/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="前端" scheme="https://sylvanassun.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="https://sylvanassun.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染过程与性能优化</title>
    <link href="https://sylvanassun.github.io/2017/10/03/2017-10-03-BrowserCriticalRenderingPath/"/>
    <id>https://sylvanassun.github.io/2017/10/03/2017-10-03-BrowserCriticalRenderingPath/</id>
    <published>2017-10-03T10:00:00.000Z</published>
    <updated>2017-10-04T07:04:33.651Z</updated>
    
    <content type="html"><![CDATA[<p>大家都知道万维网的应用层使用了<code>HTTP</code>协议，并且用浏览器作为入口访问网络上的资源。用户在使用浏览器访问一个网站时需要先通过<code>HTTP</code>协议向服务器发送请求，之后服务器返回<code>HTML</code>文件与响应信息。这时，浏览器会根据<code>HTML</code>文件来进行解析与渲染（该阶段还包括向服务器请求非内联的<code>CSS</code>文件与<code>JavaScript</code>文件或者其他资源），最终再将页面呈现在用户面前。</p>
<p>现在知道了网页的渲染都是由浏览器完成的，那么如果一个网站的页面加载速度太慢会导致用户体验不够友好，本文通过详解浏览器渲染页面的过程来引入一些基本的浏览器性能优化方案。让浏览器更快地渲染你的网页并快速响应从而提高用户体验。</p>
<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文首发自<a href="https://sylvanassun.github.io/">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/10/03/2017-10-03-BrowserCriticalRenderingPath">https://sylvanassun.github.io/2017/10/03/2017-10-03-BrowserCriticalRenderingPath</a></p>
</blockquote>
<h3 id="关键渲染路径"><a href="#关键渲染路径" class="headerlink" title="关键渲染路径"></a>关键渲染路径</h3><hr>
<p><strong>浏览器接收到服务器返回的<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>字节数据并对其进行解析和转变成像素的渲染过程被称为关键渲染路径。通过优化关键渲染路径即可以缩短浏览器渲染页面的时间。</strong></p>
<p><strong>浏览器在渲染页面前需要先构建出<code>DOM</code>树与<code>CSSOM</code>树</strong>（如果没有<code>DOM</code>树和<code>CSSOM</code>树就无法确定页面的结构与样式，所以这两项是必须先构建出来的）。</p>
<p><strong><code>DOM</code>树全称为<code>Document Object Model</code>文档对象模型，它是<code>HTML</code>和<code>XML</code>文档的编程接口，提供了对文档的结构化表示，并定义了一种可以使程序对该结构进行访问的方式</strong>（比如<code>JavaScript</code>就是通过<code>DOM</code>来操作结构、样式和内容）。<code>DOM</code>将文档解析为一个由节点和对象组成的集合，可以说一个<code>WEB</code>页面其实就是一个<code>DOM</code>。</p>
<p><code>CSSOM</code>树全称为<code>Cascading Style Sheets Object Model</code>层叠样式表对象模型，它与<code>DOM</code>树的含义相差不大，只不过它是<code>CSS</code>的对象集合。</p>
<h3 id="构建DOM树与CSSOM树"><a href="#构建DOM树与CSSOM树" class="headerlink" title="构建DOM树与CSSOM树"></a>构建DOM树与CSSOM树</h3><hr>
<p>浏览器从网络或硬盘中获得<code>HTML</code>字节数据后会经过一个流程将字节解析为<code>DOM</code>树：</p>
<ul>
<li><p>编码： <strong>先将<code>HTML</code>的原始字节数据转换为文件指定编码的字符。</strong></p>
</li>
<li><p>令牌化： 然后<strong>浏览器会根据<code>HTML</code>规范来将字符串转换成各种令牌</strong>（如<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>这样的标签以及标签中的字符串和属性等都会被转化为令牌，每个令牌具有特殊含义和一组规则）。令牌记录了标签的开始与结束，通过这个特性可以轻松判断一个标签是否为子标签（假设有<code>&lt;html&gt;</code>与<code>&lt;body&gt;</code>两个标签，当<code>&lt;html&gt;</code>标签的令牌还未遇到它的结束令牌<code>&lt;/html&gt;</code>就遇见了<code>&lt;body&gt;</code>标签令牌，那么<code>&lt;body&gt;</code>就是<code>&lt;html&gt;</code>的子标签）。</p>
</li>
<li><p>生成对象： <strong>接下来每个令牌都会被转换成定义其属性和规则的对象（这个对象就是节点对象）。</strong></p>
</li>
<li><p>构建完毕： <strong><code>DOM</code>树构建完成，整个对象集合就像是一棵树形结构</strong>。可能有人会疑惑为什么<code>DOM</code>是一个树形结构，这是因为标签之间含有复杂的父子关系，树形结构正好可以诠释这个关系（<code>CSSOS</code>同理，层叠样式也含有父子关系。例如： <code>div p {font-size: 18px}</code>，会先寻找所有<code>p</code>标签并判断它的父标签是否为<code>div</code>之后才会决定要不要采用这个样式进行渲染）。</p>
</li>
</ul>
<p>整个<code>DOM</code>树的构建过程其实就是： <strong>字节 -&gt; 字符 -&gt; 令牌 -&gt; 节点对象 -&gt; 对象模型</strong>，下面将通过一个示例<code>HTML</code>代码与配图更形象地解释这个过程。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Critical Path<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>web performance<span class="tag">&lt;/<span class="name">span</span>&gt;</span> students!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"awesome-photo.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fk2te7tuh0j20nv0dbjtl.jpg" alt="DOM树构建过程"></p>
<p>当上述<code>HTML</code>代码遇见<code>&lt;link&gt;</code>标签时，浏览器会发送请求获得该标签中标记的<code>CSS</code>文件（使用内联<code>CSS</code>可以省略请求的步骤提高速度，但没有必要为了这点速度而丢失了模块化与可维护性），<code>style.css</code>中的内容如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span> &#125;</div><div class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-weight</span>: bold &#125;</div><div class="line"><span class="selector-tag">span</span> &#123; <span class="attribute">color</span>: red &#125;</div><div class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123; <span class="attribute">display</span>: none &#125;</div><div class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">float</span>: right &#125;</div></pre></td></tr></table></figure>
<p>浏览器获得外部<code>CSS</code>文件的数据后，就会像构建<code>DOM</code>树一样开始构建<code>CSSOM</code>树，这个过程没有什么特别的差别。</p>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fk2te87pafj20hi08mgm3.jpg" alt="CSSOM树"></p>
<p>如果想要更详细地去体验一下关键渲染路径的构建，可以使用<code>Chrome</code>开发者工具中的<code>Timeline</code>功能，它记录了浏览器从请求页面资源一直到渲染的各种操作过程，甚至还可以录制某一时间段的过程（建议不要去看太大的网站，信息会比较杂乱）。</p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fk2tubeknuj20uf0e1abt.jpg" alt="Timeline"></p>
<h3 id="构建渲染树"><a href="#构建渲染树" class="headerlink" title="构建渲染树"></a>构建渲染树</h3><hr>
<p>在构建了<code>DOM</code>树和<code>CSSOM</code>树之后，浏览器只是拥有了两个互相独立的对象集合，<code>DOM</code>树描述了文档的结构与内容，<code>CSSOM</code>树则描述了对文档应用的样式规则，<strong>想要渲染出页面，就需要将<code>DOM</code>树与<code>CSSOM</code>树结合在一起</strong>，这就是渲染树。</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fk2tubr7irj20oo0bmacf.jpg" alt="渲染树"></p>
<ul>
<li><p>浏览器会先从<code>DOM</code>树的根节点开始遍历每个可见节点（不可见的节点自然就没必要渲染到页面了，不可见的节点还包括被<code>CSS</code>设置了<code>display: none</code>属性的节点，值得注意的是<code>visibility: hidden</code>属性并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，所以它会被渲染成一个空框）。</p>
</li>
<li><p>对每个可见节点，找到其适配的<code>CSS</code>样式规则并应用。</p>
</li>
<li><p>渲染树构建完成，每个节点都是可见节点并且都含有其内容和对应规则的样式。</p>
</li>
</ul>
<p>渲染树构建完毕后，浏览器得到了每个可见节点的内容与其样式，下一步工作则<strong>需要计算每个节点在窗口内的确切位置与大小，也就是布局阶段。</strong></p>
<p><code>CSS</code>采用了一种叫做盒子模型的思维模型来表示每个节点与其他元素之间的距离，盒子模型包括外边距(<code>Margin</code>)，内边距(<code>Padding</code>)，边框(<code>Border</code>)，内容(<code>Content</code>)。页面中的每个标签其实都是一个个盒子。</p>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fk2vm967xsj206105aq2t.jpg" alt="盒子模型"></p>
<p><strong>布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置</strong>，布局阶段的输出是一个盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小，所有相对的测量值也都会被转换为屏幕内的绝对像素值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Critial Path: Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 50%"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 50%"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fk2vdt67wuj20hm08f3yl.jpg" alt="上述代码的布局结果"></p>
<p>当<code>Layout</code>布局事件完成后，浏览器会立即发出<code>Paint Setup</code>与<code>Paint</code>事件，开始将渲染树绘制成像素，绘制所需的时间跟<code>CSS</code>样式的复杂度成正比，绘制完成后，用户就可以看到页面的最终呈现效果了。</p>
<p>我们对一个网页发送请求并获得渲染后的页面可能也就经过了1~2秒，但浏览器其实已经做了上述所讲的非常多的工作，总结一下浏览器关键渲染路径的整个过程：</p>
<ul>
<li><p>处理<code>HTML</code>标记数据并生成<code>DOM</code>树。</p>
</li>
<li><p>处理<code>CSS</code>标记数据并生成<code>CSSOM</code>树。</p>
</li>
<li><p>将<code>DOM</code>树与<code>CSSOM</code>树合并在一起生成渲染树。</p>
</li>
<li><p>遍历渲染树开始布局，计算每个节点的位置信息。</p>
</li>
<li><p>将每个节点绘制到屏幕。</p>
</li>
</ul>
<h3 id="渲染阻塞的优化方案"><a href="#渲染阻塞的优化方案" class="headerlink" title="渲染阻塞的优化方案"></a>渲染阻塞的优化方案</h3><hr>
<p>浏览器想要渲染一个页面就必须先构建出<code>DOM</code>树与<code>CSSOM</code>树，如果<code>HTML</code>与<code>CSS</code>文件结构非常庞大与复杂，这显然会给页面加载速度带来严重影响。</p>
<p>所谓渲染阻塞资源，即是对该资源发送请求后还需要先构建对应的<code>DOM</code>树或<code>CSSOM</code>树，这种行为显然会延迟渲染操作的开始时间。<strong><code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>都是会对渲染产生阻塞的资源，<code>HTML</code>是必需的（没有<code>DOM</code>还谈何渲染），但还可以从<code>CSS</code>与<code>JavaScript</code>着手优化，尽可能地减少阻塞的产生。</strong></p>
<h4 id="优化CSS"><a href="#优化CSS" class="headerlink" title="优化CSS"></a>优化CSS</h4><hr>
<p>如果可以让<code>CSS</code>资源只在特定条件下使用，这样这些资源就可以在首次加载时先不进行构建<code>CSSOM</code>树，只有在符合特定条件时，才会让浏览器进行阻塞渲染然后构建<code>CSSOM</code>树。</p>
<p><code>CSS</code>的媒体查询正是用来实现这个功能的，它由媒体类型以及零个或多个检查特定媒体特征状况的表达式组成。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 没有使用媒体查询，这个css资源会阻塞渲染  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span>    <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- all是默认类型，它和不设置媒体查询的效果是一样的 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span>    <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"all"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 动态媒体查询， 将在网页加载时计算。</span></div><div class="line">根据网页加载时设备的方向，portrait.css 可能阻塞渲染，也可能不阻塞渲染。--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"portrait.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"orientation:portrait"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 只在打印网页时应用，因此网页首次在浏览器中加载时，它不会阻塞渲染。 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"print.css"</span>    <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>使用媒体查询可以让<code>CSS</code>资源不在首次加载中阻塞渲染，但不管是哪种<code>CSS</code>资源它们的下载请求都不会被忽略，浏览器仍然会先下载CSS文件</strong></p>
<h4 id="优化JavaScript"><a href="#优化JavaScript" class="headerlink" title="优化JavaScript"></a>优化JavaScript</h4><hr>
<p><strong>当浏览器的<code>HTML</code>解析器遇到一个<code>script</code>标记时会暂停构建<code>DOM</code>，然后将控制权移交至<code>JavaScript</code>引擎，这时引擎会开始执行<code>JavaScript</code>脚本，直到执行结束后，浏览器才会从之前中断的地方恢复，然后继续构建<code>DOM</code>。每次去执行<code>JavaScript</code>脚本都会严重地阻塞<code>DOM</code>树的构建，如果<code>JavaScript</code>脚本还操作了<code>CSSOM</code>，而正好这个<code>CSSOM</code>还没有下载和构建，浏览器甚至会延迟脚本执行和构建<code>DOM</code>，直至完成其<code>CSSOM</code>的下载和构建</strong>。显而易见，如果对<code>JavaScript</code>的执行位置运用不当，这将会严重影响渲染的速度。</p>
<p>下面代码中的<code>JavaScript</code>脚本并不会生效，这是因为<code>DOM</code>树还没有构建到<code>&lt;p&gt;</code>标签时，<code>JavaScript</code>脚本就已经开始执行了。这也是为什么经常有人在<code>HTML</code>文件的最下方写内联<code>JavaScript</code>代码，又或者使用<code>window.onload()</code>和<code>JQuery</code>中的<code>$(function(){})</code>（这两个函数有一些区别，<code>window.onload()</code>是等待页面完全加载完毕后触发的事件，而<code>$(function(){})</code>在<code>DOM</code>树构建完毕后就会执行）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello,World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    	<span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</div><div class="line">    	p.textContent = <span class="string">'SylvanasSun'</span>;	</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>使用<code>async</code>可以通知浏览器该脚本不需要在引用位置执行</strong>，这样浏览器就可以继续构建<code>DOM</code>，<code>JavaScript</code>脚本会在就绪后开始执行，这样将显著提升页面首次加载的性能（<code>async</code>只可以在<code>src</code>标签中使用也就是外部引用的<code>JavaScript</code>文件）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 下面2个用法效果是等价的 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"demo_async.js"</span> <span class="attr">async</span>=<span class="string">"async"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"demo_async.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="优化关键渲染路径总结"><a href="#优化关键渲染路径总结" class="headerlink" title="优化关键渲染路径总结"></a>优化关键渲染路径总结</h3><hr>
<p>上文已经完整讲述了浏览器是如何渲染页面的以及渲染之前的准备工作，接下来我们以下面的案例来总结一下优化关键渲染路径的方法。</p>
<p>假设有一个<code>HTML</code>页面，它只引入了一个<code>CSS</code>外部文件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>web performance<span class="tag">&lt;/<span class="name">span</span>&gt;</span> students!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"awesome-photo.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它的关键渲染路径如下：</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fk56dzdbn9j20nr068dga.jpg" alt=""></p>
<p>首先浏览器要先对服务器发送请求获得<code>HTML</code>文件，得到<code>HTML</code>文件后开始构建<code>DOM</code>树，在遇见<code>&lt;link&gt;</code>标签时浏览器需要向服务器再次发出请求来获得<code>CSS</code>文件，然后则是继续构建<code>DOM</code>树和<code>CSSOM</code>树，浏览器合并出渲染树，根据渲染树进行布局计算，执行绘制操作，页面渲染完成。</p>
<p>有以下几个用于描述关键渲染路径性能的词汇：</p>
<ul>
<li><p>关键资源：可能阻塞网页首次渲染的资源（上图中为2个，<code>HTML</code>文件与外部<code>CSS</code>文件<code>style.css</code>）。</p>
</li>
<li><p>关键路径长度： 获取关键资源所需的往返次数或总时间（上图为2次或以上，一次获取<code>HTML</code>文件，一次获取<code>CSS</code>文件，这个次数基于<code>TCP</code>协议的最大拥塞窗口，一个文件不一定能在一次连接内传输完毕）。</p>
</li>
<li><p>关键字节：所有关键资源文件大小的总和（上图为<code>9KB</code>）。</p>
</li>
</ul>
<p>接下来，案例代码的需求发生了变化，它新增了一个<code>JavaScript</code>文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>web performance<span class="tag">&lt;/<span class="name">span</span>&gt;</span> students!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"awesome-photo.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fk56e0i20xj20or06ygmi.jpg" alt=""></p>
<p><code>JavaScript</code>文件阻塞了<code>DOM</code>树的构建，并且在执行<code>JavaScript</code>脚本时还需要先等待构建<code>CSSOM</code>树，上图的关键渲染路径特性如下：</p>
<ul>
<li><p>关键资源： 3（<code>HTML</code>、<code>style.css</code>、<code>app.js</code>）</p>
</li>
<li><p>关键路径长度： 2或以上（浏览器会在一次连接中一起下载<code>style.css</code>和<code>app.js</code>）</p>
</li>
<li><p>关键字节：11KB</p>
</li>
</ul>
<p>现在，我们要优化关键渲染路径，首先将<code>&lt;script&gt;</code>标签添加异步属性<code>async</code>，这样浏览器的<code>HTML</code>解析器就不会阻塞这个<code>JavaScript</code>文件了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>web performance<span class="tag">&lt;/<span class="name">span</span>&gt;</span> students!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"awesome-photo.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fk56e0sokqj20oj074ab1.jpg" alt=""></p>
<ul>
<li><p>关键资源：2（<code>app.js</code>为异步加载，不会成为阻塞渲染的资源）</p>
</li>
<li><p>关键路径长度： 2或以上</p>
</li>
<li><p>关键字节： 9KB（<code>app.js</code>不再是关键资源，所以没有算上它的大小）</p>
</li>
</ul>
<p>接下来对<code>CSS</code>进行优化，比如添加上媒体查询。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>web performance<span class="tag">&lt;/<span class="name">span</span>&gt;</span> students!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"awesome-photo.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fk56e15x4jj20ny082mxu.jpg" alt=""></p>
<ul>
<li><p>关键资源：1（<code>app.js</code>为异步加载，<code>style.css</code>只有在打印时才会使用，所以只剩下<code>HTML</code>一个关键资源，也就是说当<code>DOM</code>树构建完毕，浏览器就会开始进行渲染）</p>
</li>
<li><p>关键路径长度：1或以上</p>
</li>
<li><p>关键字节：5KB</p>
</li>
</ul>
<p><strong>优化关键渲染路径就是在对关键资源、关键路径长度和关键字节进行优化</strong>。关键资源越少，浏览器在渲染前的准备工作就越少；同样，关键路径长度和关键字节关系到浏览器下载资源的效率，它们越少，浏览器下载资源的速度就越快。</p>
<h3 id="其他优化方案"><a href="#其他优化方案" class="headerlink" title="其他优化方案"></a>其他优化方案</h3><hr>
<p>除了异步加载<code>JavaScript</code>和使用媒体查询外还有很多其他的优化方案可以使页面的首次加载变得更快，这些方案可以综合起来使用，但核心的思想还是针对关键渲染路径进行了优化。</p>
<h4 id="加载部分HTML"><a href="#加载部分HTML" class="headerlink" title="加载部分HTML"></a>加载部分HTML</h4><hr>
<p><strong>服务端在接收到请求时先只响应回<code>HTML</code>的初始部分，后续的<code>HTML</code>内容在需要时再通过<code>AJAX</code>获得</strong>。由于服务端只发送了部分<code>HTML</code>文件，这让构建<code>DOM</code>树的工作量减少很多，从而让用户感觉页面的加载速度很快。</p>
<p>注意，这个方法不能用在<code>CSS</code>上，浏览器不允许<code>CSSOM</code>只构建初始部分，否则会无法确定具体的样式。 </p>
<h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><hr>
<p><strong>通过对外部资源进行压缩可以大幅度地减少浏览器需要下载的资源量，它会减少关键路径长度与关键字节，使页面的加载速度变得更快。</strong></p>
<p><strong>对数据进行压缩其实就是使用更少的位数来对数据进行重编码</strong>。如今有非常多的压缩算法，且每一个的作用领域也各不相同，它们的复杂度也不相同，不过在这里我不会讲压缩算法的细节，感兴趣的朋友可以自己Google。</p>
<p>在对<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>这些文件进行压缩之前，还需要先进行一次冗余压缩。<strong>所谓冗余压缩，就是去除多余的字符，例如注释、空格符和换行符</strong>。这些字符对于程序员是有用的，毕竟没有格式化的代码可读性是非常恐怖的，但它们对于浏览器是没有任何意义的，去除这些冗余可以减少文件的数据量。<strong>在进行完冗余压缩之后，再使用压缩算法进一步对数据本身进行压缩</strong>，例如<code>GZIP</code>（<code>GZIP</code>是一个可以作用于任何字节流的通用压缩算法，它会记忆之前已经看到的内容，然后再尝试查找并替换重复的内容。）。</p>
<h4 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h4><hr>
<p>通过网络来获取资源通常是缓慢的，如果资源文件过于膨大，浏览器还需要与服务器之间进行多次往返通信才能获得完整的资源文件。缓存可以复用之前获取的资源，既然后端可以使用缓存来减少访问数据库的开销，那前端自然也可以使用缓存来复用资源文件。</p>
<p>浏览器自带了<code>HTTP</code>缓存的功能，只需要确保每个服务器响应的头部都包含了以下的属性：</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fk62pilgajj20ab07gt8x.jpg" alt=""></p>
<ul>
<li><p>ETag： <strong>ETag是一个传递验证令牌，它对资源的更新进行检查，如果资源未发生变化时不会传送任何数据</strong>。当浏览器发送一个请求时，会把ETag一起发送到服务器，服务器会根据当前资源核对令牌（ETag通常是对内容进行<code>Hash</code>后得出的一个指纹），如果资源未发生变化，服务器将返回<code>304 Not Modified</code>响应，这时浏览器不必再次下载资源，而是继续复用缓存。</p>
</li>
<li><p>Cache-Control： <strong>Cache-Control定义了缓存的策略，它规定在什么条件下可以缓存响应以及可以缓存多久</strong>。</p>
<ul>
<li><p>no-cache： no-cache表示必须先与服务器确认返回的响应是否发生了变化，然后才能使用该响应来满足后续对同一网址的请求（每次都会根据ETag对服务器发送请求来确认变化，如果未发生变化，浏览器不会下载资源）。</p>
</li>
<li><p>no-store： no-store直接禁止浏览器以及所有中间缓存存储任何版本的返回响应。简单的说，该策略会禁止任何缓存，每次发送请求时，都会完整地下载服务器的响应。</p>
</li>
<li><p>public&amp;private： 如果响应被标记为public，则即使它有关联的<code>HTTP</code>身份验证，甚至响应状态代码通常无法缓存，浏览器也可以缓存响应。如果响应被标记为private，那么这个响应通常只为单个用户缓存，因此不允许任何中间缓存（CDN）对其进行缓存，private一般用在缓存用户私人信息页面。</p>
</li>
<li><p>max-age： max-age定义了从请求时间开始，缓存的最长时间，单位为秒。</p>
</li>
</ul>
</li>
</ul>
<h4 id="资源预加载"><a href="#资源预加载" class="headerlink" title="资源预加载"></a>资源预加载</h4><hr>
<p><strong><code>Pre-fetching</code>是一种提示浏览器预先加载用户之后可能会使用到的资源的方法。</strong></p>
<p>使用<code>dns-prefetch</code>来提前进行<code>DNS</code>解析，以便之后可以快速地访问另一个主机名（浏览器会在加载网页时对网页中的域名进行解析缓存，这样你在之后的访问时无需进行额外的DNS解析，减少了用户等待时间，提高了页面加载速度）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"other.hostname.com"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用<code>prefetch</code>属性可以预先下载资源，不过它的优先级是最低的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span>  <span class="attr">href</span>=<span class="string">"/some_other_resource.jpeg"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>Chrome</code>允许使用<code>subresource</code>属性指定优先级最高的下载资源（当所有属性为<code>subresource</code>的资源下载完完毕后，才会开始下载属性为<code>prefetch</code>的资源）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"subresource"</span>  <span class="attr">href</span>=<span class="string">"/some_other_resource.js"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>prerender</code>可以预先渲染好页面并隐藏起来，之后打开这个页面会跳过渲染阶段直接呈现在用户面前（推荐对用户接下来必须访问的页面进行预渲染，否则得不偿失）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span>  <span class="attr">href</span>=<span class="string">"//domain.com/next_page.html"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><p><a href="https://developers.google.com/web/fundamentals/" target="_blank" rel="external">Web Fundamentals   |  Google Developers</a></p>
</li>
<li><p><a href="http://www.stevesouders.com/blog/2009/05/18/flushing-the-document-early/" target="_blank" rel="external">Flushing the Document Early | High Performance Web Sites</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="external">Introduction to the DOM - Web APIs | MDN</a></p>
</li>
<li><p><a href="https://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/" target="_blank" rel="external">How the Browser Pre-loader Makes Pages Load Faster - Andy Davies</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家都知道万维网的应用层使用了&lt;code&gt;HTTP&lt;/code&gt;协议，并且用浏览器作为入口访问网络上的资源。用户在使用浏览器访问一个网站时需要先通过&lt;code&gt;HTTP&lt;/code&gt;协议向服务器发送请求，之后服务器返回&lt;code&gt;HTML&lt;/code&gt;文件与响应信息。这时，
    
    </summary>
    
      <category term="前端" scheme="https://sylvanassun.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="https://sylvanassun.github.io/categories/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="前端" scheme="https://sylvanassun.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="https://sylvanassun.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>教你如何快速实现一个图片爬虫</title>
    <link href="https://sylvanassun.github.io/2017/09/20/2017-09-20-PictureSpider/"/>
    <id>https://sylvanassun.github.io/2017/09/20/2017-09-20-PictureSpider/</id>
    <published>2017-09-20T10:00:00.000Z</published>
    <updated>2017-09-22T02:33:38.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫?"></a>什么是爬虫?</h3><hr>
<p>如果是没有接触过爬虫的人可能会有些许疑惑，爬虫是个什么东西呢？其实爬虫的概念很简单，在互联网时代,万维网已然是大量信息的载体，如何有效地利用并提取这些信息是一个巨大的挑战。<strong>当我们使用浏览器对某个网站发送请求时，服务器会响应<code>HTML</code>文本并由浏览器来进行渲染显示。爬虫正是利用了这一点，通过程序模拟用户的请求，来获得<code>HTML</code>的内容，并从中提取需要的数据和信息</strong>。如果把网络想象成一张蜘蛛网，爬虫程序则像是蜘蛛网上的蜘蛛，不断地爬取数据与信息。</p>
<p>爬虫的概念非常简单易懂，利用<code>python</code>内置的<code>urllib</code>库都可以实现一个简单的爬虫，下面的代码是一个非常简单的爬虫，只要有基本的<code>python</code>知识应该都能看懂。它会收集一个页面中的所有<code>&lt;a&gt;</code>标签(没有做任何规则判断)中的链接，然后顺着这些链接不断地进行深度搜索。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="comment"># 网页的实体类,只含有两个属性,url和标题</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,title)</span>:</span></div><div class="line">        self._url = url</div><div class="line">        self._title = title</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'[Url]: %s [Title]: %s'</span> %(self._url,self._title)</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._url</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._title</div><div class="line"></div><div class="line"><span class="meta">    @url.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,value)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,str):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'url must be a string!'</span>)</div><div class="line">        <span class="keyword">if</span> value == <span class="string">''</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'url must be not empty!'</span>)</div><div class="line">        self._url = value</div><div class="line"></div><div class="line"><span class="meta">    @title.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">(self,value)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,str):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'title must be a string!'</span>)</div><div class="line">        <span class="keyword">if</span> value == <span class="string">''</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'title must be not empty!'</span>)</div><div class="line">        self._title = value</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,init_page)</span>:</span></div><div class="line">        self._init_page = init_page <span class="comment"># 种子网页,也就是爬虫的入口</span></div><div class="line">        self._pages = []</div><div class="line">        self._soup = <span class="keyword">None</span> <span class="comment"># BeautifulSoup 一个用来解析HTML的解析器</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></div><div class="line">        start_time = datetime.now()</div><div class="line">        print(<span class="string">'[Start Time]: %s'</span> % start_time)</div><div class="line">        start_timestamp = start_time.timestamp()</div><div class="line">        tocrawl = [self._init_page] <span class="comment"># 记录将要爬取的网页</span></div><div class="line">        crawled = [] <span class="comment"># 记录已经爬取过的网页</span></div><div class="line">		<span class="comment"># 不断循环,直到将这张图搜索完毕</span></div><div class="line">        <span class="keyword">while</span> tocrawl:</div><div class="line">            page = tocrawl.pop()</div><div class="line">            <span class="keyword">if</span> page <span class="keyword">not</span> <span class="keyword">in</span> crawled:</div><div class="line">                self._init_soup(page)</div><div class="line">                self._packaging_to_pages(page)</div><div class="line">                links = self._extract_links()</div><div class="line">                self._union_list(tocrawl,links)</div><div class="line">                crawled.append(page)</div><div class="line">        self._write_to_curdir()</div><div class="line">        end_time = datetime.now()</div><div class="line">        print(<span class="string">'[End Time]: %s'</span> % end_time)</div><div class="line">        end_timestamp = end_time.timestamp()</div><div class="line">        print(<span class="string">'[Total Time Consuming]: %f.3s'</span> % (start_timestamp - end_timestamp) / <span class="number">1000</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_soup</span><span class="params">(self,page)</span>:</span></div><div class="line">        page_content = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">			<span class="comment"># urllib可以模拟用户请求,获得响应的HTML文本内容</span></div><div class="line">            page_content = urllib.request.urlopen(page).read()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            page_content = <span class="string">''</span></div><div class="line">		<span class="comment"># 初始化BeautifulSoup,参数二是使用到的解析器名字	</span></div><div class="line">        self._soup = BeautifulSoup(page_content,<span class="string">'lxml'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_extract_links</span><span class="params">(self)</span>:</span></div><div class="line">        a_tags = self._soup.find_all(<span class="string">'a'</span>) <span class="comment"># 找到所有a标签</span></div><div class="line">        links = []</div><div class="line">		<span class="comment"># 收集所有a标签中的链接</span></div><div class="line">        <span class="keyword">for</span> a_tag <span class="keyword">in</span> a_tags:</div><div class="line">            links.append(a_tag.get(<span class="string">'href'</span>))</div><div class="line">        <span class="keyword">return</span> links</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_packaging_to_pages</span><span class="params">(self,page)</span>:</span></div><div class="line">        title_string = <span class="string">''</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            title_string = self._soup.title.string <span class="comment"># 获得title标签中的文本内容</span></div><div class="line">        <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e :</div><div class="line">            print(e)</div><div class="line">        page_obj = Page(page,title_string)</div><div class="line">        print(page_obj)</div><div class="line">        self._pages.append(page_obj)</div><div class="line"></div><div class="line">	<span class="comment"># 将爬取到的所有信息写入到当前目录下的out.txt文件</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_write_to_curdir</span><span class="params">(self)</span>:</span></div><div class="line">        cur_path = os.path.join(os.path.abspath(<span class="string">'.'</span>),<span class="string">'out.txt'</span>)</div><div class="line">        print(<span class="string">'Start write to %s'</span> % cur_path)</div><div class="line">        <span class="keyword">with</span> open(cur_path,<span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(self._pages)</div><div class="line"></div><div class="line">    <span class="comment"># 将dest中的不存在于src的元素合并到src</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_union_list</span><span class="params">(self,src,dest)</span>:</span></div><div class="line">        <span class="keyword">for</span> dest_val <span class="keyword">in</span> dest:</div><div class="line">            <span class="keyword">if</span> dest_val <span class="keyword">not</span> <span class="keyword">in</span> src:</div><div class="line">                src.append(dest_val)</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_page</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._init_page</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pages</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._pages</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    spider = Spider(<span class="string">'https://sylvanassun.github.io/'</span>)</div><div class="line">    spider.crawl()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure>
<p>但是我们如果想要实现一个性能高效的爬虫，那需要的复杂度也会增长，本文旨在快速实现，所以我们需要借助他人实现的爬虫框架来当做脚手架，在这之上来构建我们的图片爬虫(如果有时间的话当然也鼓励自己造轮子啦)。</p>
<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文首发自<a href="https://sylvanassun.github.io/">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/09/20/2017-09-20-PictureSpider/">https://sylvanassun.github.io/2017/09/20/2017-09-20-PictureSpider/</a></p>
</blockquote>
<h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><hr>
<p><strong>BeautifulSoup是一个用于从<code>HTML</code>和<code>XML</code>中提取数据的<code>python</code>库</strong>。Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，Beautiful Soup就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。</p>
<p>利用好BeautifulSoup可以为我们省去许多编写正则表达式的时间，如果当你需要更精准地进行搜索时，BeautifulSoup也支持使用正则表达式进行查询。</p>
<p>BeautifulSoup3已经停止维护了，现在基本使用的都是BeautifulSoup4，安装BeautifulSoup4很简单，只需要执行以下的命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install beautifulsoup4</div></pre></td></tr></table></figure>
<p>然后从<code>bs4</code>模块中导入BeautifulSoup对象，并创建这个对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">soup = BeautifulSoup(body,<span class="string">'lxml'</span>)</div></pre></td></tr></table></figure>
<p>创建BeautifulSoup对象需要传入两个参数,第一个是需要进行解析的<code>HTML</code>内容，第二个参数为解析器的名字(如果不传入这个参数，BeautifulSoup会默认使用<code>python</code>内置的解析器<code>html.parser</code>)。BeautifulSoup支持多种解析器，有<code>lxml</code>、<code>html5lib</code>、<code>html.parser</code>。</p>
<p>第三方解析器需要用户自己安装，本文中使用的是<code>lxml</code>解析器，安装命令如下（它还需要先安装C语言库）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install lxml</div></pre></td></tr></table></figure>
<p>下面以一个例子演示使用BeautifulSoup的基本方式，如果还想了解更多可以去参考<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">BeautifulSoup文档</a>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">html = <span class="string">"""</span></div><div class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</div><div class="line">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</div><div class="line">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</div><div class="line">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</div><div class="line">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</div><div class="line">and they lived at the bottom of a well.&lt;/p&gt;</div><div class="line">&lt;p class="story"&gt;...&lt;/p&gt;</div><div class="line">"""</div><div class="line"></div><div class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</div><div class="line"><span class="comment"># 格式化输出soup中的内容</span></div><div class="line">print(soup.prettify())</div><div class="line"></div><div class="line"><span class="comment"># 可以通过.操作符来访问标签对象</span></div><div class="line">title = soup.title</div><div class="line">print(title)</div><div class="line">p = soup.p</div><div class="line">print(p)</div><div class="line"></div><div class="line"><span class="comment"># 获得title标签中的文本内容,这2个方法得到的结果是一样的</span></div><div class="line">print(title.text)</div><div class="line">print(title.get_text())</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获得head标签的所有子节点,contents返回的是一个列表,children返回的是一个迭代器</span></div><div class="line">head = soup.head</div><div class="line">print(head.contents)</div><div class="line">print(head.children)</div><div class="line"></div><div class="line"><span class="comment"># 获得所有a标签,并输出每个a标签href属性中的内容</span></div><div class="line">a_tags = soup.find_all(<span class="string">'a'</span>)</div><div class="line"><span class="keyword">for</span> a_tag <span class="keyword">in</span> a_tags:</div><div class="line">    print(a_tag[<span class="string">'href'</span>])</div><div class="line"><span class="comment"># find函数与find_all一样,只不过返回的是找到的第一个标签    </span></div><div class="line">print(soup.find(<span class="string">'a'</span>)[<span class="string">'href'</span>])</div><div class="line"></div><div class="line"><span class="comment"># 根据属性查找,这2个方法得到的结果是一样的</span></div><div class="line">print(soup.find(<span class="string">'p'</span>,class_=<span class="string">'title'</span>))</div><div class="line">print(soup.find(<span class="string">'p'</span>,attrs=&#123;<span class="string">'class'</span>: <span class="string">'title'</span>&#125;))</div></pre></td></tr></table></figure>
<h3 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h3><hr>
<p><code>Scrapy</code>是一个功能强大的爬虫框架，它已经实现了一个性能高效的爬虫结构，并提供了很多供程序员自定义的配置。使用<code>Scrapy</code>只需要在它的规则上编写我们的爬虫逻辑即可。</p>
<p>首先需要先安装<code>Scrapy</code>,执行命令<code>pip install scrapy</code>。然后再执行命令<code>scrapy startproject 你的项目名</code>来生成<code>Scrapy</code>的基本项目文件夹。生成的项目结构如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">你的项目名/</div><div class="line">    scrapy.cfg</div><div class="line">    你的项目名/</div><div class="line">        __init__.py</div><div class="line">        items.py</div><div class="line">        pipelines.py</div><div class="line">        settings.py</div><div class="line">        spiders/</div><div class="line">            __init__.py</div><div class="line">            ...</div></pre></td></tr></table></figure>
<ul>
<li><p><code>scrapy.cfg</code> : 项目的配置文件。</p>
</li>
<li><p><code>items.py</code>：物品模块，用户需要在这个模块中定义数据封装的实体类。</p>
</li>
<li><p><code>pipelines.py</code>：管道模块，用户需要在这个模块中定义处理数据的逻辑（如存储到数据库等）。</p>
</li>
<li><p><code>settings.py</code>：这个模块定义了整个项目中的各种配置变量。</p>
</li>
<li><p><code>spiders/</code>：在这个包中定义用户自己的爬虫模块。</p>
</li>
</ul>
<p>启动<code>Scrapy</code>的爬虫也很简单，只需要执行命令<code>scrapy crawl 你的爬虫名</code>。下面介绍<code>Scrapy</code>中的关键模块的演示案例，如果想要了解有关<code>Scrapy</code>的更多信息，请参考<a href="https://doc.scrapy.org/en/0.24/intro/tutorial.html" target="_blank" rel="external">Scrapy官方文档</a>。</p>
<h4 id="items"><a href="#items" class="headerlink" title="items"></a>items</h4><hr>
<p><strong><code>items</code>模块主要是为了将爬取到的非结构化数据封装到一个结构化对象中，自定义的<code>item</code>类必须继承自<code>scrapy.Item</code>，且每个属性都要赋值为<code>scrapy.Field()</code>。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    name = scrapy.Field()</div><div class="line">    price = scrapy.Field()</div><div class="line">    stock = scrapy.Field()</div></pre></td></tr></table></figure>
<p>操作<code>item</code>对象就像操作一个<code>dict</code>对象一样简单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">product = Product()</div><div class="line"># 对属性赋值</div><div class="line">product[&apos;name&apos;] = &apos;Sylvanas&apos;</div><div class="line">product[&apos;price&apos;] = 998</div><div class="line"># 获得属性</div><div class="line">print(product[&apos;name&apos;])</div><div class="line">print(product[&apos;price&apos;])</div></pre></td></tr></table></figure>
<h4 id="pipelines"><a href="#pipelines" class="headerlink" title="pipelines"></a>pipelines</h4><hr>
<p><strong>当一个<code>Item</code>经由爬虫封装之后将会到达<code>Pipeline</code>类，你可以定义自己的<code>Pipeline</code>类来决定将<code>Item</code>的处理策略。</strong></p>
<p>每个<code>Pipeline</code>可以实现以下函数。</p>
<ul>
<li><p><code>process_item(item, spider)</code>： 每个<code>Pipeline</code>都会调用此函数来处理<code>Item</code>，这个函数必须返回一个<code>Item</code>，如果在处理过程中遇见错误，可以抛出<code>DropItem</code>异常。</p>
</li>
<li><p><code>open_spider(spider)</code>： 当<code>spider</code>开始时将会调用此函数，可以利用这个函数进行打开文件等操作。</p>
</li>
<li><p><code>close_spider(spider)</code>：当<code>spider</code>关闭时将会调用此函数，可以利用这个函数对<code>IO</code>资源进行关闭。</p>
</li>
<li><p><code>from_crawler(cls, crawler)</code>： 这个函数用于获取<code>settings.py</code>模块中的属性。注意这个函数是一个类方法。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PricePipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    vat_factor = <span class="number">1.15</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, HELLO)</span>:</span></div><div class="line">		self.HELLO = HELLO</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> item[<span class="string">'price'</span>]:</div><div class="line">            <span class="keyword">if</span> item[<span class="string">'price_excludes_vat'</span>]:</div><div class="line">                item[<span class="string">'price'</span>] = item[<span class="string">'price'</span>] * self.vat_factor</div><div class="line">            <span class="keyword">return</span> item</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"Missing price in %s"</span> % item)</div><div class="line">			</div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        settings = crawler.settings <span class="comment"># 从crawler中获得settings</span></div><div class="line">        <span class="keyword">return</span> cls(settings[<span class="string">'HELLO'</span>]) <span class="comment"># 返回settings中的属性，将由__init__函数接收</span></div></pre></td></tr></table></figure>
<p>当定义完你的<code>Pipeline</code>后，还需要在<code>settings.py</code>中对你的<code>Pipeline</code>进行设置。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">	<span class="comment"># 后面跟的数字是优先级别</span></div><div class="line">    <span class="string">'pipeline类的全路径'</span>: <span class="number">300</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="spiders"><a href="#spiders" class="headerlink" title="spiders"></a>spiders</h4><hr>
<p>在<code>spiders</code>模块中，用户可以通过自定义<code>Spider</code>类来制定自己的爬虫逻辑与数据封装策略。<strong>每个<code>Spider</code>都必须继承自<code>class scrapy.spider.Spider</code></strong>，这是<code>Scrapy</code>中最简单的爬虫基类，它没有什么特殊功能，<code>Scrapy</code>也提供了其他功能不同的<code>Spider</code>类供用户选择，这里就不多叙述了，可以去参考官方文档。</p>
<p>用户可以通过以下属性来自定义配置<code>Spider</code>:</p>
<ul>
<li><p><code>name</code>： 这是<code>Spider</code>的名称，<code>Scrapy</code>需要通过这个属性来定位<code>Spider</code>并启动爬虫，它是唯一且必需的。</p>
</li>
<li><p><code>allowed_domains</code>： 这个属性规定了<code>Spider</code>允许爬取的域名。</p>
</li>
<li><p><code>start_urls</code>： <code>Spider</code>开始时将抓取的网页列表。</p>
</li>
<li><p><code>start_requests()</code>： 该函数是<code>Spider</code>开始抓取时启动的函数，它只会被调用一次，有的网站必须要求用户登录，可以使用这个函数先进行模拟登录。</p>
</li>
<li><p><code>make_requests_from_url(url)</code>： 该函数接收一个<code>url</code>并返回<code>Request</code>对象。除非重写该函数，否则它会默认以<code>parse(response)</code>函数作为回调函数，并启用<code>dont_filter</code>参数（这个参数是用于过滤重复<code>url</code>的）。</p>
</li>
<li><p><code>parse(response)</code>： 当请求没有设置回调函数时，则会默认调用<code>parse(response)</code>。</p>
</li>
<li><p><code>log(message[, level, component])</code>： 用于记录日志。</p>
</li>
<li><p><code>closed(reason)</code>： 当<code>Spider</code>关闭时调用。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">'example.com'</span></div><div class="line">    allowed_domains = [<span class="string">'example.com'</span>]</div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://www.example.com/1.html'</span>,</div><div class="line">        <span class="string">'http://www.example.com/2.html'</span>,</div><div class="line">        <span class="string">'http://www.example.com/3.html'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        self.log(<span class="string">'A response from %s just arrived!'</span> % response.url)</div></pre></td></tr></table></figure>
<h3 id="其他依赖库"><a href="#其他依赖库" class="headerlink" title="其他依赖库"></a>其他依赖库</h3><hr>
<h4 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h4><hr>
<p><code>Requests</code>也是一个第三方<code>python</code>库，它比<code>python</code>内置的<code>urllib</code>更加简单好用。只需要安装（<code>pip install requests</code>），然后导包后，即可轻松对网站发起请求。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="comment"># 支持http的各种类型请求</span></div><div class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>)</div><div class="line">r = requests.put(<span class="string">"http://httpbin.org/put"</span>)</div><div class="line">r = requests.delete(<span class="string">"http://httpbin.org/delete"</span>)</div><div class="line">r = requests.head(<span class="string">"http://httpbin.org/get"</span>)</div><div class="line">r = requests.options(<span class="string">"http://httpbin.org/get"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 获得响应内容</span></div><div class="line">r.text <span class="comment"># 返回文本</span></div><div class="line">r.content <span class="comment"># 返回字节</span></div><div class="line">r.raw <span class="comment"># 返回原始内容</span></div><div class="line">r.json() <span class="comment"># 返回json</span></div></pre></td></tr></table></figure>
<p>关于更多的参数与内容请参考<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">Requests文档</a>。</p>
<h4 id="BloomFilter"><a href="#BloomFilter" class="headerlink" title="BloomFilter"></a>BloomFilter</h4><hr>
<p><code>BloomFilter</code>是一个用于过滤重复数据的数据结构，我们可以使用它来对重复的<code>url</code>进行过滤。本文使用的<code>BloomFilter</code>来自于<a href="https://github.com/jaybaird/python-bloomfilter" target="_blank" rel="external">python-bloomfilter</a>，其他操作系统用户请使用<code>pip install pybloom</code>命令安装，windows用户请使用<code>pip install pybloom-live</code>（原版对windows不友好）。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><hr>
<p>介绍了需要的依赖库之后，我们终于可以开始实现自己的图片爬虫了。我们的目标是爬<code>https://www.deviantart.com/</code>网站中的图片，在写爬虫程序之前，还需要先分析一下页面的<code>HTML</code>结构，这样才能针对性地找到图片的源地址。</p>
<p>为了保证爬到的图片的质量，我决定从热门页面开始爬，链接为<code>https://www.deviantart.com/whats-hot/</code>。</p>
<p>打开浏览器的开发者工具后，可以发现每个图片都是由一个<code>a</code>标签组成，每个<code>a</code>标签的<code>class</code>为<code>torpedo-thumb-link</code>，而这个<code>a</code>标签的<code>href</code>正好就是这张图片的详情页面（如果我们从这里就开始爬图片的话，那么爬到的可都只是缩略图）。</p>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fjrjc53yfgj20ze0hj4fa.jpg" alt=""></p>
<p>进入到详情页后，不要马上爬取当前图片的源地址，因为当前页显示的图片并不是原始格式，我们对图片双击放大之后再使用开发者工具抓到这个图片所在的<code>img</code>标签后，再让爬虫获取这个标签中的源地址。</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fjrjc67dulj21eg0h2qpr.jpg" alt=""></p>
<p>在获得图片的源地址之后，我的策略是让爬虫继续爬取该页中推荐的更多图片，通过开发者工具，可以发现这些图片都被封装在一个<code>class</code>为<code>tt-crop thumb</code>的<code>div</code>标签中，而该标签里的第一个<code>a</code>子标签正好就是这个图片的详情页链接。</p>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fjrjc5msszj20sn0fkn80.jpg" alt=""></p>
<h3 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h3><hr>
<p>在对网页的<code>HTML</code>进行分析之后，可以开始写程序了，首先先用<code>Scrapy</code>的命令来初始化项目。之后在<code>settings.py</code>中做如下配置。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这个是网络爬虫协议，爬虫访问网站时都会检查是否有robots.txt文件，</span></div><div class="line"><span class="comment"># 然后根据文件中的内容选择性地进行爬取，我们这里设置为False即不检查robots.txt</span></div><div class="line">ROBOTSTXT_OBEY = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># 图片下载的根目录路径</span></div><div class="line">IMAGES_STORE = <span class="string">'.'</span></div><div class="line"></div><div class="line"><span class="comment"># 图片最大下载数量，当下载的图片达到这个数字时，将会手动关闭爬虫</span></div><div class="line">MAXIMUM_IMAGE_NUMBER = <span class="number">10000</span></div></pre></td></tr></table></figure>
<p>然后定义我们的<code>Item</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeviantArtSpiderItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    author = scrapy.Field() <span class="comment"># 作者名</span></div><div class="line">    image_name = scrapy.Field() <span class="comment"># 图片名</span></div><div class="line">    image_id = scrapy.Field() <span class="comment"># 图片id</span></div><div class="line">    image_src = scrapy.Field() <span class="comment"># 图片的源地址</span></div></pre></td></tr></table></figure>
<p>创建自己的<code>spider</code>模块与<code>Spider</code>类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="comment"># this import package is right,if PyCharm give out warning please ignore</span></div><div class="line"><span class="keyword">from</span> deviant_art_spider.items <span class="keyword">import</span> DeviantArtSpiderItem</div><div class="line"><span class="keyword">from</span> pybloom_live <span class="keyword">import</span> BloomFilter</div><div class="line"><span class="keyword">from</span> scrapy.contrib.linkextractors.lxmlhtml <span class="keyword">import</span> LxmlLinkExtractor</div><div class="line"><span class="keyword">from</span> scrapy.contrib.spiders <span class="keyword">import</span> CrawlSpider, Rule</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeviantArtImageSpider</span><span class="params">(CrawlSpider)</span>:</span></div><div class="line">    name = <span class="string">'deviant_art_image_spider'</span></div><div class="line"></div><div class="line">    <span class="comment"># 我不想让scrapy帮助过滤所以设置为空</span></div><div class="line">    allowed_domains = <span class="string">''</span></div><div class="line"></div><div class="line">    start_urls = [<span class="string">'https://www.deviantart.com/whats-hot/'</span>]</div><div class="line"></div><div class="line">    rules = (</div><div class="line">        Rule(LxmlLinkExtractor(</div><div class="line">            allow=&#123;<span class="string">'https://www.deviantart.com/whats-hot/[\?\w+=\d+]*'</span>, &#125;),</div><div class="line">            callback=<span class="string">'parse_page'</span>, <span class="comment"># 设置回调函数</span></div><div class="line">            follow=<span class="keyword">True</span> <span class="comment"># 允许爬虫不断地跟随链接进行爬取</span></div><div class="line">        ),</div><div class="line">    )</div><div class="line"></div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36"</span></div><div class="line">                      <span class="string">" (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"</span>,</div><div class="line">        <span class="string">"Referer"</span>: <span class="string">"https://www.deviantart.com/"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment"># 初始化BloomFilter</span></div><div class="line">    filter = BloomFilter(capacity=<span class="number">15000</span>)</div></pre></td></tr></table></figure>
<p><code>DeviantArtImageSpider</code>继承自<code>CrawlSpider</code>，该类是<code>Scrapy</code>最常用的<code>Spider</code>类，它通过<code>Rule</code>类来定义爬取链接的规则，上述代码中使用了正则表达式<code>https://www.deviantart.com/whats-hot/[\?\w+=\d+]*</code>，这个正则表达式将访问每一页的热门页面。</p>
<h3 id="解析热门页面"><a href="#解析热门页面" class="headerlink" title="解析热门页面"></a>解析热门页面</h3><hr>
<p>爬虫启动时将会先访问热门页面，请求得到响应之后会调用回调函数，我们需要在这个回调函数中获取上述分析中得到的<code>&lt;a class = &#39;torpedo-thumb-link&#39;&gt;</code>标签，然后抽取出每张图片的详情页链接。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self, response)</span>:</span></div><div class="line">       soup = self._init_soup(response, <span class="string">'[PREPARING PARSE PAGE]'</span>)</div><div class="line">       <span class="keyword">if</span> soup <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">           <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">	<span class="comment"># 找到所有class为torpedo-thumb-link的a标签	</span></div><div class="line">       all_a_tag = soup.find_all(<span class="string">'a'</span>, class_=<span class="string">'torpedo-thumb-link'</span>)</div><div class="line">       <span class="keyword">if</span> all_a_tag <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> len(all_a_tag) &gt; <span class="number">0</span>:</div><div class="line">           <span class="keyword">for</span> a_tag <span class="keyword">in</span> all_a_tag:</div><div class="line">			<span class="comment"># 提取图片详情页，然后对详情页链接发起请求，并设置回调函数</span></div><div class="line">               detail_link = a_tag[<span class="string">'href'</span>]</div><div class="line">               request = Request(</div><div class="line">                   url=detail_link,</div><div class="line">                   headers=self.headers,</div><div class="line">                   callback=self.parse_detail_page</div><div class="line">               )</div><div class="line">			<span class="comment"># 通过request与response对象来传递Item</span></div><div class="line">               request.meta[<span class="string">'item'</span>] = DeviantArtSpiderItem()</div><div class="line">               <span class="keyword">yield</span> request</div><div class="line">       <span class="keyword">else</span>:</div><div class="line">           self.logger.debug(<span class="string">'[PARSE FAILED] get &lt;a&gt; tag failed'</span>)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># 初始化BeautifulSoup对象</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_init_soup</span><span class="params">(self, response, log)</span>:</span></div><div class="line">       url = response.url</div><div class="line">       self.headers[<span class="string">'Referer'</span>] = url</div><div class="line">       self.logger.debug(log + <span class="string">' '</span> + url)</div><div class="line">       body = requests.get(url, headers=self.headers, timeout=<span class="number">2</span>).content</div><div class="line">       soup = BeautifulSoup(body, <span class="string">'lxml'</span>)</div><div class="line">       <span class="keyword">if</span> soup <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">           self.logger.debug(<span class="string">'[PARSE FAILED] read %s body failed'</span> % url)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">       <span class="keyword">return</span> soup</div></pre></td></tr></table></figure>
<h3 id="解析详情页"><a href="#解析详情页" class="headerlink" title="解析详情页"></a>解析详情页</h3><hr>
<p><code>parse_page()</code>函数会不断地发送请求到详情页链接，解析详情页的回调函数需要处理数据封装到<code>Item</code>，还需要提取详情页中更多图片的详情链接然后发送请求。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">parse_detail_page</span><span class="params">(self, response)</span>:</span></div><div class="line">       <span class="keyword">if</span> response.url <span class="keyword">in</span> self.filter:</div><div class="line">           self.logger.debug(<span class="string">'[REPETITION] already parse url %s '</span> % response.url)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">       soup = self._init_soup(response, <span class="string">'[PREPARING DETAIL PAGE]'</span>)</div><div class="line">       <span class="keyword">if</span> soup <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">           <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">	<span class="comment"># 包装Item并返回	</span></div><div class="line">       <span class="keyword">yield</span> self.packing_item(response.meta[<span class="string">'item'</span>], soup)</div><div class="line">       self.filter.add(response.url)</div><div class="line">       <span class="comment"># 继续抓取当前页中的其他图片</span></div><div class="line">       all_div_tag = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'tt-crop thumb'</span>)</div><div class="line">       <span class="keyword">if</span> all_div_tag <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> len(all_div_tag) &gt; <span class="number">0</span>:</div><div class="line">           <span class="keyword">for</span> div_tag <span class="keyword">in</span> all_div_tag:</div><div class="line">               detail_link = div_tag.find(<span class="string">'a'</span>)[<span class="string">'href'</span>]</div><div class="line">               request = Request(</div><div class="line">                   url=detail_link,</div><div class="line">                   headers=self.headers,</div><div class="line">                   callback=self.parse_detail_page</div><div class="line">               )</div><div class="line">               request.meta[<span class="string">'item'</span>] = DeviantArtSpiderItem()</div><div class="line">               <span class="keyword">yield</span> request</div><div class="line">       <span class="keyword">else</span>:</div><div class="line">           self.logger.debug(<span class="string">'[PARSE FAILED] get &lt;div&gt; tag failed'</span>)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># 封装数据到Item</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">packing_item</span><span class="params">(self, item, soup)</span>:</span></div><div class="line">       self.logger.debug(<span class="string">'[PREPARING PACKING ITEM]..........'</span>)</div><div class="line">       img = soup.find(<span class="string">'img'</span>, class_=<span class="string">'dev-content-full'</span>)</div><div class="line">       img_alt = img[<span class="string">'alt'</span>] <span class="comment"># alt属性中保存了图片名与作者名</span></div><div class="line">       item[<span class="string">'image_name'</span>] = img_alt[:img_alt.find(<span class="string">'by'</span>) - <span class="number">1</span>]</div><div class="line">       item[<span class="string">'author'</span>] = img_alt[img_alt.find(<span class="string">'by'</span>) + <span class="number">2</span>:]</div><div class="line">       item[<span class="string">'image_id'</span>] = img[<span class="string">'data-embed-id'</span>] <span class="comment"># data-embed-id属性保存了图片id</span></div><div class="line">       item[<span class="string">'image_src'</span>] = img[<span class="string">'src'</span>]</div><div class="line">       self.logger.debug(<span class="string">'[PACKING ITEM FINISHED] %s '</span> % item)</div><div class="line">       <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<h3 id="处理Item"><a href="#处理Item" class="headerlink" title="处理Item"></a>处理Item</h3><hr>
<p>对于<code>Item</code>的处理，只是简单地将图片命名与下载到本地。我没有使用多进程或者多线程，也没有使用<code>Scrapy</code>自带的<code>ImagePipeline</code>（自由度不高），有兴趣的童鞋可以自己选择实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem, CloseSpider</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeviantArtSpiderPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, IMAGE_STORE, MAXIMUM_IMAGE_NUMBER)</span>:</span></div><div class="line">        <span class="keyword">if</span> IMAGE_STORE <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> MAXIMUM_IMAGE_NUMBER <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> CloseSpider(<span class="string">'Pipeline load settings failed'</span>)</div><div class="line">        self.IMAGE_STORE = IMAGE_STORE</div><div class="line">        self.MAXIMUM_IMAGE_NUMBER = MAXIMUM_IMAGE_NUMBER</div><div class="line">        <span class="comment"># 记录当前下载的图片数量</span></div><div class="line">        self.image_max_counter = <span class="number">0</span></div><div class="line">        <span class="comment"># 根据图片数量创建文件夹，每1000张在一个文件夹中</span></div><div class="line">        self.dir_counter = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">'Item is null'</span>)</div><div class="line">        dir_path = self.make_dir()</div><div class="line">		<span class="comment"># 拼接图片名称</span></div><div class="line">        image_final_name = item[<span class="string">'image_name'</span>] + <span class="string">'-'</span> + item[<span class="string">'image_id'</span>] + <span class="string">'-by@'</span> + item[<span class="string">'author'</span>] + <span class="string">'.jpg'</span></div><div class="line">        dest_path = os.path.join(dir_path, image_final_name)</div><div class="line">        self.download_image(item[<span class="string">'image_src'</span>], dest_path)</div><div class="line">        self.image_max_counter += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> self.image_max_counter &gt;= self.MAXIMUM_IMAGE_NUMBER:</div><div class="line">            <span class="keyword">raise</span> CloseSpider(<span class="string">'Current downloaded image already equal maximum number'</span>)</div><div class="line">        <span class="keyword">return</span> item</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_dir</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'[IMAGE_CURRENT NUMBER] %d '</span> % self.image_max_counter)</div><div class="line">        <span class="keyword">if</span> self.image_max_counter % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line">            self.dir_counter += <span class="number">1</span></div><div class="line">        path = os.path.abspath(self.IMAGE_STORE)</div><div class="line">        path = os.path.join(path, <span class="string">'crawl_images'</span>)</div><div class="line">        path = os.path.join(path, <span class="string">'dir-'</span> + str(self.dir_counter))</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</div><div class="line">            os.makedirs(path)</div><div class="line">            print(<span class="string">'[CREATED DIR] %s '</span> % path)</div><div class="line">        <span class="keyword">return</span> path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_image</span><span class="params">(self, src, dest)</span>:</span></div><div class="line">        print(<span class="string">'[Thread %s] preparing download image.....'</span> % threading.current_thread().name)</div><div class="line">        response = requests.get(src, timeout=<span class="number">2</span>)</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            <span class="keyword">with</span> open(dest, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">                f.write(response.content)</div><div class="line">                print(<span class="string">'[DOWNLOAD FINISHED] from %s to %s '</span> % (src, dest))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">'[Thread %s] request image src failed status code = %s'</span></div><div class="line">                           % (threading.current_thread().name, response.status_code))</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        settings = crawler.settings</div><div class="line">        <span class="keyword">return</span> cls(settings[<span class="string">'IMAGES_STORE'</span>], settings[<span class="string">'MAXIMUM_IMAGE_NUMBER'</span>])</div></pre></td></tr></table></figure>
<p>在<code>settings.py</code>中注册该<code>Pipeline</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    <span class="string">'deviant_art_spider.pipelines.DeviantArtSpiderPipeline'</span>: <span class="number">300</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="IP代理池"><a href="#IP代理池" class="headerlink" title="IP代理池"></a>IP代理池</h3><hr>
<p>有些网站会有反爬虫机制，为了解决这个问题，每次请求都使用不同的<code>IP</code>代理，有很多网站提供<code>IP</code>代理服务，我们需要写一个爬虫从<a href="http://www.ip3366.net/free/" target="_blank" rel="external">云代理</a>中抓取它提供的免费<code>IP</code>代理（免费<code>IP</code>很不稳定，而且我用了代理之后反而各种请求失败了Orz…）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxiesSpider</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_page_number=<span class="number">10</span>)</span>:</span></div><div class="line">        self.seed = <span class="string">'http://www.ip3366.net/free/'</span></div><div class="line">        self.max_page_number = max_page_number <span class="comment"># 最大页数</span></div><div class="line">        self.crawled_proxies = [] <span class="comment"># 爬到的ip,每个元素都是一个dict</span></div><div class="line">        self.verified_proxies = [] <span class="comment"># 校验过的ip</span></div><div class="line">        self.headers = &#123;</div><div class="line">            <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)'</span></div><div class="line">                          <span class="string">' Chrome/45.0.2454.101 Safari/537.36'</span>,</div><div class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span></div><div class="line">        &#125;</div><div class="line">        self.tocrawl_url = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></div><div class="line">        self.tocrawl_url.append(self.seed)</div><div class="line">        page_counter = <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> self.tocrawl_url:</div><div class="line">            <span class="keyword">if</span> page_counter &gt; self.max_page_number:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            url = self.tocrawl_url.pop()</div><div class="line">            body = requests.get(url=url, headers=self.headers, params=&#123;<span class="string">'page'</span>: page_counter&#125;).content</div><div class="line">            soup = BeautifulSoup(body, <span class="string">'lxml'</span>)</div><div class="line">            <span class="keyword">if</span> soup <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                print(<span class="string">'PARSE PAGE FAILED.......'</span>)</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            self.parse_page(soup)</div><div class="line">            print(<span class="string">'Parse page %s done'</span> % (url + <span class="string">'?page='</span> + str(page_counter)))</div><div class="line">            page_counter += <span class="number">1</span></div><div class="line">            self.tocrawl_url.append(url)</div><div class="line">        self.verify_proxies()</div><div class="line">        self.download()</div><div class="line">	</div><div class="line">	<span class="comment"># 解析页面并封装</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self, soup)</span>:</span></div><div class="line">        table = soup.find(<span class="string">'table'</span>, class_=<span class="string">'table table-bordered table-striped'</span>)</div><div class="line">        tr_list = table.tbody.find_all(<span class="string">'tr'</span>)</div><div class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</div><div class="line">            ip = tr.contents[<span class="number">1</span>].text</div><div class="line">            port = tr.contents[<span class="number">3</span>].text</div><div class="line">            protocol = tr.contents[<span class="number">7</span>].text.lower()</div><div class="line">            url = protocol + <span class="string">'://'</span> + ip + <span class="string">':'</span> + port</div><div class="line">            self.crawled_proxies.append(&#123;url: protocol&#125;)</div><div class="line">            print(<span class="string">'Add url %s to crawled_proxies'</span> % url)</div><div class="line"></div><div class="line">	<span class="comment"># 对ip进行校验</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify_proxies</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Start verify proxies.......'</span>)</div><div class="line">        <span class="keyword">while</span> self.crawled_proxies:</div><div class="line">            self.verify_proxy(self.crawled_proxies.pop())</div><div class="line">        print(<span class="string">'Verify proxies done.....'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify_proxy</span><span class="params">(self, proxy)</span>:</span></div><div class="line">        proxies = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> proxy:</div><div class="line">            proxies[str(proxy[key])] = key <span class="comment"># requests的proxies的格式必须为 协议 : 地址</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> requests.get(<span class="string">'https://www.deviantart.com/'</span>, proxies=proxies, timeout=<span class="number">2</span>).status_code == <span class="number">200</span>:</div><div class="line">                print(<span class="string">'verify proxy success %s '</span> % proxies)</div><div class="line">                self.verified_proxies.append(proxy)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'verify proxy fail %s '</span> % proxies)</div><div class="line">	</div><div class="line">	<span class="comment"># 保存到文件中</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self)</span>:</span></div><div class="line">        current_path = os.getcwd()</div><div class="line">        parent_path = os.path.dirname(current_path)</div><div class="line">        <span class="keyword">with</span> open(parent_path + <span class="string">'\proxies.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">            <span class="keyword">for</span> proxy <span class="keyword">in</span> self.verified_proxies:</div><div class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> proxy.keys():</div><div class="line">                    f.write(key + <span class="string">'\n'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    spider = ProxiesSpider()</div><div class="line">    spider.crawl()</div></pre></td></tr></table></figure>
<p>得到了<code>IP</code>代理池之后，还要在<code>Scrapy</code>的<code>middlewares.py</code>模块定义代理中间件类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="comment"># 每次请求前从IP代理池中选择一个IP代理并进行设置</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        proxy = self.get_proxy(self.make_path())</div><div class="line">        print(<span class="string">'Acquire proxy %s '</span> % proxy)</div><div class="line">        request.meta[<span class="string">'proxy'</span>] = proxy</div><div class="line">	</div><div class="line">	<span class="comment"># 请求失败，重新设置IP代理</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> response.status != <span class="number">200</span>:</div><div class="line">            proxy = self.get_proxy(self.make_path())</div><div class="line">            print(<span class="string">'Response status code is not 200,try reset request proxy %s '</span> % proxy)</div><div class="line">            request.meta[<span class="string">'proxy'</span>] = proxy</div><div class="line">            <span class="keyword">return</span> request</div><div class="line">        <span class="keyword">return</span> response</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_path</span><span class="params">(self)</span>:</span></div><div class="line">        current = os.path.abspath(<span class="string">'.'</span>)</div><div class="line">        parent = os.path.dirname(current)</div><div class="line">        <span class="keyword">return</span> os.path.dirname(parent) + <span class="string">'\proxies.txt'</span></div><div class="line">	</div><div class="line">	<span class="comment"># 从IP代理文件中随机获得一个IP代理地址</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span><span class="params">(self, path)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(path):</div><div class="line">            print(<span class="string">'[LOADING PROXY] loading proxies failed proxies file is not exist'</span>)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">with</span> open(path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">                proxies = f.readlines()</div><div class="line">            <span class="keyword">if</span> proxies:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> random.choice(proxies).strip()</div></pre></td></tr></table></figure>
<p>最后在<code>settings.py</code>中进行注册。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">	<span class="comment"># 这个中间件是由scrapy提供的，并且它是必需的</span></div><div class="line">    <span class="string">'scrapy.contrib.downloadermiddleware.httpproxy.HttpProxyMiddleware'</span>: <span class="number">543</span>, </div><div class="line">	<span class="comment"># 我们自定义的代理中间件</span></div><div class="line">    <span class="string">'deviant_art_spider.middlewares.ProxyMiddleware'</span>: <span class="number">540</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><hr>
<p>我们的图片爬虫已经完成了，执行命令<code>scrapy crawl deviant_art_image_spider</code>，然后尽情搜集图片吧！</p>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fjrmgmpigfg214o0ihe2b.gif" alt=""></p>
<p><strong><a href="https://github.com/SylvanasSun/scrapy-picture-spider" target="_blank" rel="external">想要获得本文中的完整源代码与P站爬虫请点我，顺便求个star…</a></strong></p>
<blockquote>
<p>最近心血来潮想要写爬虫，所以花了点时间过了一遍<code>python</code>语法便匆匆上手了，代码写的有点丑也不够pythonic，各位看官求请吐槽。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是爬虫&quot;&gt;&lt;a href=&quot;#什么是爬虫&quot; class=&quot;headerlink&quot; title=&quot;什么是爬虫?&quot;&gt;&lt;/a&gt;什么是爬虫?&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;如果是没有接触过爬虫的人可能会有些许疑惑，爬虫是个什么东西呢？其实爬虫的概念很简单，在互联网时代,万维
    
    </summary>
    
      <category term="后端" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="python" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/python/"/>
    
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="python" scheme="https://sylvanassun.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="https://sylvanassun.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>探索计算机的结构与核心概念</title>
    <link href="https://sylvanassun.github.io/2017/09/08/2017-09-08-ComputerStructure/"/>
    <id>https://sylvanassun.github.io/2017/09/08/2017-09-08-ComputerStructure/</id>
    <published>2017-09-08T10:00:00.000Z</published>
    <updated>2017-09-09T08:30:18.145Z</updated>
    
    <content type="html"><![CDATA[<p>在我们的生活与工作中所使用到的计算机都是基于冯诺依曼结构实现的,冯诺依曼结构又称冯诺依曼模型或普林斯顿结构,它是一种将程序指令存储器和数据存储器合并在一起的计算机设计概念结构.</p>
<p>冯诺依曼结构起源于<code>EDVAC(Electronic Discrete Variable Automatic Computer)</code>离散变量自动电子计算机,当时冯诺依曼以技术顾问的身份加入<code>EDVAC</code>项目组,负责总结和详细说明<code>EDVAC</code>的逻辑设计,直到1945年6月发表了一份长达101页的报告,这就是计算机史上著名的”101页报告”,该报告明确规定<strong>用二进制替代十进制运算</strong>,并<strong>将计算机分成五大组件</strong>,这一卓越的思想为电子计算机的逻辑结构设计奠定了基础,已成为计算机设计的基本原则.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Von_Neumann_architecture.svg/420px-Von_Neumann_architecture.svg.png" alt="冯诺依曼结构"></p>
<p>冯诺依曼结构具有以下特点: </p>
<ol>
<li><p>数据由一个贯穿整个结构的总线来进行传输.</p>
</li>
<li><p>存储器是按地址访问、线性编址的空间</p>
</li>
<li><p>指令由操作码和地址码组成</p>
</li>
<li><p>数据以二进制编码</p>
</li>
<li><p>一个冯诺依曼结构的计算机必须有存储器,控制单元,运算单元,输入输出设备.</p>
</li>
</ol>
<p>冯诺依曼结构将<code>CPU</code>与存储器分开的做法也并非十全十美,<strong><code>CPU</code>和内存、硬盘等设备的数据传输速度不匹配</strong>成了整体效率的瓶颈,<code>CPU</code>会在等待数据输入的时间中空置,许多技术都是为了解决这个瓶颈,例如<code>DMA(直接内存访问)</code>,在<code>CPU</code>中建立高速缓冲区等.</p>
<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanas.sun@gmail.com)</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文首发自<a href="https://sylvanassun.github.io/">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/09/08/2017-09-08-ComputerStructure/">https://sylvanassun.github.io/2017/09/08/2017-09-08-ComputerStructure/</a></p>
</blockquote>
<h3 id="现代计算机结构"><a href="#现代计算机结构" class="headerlink" title="现代计算机结构"></a>现代计算机结构</h3><hr>
<p><strong>现代计算机是基于冯诺依曼结构的电子计算机</strong>.所谓电子计算机,就是是一种利用电子学原理,根据一系列指令对数据进行处理的机器.</p>
<p>晶体管是组成现代电子计算机的最原始的部件(集成电路中含有数以亿计的晶体管),它是一种半导体材料(导电性可受控制,范围可从绝缘体至导体之间),晶体管可以通过电流的变化,实现电路的切换,这种特性非常适合组成各种逻辑门(与或非)与表示二进制数据.值得一提的是,早期使用继电器实现逻辑门的计算机体积甚至大到要一整个屋子才能放下.</p>
<p>现代计算机的硬件结构如下图,虽然多了很多其他的硬件但与冯诺依曼结构的概念是一致的: </p>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fius74iz98j212e0po778.jpg" alt=""></p>
<h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><hr>
<p><strong>总线是一组贯穿所有硬件结构的电子管道,它携带数据并负责在各个部件间交互传递</strong>.总线传送的数据通常为一个定长的字节块,这个字节块的长度即是总线的位宽,总线位宽越大,数据传输的性能就越高,在32位机器中总线位宽为4个字节,64位机器中为8个字节.</p>
<p>有意思的是总线的英文单词是<code>bus</code>,如果把主板想象成一座城市,那么总线就像是城市中的公共汽车,它按着多种固定线路不停地来回传输数据.</p>
<h3 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I/O设备"></a>I/O设备</h3><hr>
<p><strong><code>I/O(输入/输出)</code>设备是计算机与外部进行联系的桥梁,每个<code>I/O</code>设备都要通过一个控制器或者适配器来与<code>I/O</code>总线相连</strong>.</p>
<p>控制器与适配器的区别只在于它们的封装方式,它们的功能都是为了让<code>I/O</code>设备与<code>I/O</code>总线进行连接: </p>
<ul>
<li><p>控制器是<code>I/O</code>设备本身或者主板上自带的芯片组</p>
</li>
<li><p><code>适配器</code>则是插在主板上的外部设备,</p>
</li>
</ul>
<p>在图中,<code>I/O</code>设备包含鼠标、键盘(输入设备)、显示器(输出设备)、磁盘、网络.</p>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><hr>
<p><strong>内存也叫主存,它是一个临时的存储设备,存储了运行时的数据(程序与程序处理的数据),以供CPU进行处理</strong>.内存是由一组<code>DRAM</code>(动态随机存取存储器)芯片组成的,<code>DRAM</code>是<code>RAM</code>(随机存取存储器)的一种,另一种为<code>SRAM</code>(静态随机存取存储器),<code>SRAM</code>比<code>DRAM</code>速度更快,但造价也更贵,通常用来实现为高速缓存区.</p>
<p><strong>32位操作系统中的<code>CPU</code>的最大寻址空间只有<code>2^32</code>字节</strong>,换算下来最高内存上限为4GB,但由于<code>CPU</code>还要对<code>BIOS</code>和其他硬件等进行寻址(这些优先级更高),所以用户实际可用的内存只有3GB左右.</p>
<p>64位操作系统的<code>CPU</code>最大寻址空间足足有<code>2^64</code>字节,也就是16EB(1024GB等于1TB,1024TB等于1PB,1024PB等于1EB),这已经是一个无法想象的数字了,不过这也不一定是够用的,毕竟谁又能知道未来的数据量会有多庞大呢?</p>
<p>内存具有以下特点: </p>
<ul>
<li>随机存取: 当存储器中的数据被写入或读取时,所需要的时间与数据所在的位置无关(从逻辑上,可以把内存看成一个线性的字节数组,每个字节都有其唯一的地址(索引),这些地址是从零开始的).</li>
</ul>
<ul>
<li>易失性: 如果电源突然断开,<code>RAM</code>中的数据就会全部丢失(磁盘可以将数据持久化地永久保存下来,就算断电也不会丢失数据).</li>
</ul>
<ul>
<li>依赖刷新: <code>RAM</code>使用电容器来存储数据,当电容器充满电之后表示<code>1</code>,未充电则表示<code>0</code>.由于电容器或多或少有漏电的情形,若不作特别处理,电荷会渐渐随时间流失而使数据发生错误.刷新是指重新为电容器充电,弥补流失了的电荷.<code>DRAM</code>的读取即有刷新的功效,但一般的定时刷新并不需要作完整的读取,只需作该芯片的一个列选择,整列的数据即可获得刷新,而同一时间内,所有相关记忆芯片均可同时作同一列选择,因此,在一段期间内逐一做完所有列的刷新,即可完成所有存储器的刷新.需要刷新正好解释了随机存取存储器的易失性.</li>
</ul>
<ul>
<li>对静电敏感: <code>RAM</code>与集成电路一样,对环境的静电荷非常敏感,静电会干扰存储器内电容器的电荷,导致数据流失,甚至烧坏电路.</li>
</ul>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><hr>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/4/46/Intel_Core_I7-920_Boxed_-_14.JPG" alt="Intel I7 CPU"></p>
<p><code>Central Processing Unit</code>中央处理单元,简称<code>CPU</code>或处理器,<code>CPU</code>包含了冯诺依曼结构中的控制器与运算器,它是<strong>解释或执行存储在内存中的指令</strong>的引擎.<code>CPU</code>好比计算机的大脑,从通电开始,直到断电,<code>CPU</code>一直在不断地执行内存中存储的指令.如果没有<code>CPU</code>,那么计算机就会是一台不会动的死机器了.</p>
<p>所谓<strong>指令就是进行指定操作的操作码</strong>,而<strong>指令集架构就是这些操作码的集合</strong>,至于<strong>微架构是一套用于执行指令集的微处理器设计方法,多个不同微架构的<code>CPU</code>可以使用同一套指令集</strong>,一些常见的指令如下: </p>
<ul>
<li>加载: 从内存中复制数据(多少个字节取决于总线位宽)到寄存器,以覆盖寄存器中原来的内容.</li>
</ul>
<ul>
<li>存储: 从寄存器复制数据到内存中的某个位置,以覆盖这个位置上原有的内容.</li>
</ul>
<ul>
<li>操作: 把两个在寄存器中的数据复制到<code>ALU</code>,<code>ALU</code>对这2个数据进行算术运算,并将结果存放到一个寄存器中,以覆盖该寄存器中原有的内容.</li>
</ul>
<ul>
<li>跳转: 从指令本身中抽取数据(地址),将它复制到程序计数器中,以覆盖程序计数器原有的内容.</li>
</ul>
<p>下面以一个简单的算术问题<code>1 + 1</code>来大致了解一下<code>CPU</code>的工作流程: </p>
<ol>
<li><p>这两个变量首先会被存储在内存中.</p>
</li>
<li><p><code>CPU</code>从内存中读取指令并刷新程序计数器(每执行完一个指令都要刷新程序计数器).</p>
</li>
<li><p><code>CPU</code>执行加载指令,通过总线将这两个变量传输(复制)到寄存器.</p>
</li>
<li><p><code>CPU</code>执行运算指令,从寄存器中复制这两个变量进行算术运算,并将结果存到寄存器.</p>
</li>
<li><p><code>CPU</code>执行存储指令,寄存器通过总线将结果存储回内存(覆盖原有位置).</p>
</li>
</ol>
<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><hr>
<p>寄存器是<code>CPU</code>中的一个存储部件,可以认为它是<strong>容量很小但速度飞快的内存</strong>,寄存器是与<code>ALU</code>直接交互的存储设备(不管数据是在内存还是高速缓冲区,<strong>最终都要存到寄存器才能与<code>ALU</code>交互</strong>).</p>
<p>在<code>CPU</code>架构中,拥有多个寄存器,它们分别拥有各自的用途(指令寄存器,整数寄存器,浮点数寄存器等),且<strong>寄存器的数量和它的大小都与指令集架构和机器支持的位宽相关联</strong>(例如<code>x86-64</code>指令集架构(64位指令集架构)中支持64位的通用寄存器与64位整数运算,而<code>x86</code>指令集架构只能支持32位和16位).</p>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><hr>
<p>程序计数器用于指示将要执行的指令序列,并且不断刷新指向新的指令地址,根据<code>CPU</code>的实现不同,程序计数器可能会指向正在运行的指令地址也可能会是下一个指令的地址.</p>
<h4 id="高速缓冲"><a href="#高速缓冲" class="headerlink" title="高速缓冲"></a>高速缓冲</h4><hr>
<p>由于寄存器与内存的速度相差过大,为了避免性能上的浪费,在寄存器与内存之间建立数据的缓存区是很有必要的.</p>
<p>高速缓存是一个比内存更小但更快的存储设备,且使用<code>SRAM</code>实现,现在的<code>CPU</code>一般都配有三级缓存,<code>L1</code>缓存速度最快但存储的容量也最小,<code>L2</code>要比<code>L1</code>慢但存储的容量也更大,以此类推(<strong>上一层的存储器作为下一层存储器的高速缓存</strong>,也就是说,寄存器就是<code>L1</code>的高速缓存,<code>L1</code>则是<code>L2</code>的高速缓存,<code>L2</code>是<code>L3</code>的高速缓存…)….</p>
<p>当<code>CPU</code>发起向内存加载数据的请求时,会先从缓存中查找,如果缓存未命中,才会从内存加载数据,并更新缓存.高速缓存之所以如此有效,主要是利用了<strong>局部性原理,即最近访问过的内存位置以及周边的内存位置很容易会被再次访问</strong>.而高速缓存中就存储着这些经常会被访问的数据.</p>
<p><img src="http://wx1.sinaimg.cn/large/63503acbly1fj1nimvcrvj20ti0gvdjo.jpg" alt=""></p>
<h4 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h4><hr>
<p><code>DMA</code>全称为<code>Direct Memory Access</code>直接内存访问,它<strong>允许其他硬件可以直接访问内存中的数据,而无需让<code>CPU</code>介入处理</strong>.一般会使用到<code>DMA</code>的硬件有显卡、网卡、声卡等.</p>
<p><code>DMA</code>会导致发生缓存不一致的问题,需要额外的进行同步操作保证数据安全.例如,当<code>CPU</code>从内存中读取数据后,会暂时将新数据写入缓存中,但还没有将数据更新回内存,如果在这期间发生了<code>DMA</code>,就会读取到旧的数据.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/4/49/Cache_incoherence_write.svg" alt="缓存一致性问题"></p>
<h4 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h4><hr>
<p>流水线又称管线,是现代<code>CPU</code>中必不可少的优化技术,它<strong>将指令的处理过程拆分为多个步骤,并通过多个硬件处理单元并行执行这些步骤.</strong></p>
<p>管线的具体执行过程很像工厂中的流水线(指令就像在流水线传送带上的产品,各个硬件处理单元就像是在流水线旁进行操作的工人),因此而得名为流水线.</p>
<p>流水线虽然提高了整体的吞吐量,但也是有其缺点的,这是由于流水线依赖于分支预测,如果<code>CPU</code>预测的分支是错误的,那么整个流水线上的所有指令都要取消,然后重新向流水线填充指令,这项操作是很耗费性能的.</p>
<h4 id="超线程"><a href="#超线程" class="headerlink" title="超线程"></a>超线程</h4><hr>
<p><strong>超线程是一种允许一个<code>CPU</code>执行多个控制流的技术</strong>,它复制了<code>CPU</code>中必要的硬件资源(程序计数器、寄存器),来让其在同一时间内处理两个线程的工作.</p>
<p>通过超线程技术,可以让一个<code>CPU</code>核心去执行两个线程,所以一个带有4核(实体核心)的<code>CPU</code>实际上可以执行8个线程(逻辑线程).</p>
<h4 id="多核"><a href="#多核" class="headerlink" title="多核"></a>多核</h4><hr>
<p><strong>多核<code>CPU</code>是指将多个核心(也就是<code>CPU</code>)集成到一个集成电路芯片上.每个核心都可以独立的执行指令,也就是真正意义上的并行执行.</strong></p>
<p>每个核心都拥有独立的寄存器,程序计数器,高速缓存等组件,一般还会有一个所有核心共享的缓存,它是直接与内存连通的缓冲区.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/ec/Dual_Core_Generic.svg" alt=""></p>
<p>多核<code>CPU</code>与多处理器不同,多处理器是将多个<code>CPU</code>封装在多个独立的集成电路芯片中,而多核<code>CPU</code>是所有核心都封装在同一个集成电路芯片中.</p>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><hr>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e1/Operating_system_placement.svg" alt=""></p>
<p><strong>操作系统是用于管理计算机硬件与软件的程序,可以把操作系统看成是应用程序与硬件之间插入的一层软件</strong>,所有应用程序对硬件的操作尝试都必须通过操作系统.</p>
<p>操作系统需要负责管理与配置内存、调度系统资源的优先次序、管理进程与线程、控制I/O设备、操作网络与管理文件系统等事务.可以说操作系统是整个计算机系统中的灵魂所在.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Linux_kernel_System_Call_Interface_and_glibc.svg/800px-Linux_kernel_System_Call_Interface_and_glibc.svg.png" alt="System Call"></p>
<p>操作系统的内核是操作系统最核心的地方,它是代码和数据的一个集合.当应用程序需要操作系统的某些操作时,会执行一条系统调用(<code>system call</code>)指令,这时,控制权会被移交到内核,由内核执行被请求的操作并返回到应用程序.大多数系统的交互式操作都需要在内核完成,例如<code>I/O</code>、进程管理等.</p>
<h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><hr>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Virtual_memory.svg/620px-Virtual_memory.svg.png" alt=""></p>
<p>虚拟内存是计算机系统内存管理的一种技术,<strong>它为每个进程提供了一个假象,即每个进程都在独占地使用内存(一个连续的地址空间)</strong>,而实际上,它通常被分割为多个物理内存碎片,还有部分暂时存储在磁盘存储器上,在需要时进行数据交换.使用虚拟内存会使程序的编写更加容易,对真实的物理内存的使用也会更加有效率.</p>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fj7caakdj7j20bs0eigm6.jpg" alt="进程的虚拟地址空间"></p>
<p>每个进程所能看到的虚拟地址空间大致如上图所示,每个区域都有它专门的作用.</p>
<ul>
<li>内核虚拟内存: 这个区域是为操作系统内核保留的,它不允许应用程序读写这个区域的内容或者直接调用内核代码定义的函数(只有操作系统内核才有权限).</li>
</ul>
<ul>
<li>共享库: 以c语音为例,共享库是用来存放的是像C标准库这样的共享库的代码和数据的区域.</li>
</ul>
<ul>
<li>程序代码和数据: 对于所有进程来说,代码都是从同一固定地址开始,紧接着的是其相对应的数据位置.这片区域就是用来存放代码和数据的.</li>
</ul>
<ul>
<li>堆: <strong>堆内存是指应用程序在运行时进行分配的内存区域,堆可以在运行时动态地扩展和收缩</strong>.像<code>malloc()</code>和<code>free()</code>这样的函数就是在堆内存中进行分配空间与释放,而类似<code>Java</code>这种更高一级的语言提供了自动内存管理和垃圾回收,不需要程序员手动地分配与释放堆内存空间.</li>
</ul>
<ul>
<li>栈: 栈同样也是可以动态地扩展和收缩,它是一个后进先出的容器,<strong>主要用于函数调用</strong>.当一个函数调用时会在栈中分配空间,当调用结束时,这个函数所占用的内存空间会一起释放,无需程序员关心.</li>
</ul>
<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><hr>
<h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><hr>
<p><strong>进程是操作系统对一个正在运行的程序的一种抽象,它是程序的执行实体,是操作系统对资源进行调度的一个基本单位,同时也是线程的容器.</strong></p>
<p>进程跟虚拟内存一样,也是操作系统提供的一种假象,它让每个程序看上去都是在独占地使用<code>CPU</code>、内存和<code>I/O</code>设备.但其实<strong>同一时间只有一个进程在运行</strong>,而我们能够边听歌边上网边码代码的原因其实是操作系统在对进程进行切换,一个进程和另一个进程其实是交错执行的,只不过计算机的速度极快,我们无法感受到而已.</p>
<p>操作系统会保持跟踪进程运行所需的所有状态信息,这种状态,被称为上下文(<code>Context</code>),它包含了许多重要的信息,例如程序计数器和寄存器的当前值等.<strong>当操作系统需要对当前进程进行切换时(转移到另一个进程),会保存当前进程的上下文,然后恢复新进程的上下文</strong>,这时控制权会移交到新进程,新进程会从它上次停下来的地方开始执行,这个过程叫做上下文切换.</p>
<p><strong>操作系统的进程空间可以分为用户空间与内核空间</strong>,也就是用户态与内核态.它们的执行权限不同,一般的应用程序是在用户态中运行的,而当应用程序执行系统调用时就需要切换到内核态,由内核执行.</p>
<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><hr>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/a/a5/Multithreaded_process.svg" alt=""></p>
<p><strong>线程是操作系统所能调度的最小单位,它被包含在进程之中,且一个进程中的所有线程共享进程的资源,一个线程一般被指为进程中的一条单一顺序的控制流.</strong></p>
<p>线程都运行在进程的上下文中,虽然线程共享了进程的资源,但<strong>每条线程都拥有自己的独立空间</strong>,例如函数调用栈、寄存器、线程本地存储.</p>
<p>线程的实现主要有以下三种方式:</p>
<ul>
<li><p>使用内核线程实现: 内核线程就是由操作系统内核直接支持的线程,这种线程由内核来完成线程切换调度,内核通过调度器对线程进行调度,并将线程的任务映射到各个处理器上.<strong>应用程序一般不会直接使用内核线程,而是使用内核线程的一个接口: 轻量级进程,每个轻量级进程都由一个内核线程支持,所以它们的关系是1:1的</strong>.这种线程的实现方式的缺点也很明显,应用程序想要进行任何线程操作都需要进行系统调用,应用程序会在用户态和内核态之间来回切换,消耗的性能资源较多.</p>
</li>
<li><p>使用用户线程实现: <strong>这种方式将线程完全实现在用户空间中,相关的线程操作都在用户态中完成</strong>,这样可以避免切换到内核态,提高了性能.但正因为没有借助系统调用,操作系统只负责对进程分配资源,这些复杂的线程操作与线程调度都需要由用户线程自己处理实现,提高了程序的复杂性.这种实现方式下,一个进程对应多个用户线程,它们是1:N的关系.</p>
</li>
<li><p>混合实现: 这是一种将内核线程与用户线程一起使用的实现方式.在这种实现下,即存在用户线程,也存在轻量级进程.<strong>用户线程依旧是在用户空间中建立的(相关的线程操作也都是在用户空间中),但使用了轻量级进程来当作用户线程与内核线程之间的桥梁,让内核线程提供线程调度和对处理器的映射</strong>.这种实现方式下,用户线程与轻量级进程的数量比例是不定的,它们是N:M的关系.</p>
</li>
</ul>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><hr>
<p>文件也是一个非常重要的抽象概念,<strong>它向应用程序提供了一个统一的视图</strong>,来看待系统中可能含有的所有各式各样的<code>I/O</code>设备.<strong>计算机文件系统通过文件与树形目录的抽象概念来屏蔽磁盘等物理设备所使用的数据块(<code>chunk</code>),让用户在使用文件的时候无需关心它实际的物理地址,用户也不需要管理磁盘上的空间分配,这些都由文件系统负责.</strong></p>
<p>所谓<strong>文件其实也就是一串字节序列</strong>,一个文件想要长期存储,就必须要存放于某种存储设备上,如本地磁盘、U盘.</p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><hr>
<p>如果用图论的方式来看待网络,<strong>其实网络就是一张无向图(需要双向通信),每台计算机都是图中的一个节点(指计算机网络),图的边就是计算机之间互相通信的连接.简单的说,计算机网络其实就是多台计算机进行通信的系统.</strong></p>
<p>网络其实也可以看作是一个<code>I/O</code>设备,当系统从内存中复制一串字节到网络适配器时,数据流经过网络传输到达另一台机器上(这其实就是输出操作),系统也可以读取从其他机器传输过来的数据,并把数据复制到内存中(输入).</p>
<p>互联网(<code>Internet</code>)是计算机网络中的一种(如果按区域划分还有局域网、广域网等),互联网是网络与网络之间组成的巨大的国际网络,这些网络之间以<code>TCP/IP</code>协议相连,连接了全世界上几十亿的设备.</p>
<p>我们日常生活中用浏览器上网浏览网页,其实使用的是万维网(<code>World Wide Web</code>),它是运行在互联网之上提供的一个服务,万维网是一个基于超文本链接组成的系统,并且通过<code>http</code>协议进行访问.</p>
<h4 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h4><hr>
<p><img src="http://wx2.sinaimg.cn/mw690/63503acbly1fjat0ftqf4j20fk0gz758.jpg" alt=""></p>
<p><code>OSI</code>模型全称为开放式系统互联通信参考模型(<code>Open System Interconnection Reference Model</code>),是由国际标准化组织提出的一个<strong>试图使各种计算机在世界范围内进行互联通信的标准框架.</strong></p>
<p>在<code>OSI</code>模型中,<strong>数据经过每一层都会添加该层的协议头(物理层除外)</strong>,当一个数据从一端发送到另一端时,需要经过层层封装.</p>
<ul>
<li><p>应用层: <strong>应用层直接和应用程序通信并提供常见的网络应用服务</strong>.常见的应用层协议有:HTTP,HTTPS,FTP,TELNET,SSH,SMTP,POP3等.</p>
</li>
<li><p>表示层: <strong>表示层为不同终端的上层用户提供数据和信息正确的语法表示变换方法</strong>.该层定义了数据格式及加解密,</p>
</li>
<li><p>会话层: <strong>会话层负责在数据传输中设置和维护网络中两台电脑之间的通信连接</strong>.但<strong>会话层不参与具体的传输</strong>,它只提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制.</p>
</li>
<li><p>传输层: <strong>传输层将数据封装成数据包,提供端对端的数据通信服务</strong>.它还提供面向连接的数据流支持、可靠性、流量控制、多路复用等服务.最著名的传输层协议有<code>TCP</code>与<code>UDP</code>.</p>
</li>
<li><p>网络层: <strong>网络层提供路由和寻址的功能,使两终端系统能够互连且决定最佳路径,并具有一定的拥塞控制和流量控制的能力</strong>.网络层将网络表头(包含网络地址等数据)加到数据包中,网络层协议中最出名的就是<code>IP</code>协议.</p>
</li>
<li><p>数据链路层: <strong>数据链路层在两个网络实体之间提供数据链路连接的创建、维持和释放管理</strong>.它将数据划分为数据帧从一个节点传输到临近的另一个节点,这些节点是通过MAC(主机的物理地址)来进行标识的.</p>
</li>
<li><p>物理层: 物理层是<code>OSI</code>模型中最低的一层,物理层主要负责传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的,电子的,功能的和规范的特性.简单来说,<strong>物理层负责了物理设备之间的通信传输.</strong></p>
</li>
</ul>
<h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><hr>
<p><code>TCP</code>协议全称为传输控制协议(<code>Transmission Control Protocol</code>),由于它是基于<code>IP</code>协议之上的,所以也有人称作为<code>TCP/IP</code>协议.</p>
<p><code>TCP</code>协议是位于传输层的协议,它与同样位于传输层的<code>UDP</code>协议差别很大,它保证了数据包在传输时的安全性(丢包重传),而<code>UDP</code>则只负责发送数据,不保证数据的安全.</p>
<p><code>TCP</code>为了保证不发生丢包,<strong>给每个包标记了一个序号,同时序号也保证了接收端在接收数据包时的顺序.然后接收端对已成功收到的包发回一个相应的确认(<code>ACK</code>)；如果发送端在合理的往返时延(<code>RTT</code>)内未收到确认,那么对应的数据包就被假设为已丢失将会被进行重传</strong>.<code>TCP</code>用一个校验和函数来检验数据是否有错误,在发送和接收时都要计算校验和.</p>
<p><code>TCP</code>协议在连接建立与终止时需要经过三次握手与四次挥手,这个机制主要都是为了提高可靠性.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/3/3f/Connection_TCP.png" alt="三次握手"></p>
<ol>
<li><p>客户端发送SYN（SEQ=x）报文给服务器端,进入SYN_SEND状态,等待服务器端确认.</p>
</li>
<li><p>服务器端收到SYN报文,回应一个SYN （SEQ=y）ACK(ACK=x+1）报文,进入SYN_RECV状态.</p>
</li>
<li><p>客户端收到服务器端的SYN报文,回应一个ACK(ACK=y+1）报文,进入Established状态.</p>
</li>
<li><p>服务器接收到客户端发送的SYN报文,三次握手完成,连接建立.</p>
</li>
</ol>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/2/2d/Deconnection_TCP.png" alt="四次挥手"></p>
<ol>
<li><p>某一端首先调用close,称该端执行“主动关闭”（active close）.该端发送一个FIN报文,表示数据发送完毕(我们称它为<code>A</code>端).</p>
</li>
<li><p>另一端接收到这个FIN信号执行 “被动关闭”（passive close ),并回应一个ACK报文.(我们称它为<code>B</code>端)</p>
</li>
<li><p>一段时间后,<code>B</code>端没有数据发送的任务了,这时它将调用close关闭套接字,然后向<code>A</code>端发送一个FIN信号.</p>
</li>
<li><p><code>A</code>端接收到FIN信号,开始进行关闭连接,并对<code>B</code>端返回一个ACK.</p>
</li>
<li><p><code>B</code>端接收到来自<code>A</code>端的ACK信号,进行关闭连接,四次挥手完毕.</p>
</li>
</ol>
<p><code>TCP/IP</code>将<code>OSI</code>模型抽象成了四层,下图为以<code>HTTP</code>为例的一个数据发送过程.</p>
<p><img src="http://wx4.sinaimg.cn/mw690/63503acbly1fjat0gfjirj20q60s8gno.jpg" alt=""></p>
<h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><hr>
<p>数据包在网络中进行传输时使用了分组交换.分组交换也称为包交换,<strong>它将用户通信的数据划分成多个更小的等长数据段,在每个数据段的前面加上必要的控制信息作为数据段的首部,每个带有首部的数据段就构成了一个分组</strong>.首部指明了该分组发送的地址,当交换机收到分组之后,将根据首部中的地址信息将分组转发到目的地,这个过程就是分组交换.能够进行分组交换的通信网被称为分组交换网.</p>
<p><strong>分组交换的本质就是存储转发</strong>,它将所接受的分组暂时存储下来,在目的方向路由上排队,当它可以发送信息时,再将信息发送到相应的路由上,完成转发.其存储转发的过程就是分组交换的过程.</p>
<h3 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h3><hr>
<p>计算机编程语言拥有多种数据类型, 例如<code>int</code>、<code>char</code>、<code>double</code>等.<strong>但不管是什么类型的数据,在计算机中其实都只是一个字节序列(以8位二进制为一个字节)</strong>.每个机器中对字节序列的排序不大相同,有一些机器按照<strong>从最高有效字节到最低有效字节的顺序存储,这种规则被称为大端法</strong>;还有一些机器<strong>将最低有效字节排在最前面,这种规则被称为小端法</strong>.</p>
<p><strong>计算机使用补码来表示数值,一个数的最高有效位为符号位</strong>(以整数为例,整数占有4字节32位,最高位即最左位,剩下31位用于表示数字,所以整数的有效范围为<code>-2^31 ~ 2^31 - 1</code>),<strong>如果符号位为1,则代表这个值为负,如果符号位为0,则代表这个值为正.负数的补码即是它的反码(在保持符号位不变的前提下按位取反)+1,正数的补码不需要做其他操作,就是它本身的值.</strong></p>
<p><strong>当将一个较小类型的值强转为较大类型时(如<code>byte</code>强转为<code>int</code>),将会发生符号扩展,较小类型不包含的位会以符号位来进行填充</strong>(还是以<code>byte</code>为例,当它强转为<code>int</code>时,高24位会被填充为最高有效位中的数值,如果最高有效位为1,那么高24位都会为1,这时<code>byte</code>原来要表示的值将产生变化,要避免这种情况,可以使用一个低8位为1高24位为0的数,将它与强转后的结果进行<code>&amp;</code>操作,来保留低8位,并消除高24位中的1).</p>
<p>对一个数进行移位操作时,也需要按规则填充丢失的位数.<strong>移位操作分为算术移位与逻辑移位,算术移位会填充符号位,而逻辑移位全部填充0.</strong></p>
<ul>
<li><p>当进行左移操作时,右边空出的位用0补充,高位左移溢出则舍弃该高位.</p>
</li>
<li><p>当进行右移操作时,左边空出的位用符号位来补充(正数补0,负数补1),右边溢出则舍弃.如果使用逻辑移位(<code>Java</code>中为<code>&gt;&gt;&gt;</code>),左边空出的位会用0来补充.</p>
</li>
</ul>
<p>读到这里,可能有人会有疑问,为什么计算机非得使用补码?这主要因为,<strong>计算机中没有减法器只有加法器,而减去一个数其实就是加上一个负数,使用补码进行计算会很方便快速.</strong></p>
<p>我们假设一个指定<code>n</code>为长度的二进制序列,那么它将会有<code>2^n</code>个可能的值,加减法运算都存在上溢出与下溢出的情况,实际上都<strong>等价于<code>模(≡) 2^n</code>的加减法运算.</strong></p>
<p>把范围想象成一个时钟,假设现在时针指向数字3,若要得出6小时前时针指向的数字是几,有两种方法:</p>
<ol>
<li><p>将时针逆时针拨动6格.</p>
</li>
<li><p>将时针顺时针拨动12 - 6 = 6格.</p>
</li>
</ol>
<p>这里的12就是模,3小时-6小时 = 3小时 + (12 - 6)小时.</p>
<p>例如以下例子,模为<code>2^8 = 256</code></p>
<ul>
<li><p>一个8位无符号整数的值的范围是0到255.因此4+254将上溢出,结果为2: <code>(4 + 254) ≡ 258 ≡ 258 - 256 ≡ 2</code></p>
</li>
<li><p>一个8位有符号整数的值的范围是−128到127,则126+125将上溢出,结果为-5: <code>(126+125) ≡ 251 ≡ 251 - 256 ≡ -5</code></p>
</li>
</ul>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><hr>
<p><strong>浮点数是一种对于实数的近似值数值表现法</strong>,由一个有效数字（即尾数）加上幂数来表示,通常是乘以某个基数的整数次指数得到.<strong>但浮点数计算通常伴随着因为无法精确表示而进行的近似或舍入.</strong></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/4/4d/Float_mantissa_exponent.png" alt=""></p>
<p>在计算机使用的浮点数被电气电子工程师协会（IEEE）规范化为IEEE-754,任意一个二进制浮点数V都可以表示成下列形式: </p>
<ul>
<li><p><code>V = (-1)^s * M * 2^E</code></p>
</li>
<li><p>${(-1)}^s$表示符号位,当s=0,V为正数;s=1,V为负数.</p>
</li>
<li><p>M 表示有效数字,$1≤M&lt;2$.</p>
</li>
<li><p>$2^E$表示指数位.</p>
</li>
</ul>
<p>这种表示方式有点类似于科学计数法,在计算机中,通常使用2为基数的幂数来表示.IEEE-754同时还规定了单精度(<code>float</code>)与双精度(<code>double</code>)的区别:</p>
<ul>
<li><p>32位的单精度浮点数,最高1位是符号位s,接着的8位是指数E,剩下的23位是有效数字M.</p>
</li>
<li><p>64位的双精度浮点数,最高1位是符号位s,接着的11位是指数E,剩下的52位为有效数字M.</p>
</li>
</ul>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><hr>
<p><strong>当调用一个函数时,系统会在栈上分配一个空间,存放了函数中的局部变量、函数参数、返回地址等,这样的一个结构被称为栈帧.</strong></p>
<p>函数中的数据的存活状态是后进先出的,而栈正好是满足这一特性的数据结构,这也是为什么计算机使用栈来当作函数调用的存储结构.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  sayHello();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">  hello_world();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello_world</span><span class="params">()</span> </span>&#123;</div><div class="line">  print(<span class="string">"Hello,World"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"> main()  sayHello()  hello_world()  print()</div><div class="line">   -                                main()</div><div class="line">   |</div><div class="line">   +&gt;     -                            sayHello()</div><div class="line">   .      |</div><div class="line">   .      +&gt;   -                              hello_world()</div><div class="line">   .      .    |</div><div class="line">   .      .    +&gt;   -                                  print()</div><div class="line">   .      .    .    |</div><div class="line">   .      .    +   &lt;-                       <span class="keyword">return</span> from print()</div><div class="line">   .      .    |</div><div class="line">   .      +   &lt;-                        <span class="keyword">return</span> from hello_world()</div><div class="line">   .      |</div><div class="line">   +     &lt;-                        <span class="keyword">return</span> from sayHello()</div><div class="line">   |</div><div class="line">   -                             <span class="keyword">return</span> from main()</div></pre></td></tr></table></figure>
<p><strong>在<code>x86-64</code>架构中,栈是向低地址方向生长的,寄存器<code>%rsp</code>指向栈顶</strong>,当一个函数被调用时,将会执行<code>pushq</code>指令,栈帧入栈,栈指针减小(向下生长),当函数返回后,将会执行<code>popq</code>指令,栈帧出栈,释放空间,栈指针增加.如果不断有函数进行调用,栈就会不断向下生长,最终会产生<code>Stack Overflow</code>.</p>
<h3 id="计算机编程语言"><a href="#计算机编程语言" class="headerlink" title="计算机编程语言"></a>计算机编程语言</h3><hr>
<p><strong>计算机编程语言是用来定义计算机程序的语言,它以一种标准化的语法规则来向计算机发出指令</strong>.最早的编程语言是在计算机发明之前产生的,当时是用来控制提花织布机及自动演奏钢琴的动作.如今已经有上千种不同的编程语言,不管是哪种语言,尽管它们的特性各有不同,但写程序的核心都是条件判断、循环、分支(这些也是机器指令的核心).</p>
<p>编程语言依赖于编译器或解释器(所以也分为编译型语言与解释型语言),如果没有对应的编译器/解释器来对语法与语义进行分析并生成对应的机器语言,那么我们所写的代码其实都只是普通的文本字符(编译器/解释器也会对源代码进行一系列优化提高性能).</p>
<p>编译型语言通过编译器直接将源代码翻译成机器语言并生成一个可执行文件(机器语言是不兼容的,如果要到另一台机器上运行,就需要对源代码重新编译);解释型语言通过解释器动态地翻译源代码并直接执行(性能上会比编译型语言直接运行可执行文件要差);虽然大多数的语言既可被编译又可被解译,但大多数仅在一种情况下能够良好运行.</p>
<p><code>Java</code>的编译机制比较特殊,它将<code>Java</code>源代码编译成<code>JVM</code>字节码(通过虚拟机来达到一次编译在所有平台可用),然后<code>JVM</code>对字节码进行解释执行,但对于较热的代码块(频繁调用的函数等),<code>JVM</code>会通过<code>JIT</code>即时编译技术将这些频繁使用的代码块动态地编译成机器语言,提高程序的性能.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们的生活与工作中所使用到的计算机都是基于冯诺依曼结构实现的,冯诺依曼结构又称冯诺依曼模型或普林斯顿结构,它是一种将程序指令存储器和数据存储器合并在一起的计算机设计概念结构.&lt;/p&gt;
&lt;p&gt;冯诺依曼结构起源于&lt;code&gt;EDVAC(Electronic Discrete 
    
    </summary>
    
      <category term="计算机" scheme="https://sylvanassun.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="计算机" scheme="https://sylvanassun.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>编码的那点事儿</title>
    <link href="https://sylvanassun.github.io/2017/08/20/2017-08-20-Encode/"/>
    <id>https://sylvanassun.github.io/2017/08/20/2017-08-20-Encode/</id>
    <published>2017-08-20T04:00:00.000Z</published>
    <updated>2017-08-23T03:08:56.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是编码"><a href="#什么是编码" class="headerlink" title="什么是编码?"></a>什么是编码?</h3><hr>
<p>对于普通人来说,编码总是与一些秘密的东西相关联(加密与解密);对于程序员们来说,编码大多数是指一种用来在机器与人之间传递信息的方式.</p>
<p>但从广义上来讲,<strong>编码是从一种信息格式转换为另一种信息格式的过程,解码则是编码的逆向过程</strong>.接下来举几个使用到编码的例子: </p>
<ul>
<li><p>当我们要把想表达的意思通过一种语言表达出来,其实就是在脑海中对信息进行了一次编码,而对方如果也懂得这门语言,那么就可以用这门语言的解码方法(语法规则)来获得信息(日常的说话交流其实就是在编码与解码).</p>
</li>
<li><p>程序员写程序时,其实就是在将自己的想法通过计算机语言进行编码,而编译器则通过生成抽象语法树,词义分析等操作进行解码,最终交给计算机执行程序(编译器产生的解码结果并不是最终结果,一般为汇编语言,但汇编语言只是CPU指令集的助记符,还需要再进行解码).</p>
</li>
</ul>
<ul>
<li>计算机只有两种状态(0和1),要想存储和传输多媒体信息,就需要用到编码和解码.</li>
</ul>
<ul>
<li>对数据进行压缩,其本质就是以减少自身占用的空间为前提进行重新编码.</li>
</ul>
<p>了解了编码的含义,我们接下来重点探究<code>Java</code>中的字符编码.</p>
<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun/" target="_blank" rel="external">SylvanasSun</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文首发自<a href="https://sylvanassun.github.io/">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/08/20/2017-08-20-Encode/">https://sylvanassun.github.io/2017/08/20/2017-08-20-Encode/</a></p>
</blockquote>
<h3 id="常见的字符集"><a href="#常见的字符集" class="headerlink" title="常见的字符集"></a>常见的字符集</h3><hr>
<p><strong>字符集就是字符与二进制的映射表</strong>,每一个字符集都有自己的编码规则,每个字符所占用的字节也不同(支持的字符越多每个字符占用的字节也就越多).</p>
<ul>
<li><p>ASCII : 美国信息交换标准码(American Standard Code for Information Interchange).学过计算机的都知道大名鼎鼎的<code>ASCII</code>码,它是基于拉丁字母的字符集,总共记有128个字符,主要目的是显示英语.其中每个字符占用一个字节(只用到了低7位).</p>
<p> <img src="http://wx4.sinaimg.cn/large/63503acbly1fith5ayrgdj20n50ct0tj.jpg" alt=""></p>
</li>
</ul>
<ul>
<li><p>ISO-8859-1 : 它是由国际标准化组织(International Standardization Organization)在<code>ASCII</code>基础上制定的8位字符集(仍然是单字节编码).它在<code>ASCII</code>空置的<code>0xA0-0xFF</code>范围内加入了96个字母与符号,支持了欧洲部分国家的语言.</p>
<p> <img src="http://wx1.sinaimg.cn/large/63503acbly1fith5be3u3j20o80bcgmk.jpg" alt=""></p>
</li>
</ul>
<ul>
<li><p>GBK : 如果我们想要让电脑上显示汉字就必须要有支持汉字的字符集,GBK就是这样一个支持汉字的字符集,全称为&lt;&lt;汉字内码扩展规范&gt;&gt;,它的编码方式分为单字节与双字节: <code>00–7F</code>范围内是第一个字节,与<code>ASCII</code>保持一致,之后的双字节中,前一字节是双字节的第一位(范围在<code>81–FE</code>,不包含<code>80</code>和<code>FF</code>),第二字节的一部分在<code>40–7E</code>,其他部分在<code>80–FE</code>.(这里不再介绍<code>GB2313</code>与<code>GB18030</code>,它们都是互相兼容的.)</p>
<p> <img src="http://wx1.sinaimg.cn/large/63503acbly1fith5bqcprj20r00bcjsi.jpg" alt=""></p>
</li>
<li><p>UTF-16 : <code>UTF-16</code>是<code>Unicode(统一码,一种以支持世界上多国语言为目的的通用字符集)</code>的一种实现方式,它把<code>Unicode</code>的抽象码位<strong>映射为<code>2~4</code>个字节来表示</strong>,<strong><code>UTF-16</code>是变长编码(<code>UTF-32是真正的定长编码</code>)</strong>,但在最开始以前<code>UTF-16</code>是用来配合<code>UCS-2(UTF-16的子集,它是定长编码,用2个字节表示所有Unicode字符)</code>使用的,主要原因还是因为当时<code>Unicode</code>只有不到65536个字符,2个字节就足以应对一切了.后来,<code>Unicode</code>支持的字符不断膨胀,2个字节已经不够用了,导致一些只支持<code>UCS-2</code>当做内码的产品很尴尬(<code>Java</code>就是其中之一).</p>
<p> <img src="http://wx4.sinaimg.cn/large/63503acbly1fith5c3ib8j20qg0ck3zq.jpg" alt=""></p>
</li>
<li><p>UTF-8 : <strong><code>UTF-8</code>也是基于<code>Unicode</code>的变长编码表</strong>,它使用<code>1~6</code>个字节来为每个字符进行编码(<code>RFC 3629</code>对<code>UTF-8</code>进行了重新规范,只能使用原来<code>Unicode</code>定义的区域,<code>U+0000~U+10FFFF</code>,也就是说最多只有4个字节),<code>UTF-8</code>完全兼容<code>ASCII</code>,它的编码规则如下:</p>
<ul>
<li><p>在<code>U+0000~U+007F</code>范围内,只需要一个字节(也就是<code>ASCII</code>字符集中的字符).</p>
</li>
<li><p>在<code>U+0080~U+07FF</code>范围内,需要两个字节(希腊文、阿拉伯文、希伯来文等).</p>
</li>
<li><p>在<code>U+0800~U+FFFF</code>范围内,需要三个字节(亚洲汉字等).</p>
</li>
<li><p>其他的字符使用四个字节.</p>
</li>
</ul>
</li>
</ul>
<p><img src="http://wx2.sinaimg.cn/large/63503acbly1fith5cmmpbj20w008ot9i.jpg" alt=""></p>
<h3 id="Java中字符的编解码"><a href="#Java中字符的编解码" class="headerlink" title="Java中字符的编解码"></a>Java中字符的编解码</h3><hr>
<p><code>Java</code>提供了<code>Charset</code>类来完成对字符的编码与解码,主要使用以下函数: </p>
<ul>
<li><code>public static Charset forName(String charsetName)</code> : 这是一个静态工厂函数,它根据传入的字符集名称来返回对应字符集的<code>Charset</code>类.</li>
</ul>
<ul>
<li><code>public final ByteBuffer encode(CharBuffer cb) / public final ByteBuffer encode(String str)</code> : 编码函数,它将传入的字符串或者字符序列进行编码,返回的<code>ByteBuffer</code>是一个字节缓冲区.</li>
</ul>
<ul>
<li><code>public final CharBuffer decode(ByteBuffer bb)</code> : 解码函数,将传入的字节序列解码为字符序列.</li>
</ul>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String text = <span class="string">"Hello,编码!"</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset ASCII = Charset.forName(<span class="string">"ASCII"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset ISO_8859_1 = Charset.forName(<span class="string">"ISO-8859-1"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset GBK = Charset.forName(<span class="string">"GBK"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset UTF_16 = Charset.forName(<span class="string">"UTF-16"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset UTF_8 = Charset.forName(<span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encodeAndPrint</span><span class="params">(Charset charset)</span> </span>&#123;</div><div class="line">	System.out.println(charset.name() + <span class="string">": "</span>);</div><div class="line">	printHex(text.toCharArray(), charset);</div><div class="line">	System.out.println(<span class="string">"----------------------------------"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHex</span><span class="params">(<span class="keyword">char</span>[] chars, Charset charset)</span> </span>&#123;</div><div class="line">	System.out.println(<span class="string">"ForEach: "</span>);</div><div class="line">	ByteBuffer byteBuffer;</div><div class="line">	<span class="keyword">byte</span>[] bytes;</div><div class="line">	<span class="keyword">if</span> (chars != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</div><div class="line">			System.out.print(<span class="string">"char: "</span> + Integer.toHexString(c) + <span class="string">" "</span>);</div><div class="line">			<span class="comment">// 打印出字符编码后对应的字节</span></div><div class="line">			byteBuffer = charset.encode(String.valueOf(c));</div><div class="line">			bytes = byteBuffer.array();</div><div class="line">			System.out.print(<span class="string">"byte: "</span>);</div><div class="line">			<span class="keyword">if</span> (bytes != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes)</div><div class="line">					System.out.print(Integer.toHexString(b &amp; <span class="number">0xFF</span>) + <span class="string">" "</span>);</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有的读者可能会对以上代码中的<code>b &amp; 0xFF</code>产生疑惑,这是为了解决符号扩展问题.在<code>Java</code>中,<strong>如果一个窄类型强转为一个宽类型时,会对多出来的空位进行符号扩展(如果符号位为1,就补1,为0则补0)</strong>.只有<code>char</code>类型除外,<code>char</code>是没有符号位的,所以它永远都是补0.</p>
<p>代码中调用了函数<code>Integer.toHexString()</code>,变量<code>b</code>在运算之前就已经被强转为了<code>int</code>类型,为了让数值不受到破坏,我们让<code>b</code>对<code>0xFF</code>进行了与运算,<code>0xFF</code>是一个低八位都为1的值(其他位都为0),而<code>byte</code>的有效范围只在低八位,所以结果为前24位(除符号位)都变为了0,低八位保留了原有的值.</p>
<p>如果不做这项操作,那么<code>b</code>又恰好是个负数的话,那这个强转后的<code>int</code>的前24位都会变为1,这个结果显然已经破坏了原有的值.</p>
<h3 id="IO中的字符编码"><a href="#IO中的字符编码" class="headerlink" title="IO中的字符编码"></a>IO中的字符编码</h3><hr>
<p><code>Reader</code>与<code>Writer</code>是<code>Java</code>中负责字符输入与输出的抽象基类,它们的子类实现了在各种场景中的字符输入输出功能.</p>
<p>在使用<code>Reader</code>与<code>Writer</code>进行<code>IO</code>操作时,需要指定字符集,如果不显式指定的话会默认使用当前环境的字符集,但我还是推荐显式指定<strong>一致的字符集</strong>,这样才不会出现乱码问题(<code>Reader</code>与<code>Writer</code>指定的字符集不一致或更改了环境导致字符集不一致等).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeChar</span><span class="params">(String content, String filename, String charset)</span> </span>&#123;</div><div class="line">	OutputStreamWriter writer = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(filename);</div><div class="line">		writer = <span class="keyword">new</span> OutputStreamWriter(outputStream, charset);</div><div class="line">		writer.write(content);</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (writer != <span class="keyword">null</span>)</div><div class="line">				writer.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readChar</span><span class="params">(String filename, String charset)</span> </span>&#123;</div><div class="line">	InputStreamReader reader = <span class="keyword">null</span>;</div><div class="line">	StringBuilder sb = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(filename);</div><div class="line">		reader = <span class="keyword">new</span> InputStreamReader(inputStream, charset);</div><div class="line">		<span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">		sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">while</span> ((count = reader.read(buf)) != -<span class="number">1</span>)</div><div class="line">			sb.append(buf, <span class="number">0</span>, count);</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (reader != <span class="keyword">null</span>)</div><div class="line">				reader.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Web中的字符编码"><a href="#Web中的字符编码" class="headerlink" title="Web中的字符编码"></a>Web中的字符编码</h3><hr>
<p>在<code>Web</code>开发中,乱码也是经常存在的一个问题,主要体现在请求的参数和返回的响应结果,最头疼的是不同的浏览器的默认编码甚至还不一致.</p>
<p><code>Java</code>以<code>Http</code>的请求与响应抽象出了<code>Request</code>和<code>Response</code>两个对象,只要保持<strong>请求与响应的编码一致</strong>就能避免乱码问题.</p>
<p><code>Request</code>提供了<code>setCharacterEncoding(String encode)</code>函数来改变请求体的编码,一般通过写一个过滤器来统一对所有请求设置编码.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure>
<p><code>Response</code>提供了<code>setCharacterEncoding(String encode)</code>与<code>setHeader(String name,String value)</code>两个函数,它们都可以设置响应的编码.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line"><span class="comment">// 设置响应头的编码信息,同时也告知了浏览器该如何解码</span></div><div class="line">response.setHeader(<span class="string">"Content-Type"</span>,<span class="string">"text/html;charset=UTF-8"</span>);</div></pre></td></tr></table></figure>
<p>还有一种更简便的方式,直接使用<code>Spring</code>提供的<code>CharacterEncodingFilter</code>,该过滤器就是用来统一编码的.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>CharacterEncodingFilter</code>的实现如下: </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String encoding;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forceEncoding = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharacterEncodingFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEncoding</span><span class="params">(String encoding)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.encoding = encoding;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceEncoding</span><span class="params">(<span class="keyword">boolean</span> forceEncoding)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.forceEncoding = forceEncoding;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.encoding != <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.forceEncoding || request.getCharacterEncoding() == <span class="keyword">null</span>)) &#123;</div><div class="line">            request.setCharacterEncoding(<span class="keyword">this</span>.encoding);</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.forceEncoding) &#123;</div><div class="line">                response.setCharacterEncoding(<span class="keyword">this</span>.encoding);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为什么Char在Java中占用两个字节"><a href="#为什么Char在Java中占用两个字节" class="headerlink" title="为什么Char在Java中占用两个字节?"></a>为什么Char在Java中占用两个字节?</h3><hr>
<p>众所周知,在<code>Java</code>中一个<code>char</code>类型占用两个字节,那么这是为什么呢?这是因为<code>Java</code>使用了<code>UTF-16</code>当作内码.</p>
<p><strong>内码(<code>Internal Encoding</code>)就是程序内部所使用的编码</strong>,主要在于编程语言实现其<code>char</code>和<code>String</code>类型在内存中使用的内部编码.与之相对的就是<strong>外码(<code>External Encoding</code>),它是程序与外部交互时使用的字符编码</strong>.</p>
<p>值得一提的是,当初<code>UTF-16</code>是配合<code>UCS-2</code>使用的,后来<code>Unicode</code>支持的字符不断增多,<code>UTF-16</code>也不再只当作一个定长的2字节编码使用了,也就是说,<strong><code>Java</code>中的一个<code>char</code>其实并不一定能代表一个完整的<code>UTF-16</code>字符.</strong></p>
<p><code>String.getBytes()</code>可以将该String的内码转换为指定的外码并返回这个编完码的字节数组(无参数版使用当前平台的默认编码).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">	String text = <span class="string">"码"</span>;</div><div class="line">	<span class="keyword">byte</span>[] bytes = text.getBytes(<span class="string">"UTF-8"</span>); </div><div class="line">	System.out.println(bytes.length); <span class="comment">// 输出3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Java</code>还规定<code>char</code>与<code>String</code>类型的序列化是使用<code>UTF-8</code>当作外码的,<code>Java</code>中的<code>Class</code>文件中的字符串常量与符号名也都规定使用<code>UTF-8</code>.这种设计是为了平衡运行时的时间效率与外部存储的空间效率所做的取舍.</p>
<p>在<code>SUN JDK6</code>中,有一条命令<code>-XX:+UseCompressedString</code>.该命令可以让<code>String</code>内部存储字符内容可能用<code>byte[]</code>也可能用<code>char[]</code>: 当整个字符串所有字符处于<code>ASCII</code>字符集范围内时,就使用<code>byte[]</code>(使用了<code>ASCII</code>编码)来存储,如果有任一字符超过了<code>ASCII</code>的范围,就退回到使用<code>char[]</code>(<code>UTF-16</code>编码)来存储.但是这个功能实现的并不理想,所以没有包含在<code>Open JDK6</code>/<code>Open JDK7</code>/<code>Oracle JDK7</code>等后续版本中.</p>
<p><code>JavaScript</code>也使用了<code>UTF-16</code>作为内码,其实现也广泛应用了<code>CompressedString</code>的思想,主流的<code>JavaScript</code>引擎中都会尽可能使用<code>ASCII</code>内码的字符串,不过这些细节都是对外隐藏的..</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="external">ASCII - Wikipedia</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1" target="_blank" rel="external">ISO/IEC 8859-1 - Wikipedia</a></p>
</li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/GBK" target="_blank" rel="external">GBK - Wikipedia</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="external">UTF-16 - Wikipedia</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/UTF-8" target="_blank" rel="external">UTF-8 - Wikipedia</a></li>
</ul>
<ul>
<li><a href="https://www.zhihu.com/question/27562173/answer/37188642" target="_blank" rel="external">Java 语言中一个字符占几个字节？ - RednaxelaFX的回答</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是编码&quot;&gt;&lt;a href=&quot;#什么是编码&quot; class=&quot;headerlink&quot; title=&quot;什么是编码?&quot;&gt;&lt;/a&gt;什么是编码?&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;对于普通人来说,编码总是与一些秘密的东西相关联(加密与解密);对于程序员们来说,编码大多数是指一种用来
    
    </summary>
    
      <category term="后端" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
      <category term="Java" scheme="https://sylvanassun.github.io/tags/Java/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="后端" scheme="https://sylvanassun.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="编码" scheme="https://sylvanassun.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>B树的那点事儿</title>
    <link href="https://sylvanassun.github.io/2017/08/13/2017-08-13-BTrees/"/>
    <id>https://sylvanassun.github.io/2017/08/13/2017-08-13-BTrees/</id>
    <published>2017-08-13T04:00:00.000Z</published>
    <updated>2017-08-13T04:43:26.309Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><hr>
<p>B树(<code>B-Tree</code>)是一种自平衡的树,能够保证数据有序.同时它还保证了在查找、插入、删除等操作时性能都能保持在$O(log\;n)$.需要注意的一点是,<strong><code>B-Tree</code>并不是一棵自平衡的二叉查找树,它拥有多个分叉,且为大块数据的读写操作做了优化,同时它也可以用来描述外部存储(支持对保存在磁盘或者网络上的符号表进行外部查找).</strong></p>
<p>在当今的互联网环境下,数据量已经大到无法想象,而能够在巨型数据集合中快速地进行查找操作是非常重要的,而<code>B-Tree</code>的神奇之处正在于: 只需要使用4~5个指向一小块数据的引用即可有效支持在数百亿甚至更多元素的符号表中进行查找和插入等操作.</p>
<p><code>B-Tree</code>的主要应用在于文件系统与数据库系统,例如<code>Mysql</code>中的<code>InnoDB</code>存储引擎就使用到了<code>B-Tree</code>来实现索引.</p>
<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文转发自<a href="https://sylvanassun.github.io">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/08/13/2017-08-13-BTrees/">https://sylvanassun.github.io/2017/08/13/2017-08-13-BTrees/</a></p>
</blockquote>
<h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><hr>
<p>我们使用页来表示一块连续的数据,访问一页的数据需要将它读入本地内存.一个页可能是本地计算机上的一个文件,也可能是服务器上的某个文件的一部分等等.页的访问次数(无论读写)即是外部查找算法的成本模型.</p>
<p>首先,构造一棵<code>B-Tree</code><strong>不会将数据保存在树中</strong>,而是会构造一棵<strong>由键的副本组成的树,每个副本都关联着一条链接</strong>.这种方法能够将索引与符号表进行分离,同时我们还需要遵循以下的规定: </p>
<ul>
<li>选择一个参数<code>M</code>来构造一棵多向树(<code>M</code>一般为偶数),每个节点最多含有<code>M - 1</code>对键和链接.</li>
</ul>
<ul>
<li>每个节点最少含有<code>M / 2</code>对键和链接,根节点例外(它最少可以含有2对).</li>
</ul>
<ul>
<li>.使用<code>M</code>阶的<code>B-Tree</code>来指定<code>M</code>的值,例如: 在一棵4阶<code>B-Tree</code>中,每个节点都含有至少2对至多3对.</li>
</ul>
<ul>
<li><code>B-Tree</code>含有两种不同类型的节点,内部节点与外部节点.</li>
</ul>
<ul>
<li>内部节点含有与页相关联的键的副本: 每个键都与一个节点相关联(一条链接),以此节点为根的子树中,所有的键都大于等于与此节点关联的键,但小于原内部节点中更大的键(如果存在的话).</li>
</ul>
<ul>
<li>外部节点含有指向实际数据的引用: 每个键都对应着实际的值,外部节点就是一张普通的符号表.</li>
</ul>
<p><img src="http://wx3.sinaimg.cn/large/63503acbly1fihx6539d3j21kw0m9adu.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// max children per B-tree node = M - 1</span></div><div class="line"><span class="comment">// must be even and greater than 2</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">// root of the B-tree</span></div><div class="line"><span class="keyword">private</span> Node root;</div><div class="line"></div><div class="line"><span class="comment">// height of the B-tree</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> height;</div><div class="line"></div><div class="line"><span class="comment">// number of key-value paris int the B-tree</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line"></div><div class="line"><span class="comment">// B-tree node data type</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> children_length;</div><div class="line">	<span class="keyword">private</span> Entry[] children = <span class="keyword">new</span> Entry[M];</div><div class="line"></div><div class="line">	<span class="comment">// create a node with k children</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">		children_length = k;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// internal nodes : only use key and next</span></div><div class="line"><span class="comment">// external nodes : only use key and value</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Comparable key;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object value;</div><div class="line">	<span class="keyword">private</span> Node next;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Entry</span><span class="params">(Comparable key, Object value, Node next)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.key = key;</div><div class="line">		<span class="keyword">this</span>.value = value;</div><div class="line">		<span class="keyword">this</span>.next = next;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><hr>
<p>在<code>B-Tree</code>中进行查找操作每次都会结束于一个外部节点.在查找时,<strong>从根节点开始,根据被查找的键来选择当前节点中的适当区间并根据对应的链接从一个节点移动到下一层节点</strong>.最终,查找过程会到达树底的一个含有键的页(也就是外部节点),如果被查找的键在该页中,查找命中并结束,如果不在,则查找未命中.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</div><div class="line">	validateKey(key, <span class="string">"argument key to get() is null."</span>);</div><div class="line">	<span class="keyword">return</span> search(root, key, height);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Value <span class="title">search</span><span class="params">(Node x, Key key, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</div><div class="line">		Entry[] children = x.children;</div><div class="line">		<span class="keyword">int</span> children_length = x.children_length;</div><div class="line"></div><div class="line">		<span class="comment">// 当树的高度已经递减为0时,也就到达了树的底部(一个外部节点)</span></div><div class="line">		<span class="comment">// 遍历当前节点的每个键进行比较,如果找到则查找命中返回对应的值.</span></div><div class="line">		<span class="keyword">if</span> (height == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; children_length; j++) &#123;</div><div class="line">				<span class="keyword">if</span> (eq(key, children[j].key))</div><div class="line">					<span class="keyword">return</span> (Value) children[j].value;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 当还是内部节点时,根据键来查找适当的区间</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; children_length; j++) &#123;</div><div class="line">				<span class="keyword">if</span> (j + <span class="number">1</span> == children_length || less(key, children[j + <span class="number">1</span>].key)) &#123;</div><div class="line">					<span class="comment">// 找到适当的区间后,移动到下一层节点</span></div><div class="line">					x = children[j].next;</div><div class="line">					height--;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><hr>
<p>插入操作也要先从根节点不断递归地查找到合适的区间,但需要注意一点,如果查找到的外部节点已经满了怎么办呢?</p>
<p>解决方法也很简单,我们允许被插入的节点暂时”溢出”,然后在递归调用自底向上不断地进行分裂.例如:当<code>M</code>为5时,根节点溢出为<code>6-节点</code>,只需要将它分裂为连接了两个<code>3-节点</code>的<code>2-节点</code>.即将一个<code>M-</code>的父节点<code>k</code>分裂为连接着两个<code>(M / 2)-</code>节点的<code>(k + 1)-</code>节点.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value value)</span> </span>&#123;</div><div class="line">	validateKey(key, <span class="string">"argument key to put() is null."</span>);</div><div class="line"></div><div class="line">	Node u = insert(root, key, value, height);</div><div class="line">	N++;</div><div class="line">	<span class="keyword">if</span> (u == <span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	<span class="comment">// need to split root</span></div><div class="line">	Node t = <span class="keyword">new</span> Node(<span class="number">2</span>);</div><div class="line">	t.children[<span class="number">0</span>] = <span class="keyword">new</span> Entry(root.children[<span class="number">0</span>].key, <span class="keyword">null</span>, root);</div><div class="line">	t.children[<span class="number">1</span>] = <span class="keyword">new</span> Entry(u.children[<span class="number">0</span>].key, <span class="keyword">null</span>, u);</div><div class="line">	root = t;</div><div class="line">	height++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">insert</span><span class="params">(Node x, Key key, Value value, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	Entry t = <span class="keyword">new</span> Entry(key, value, <span class="keyword">null</span>);</div><div class="line">	Entry[] children = x.children;</div><div class="line">	<span class="keyword">int</span> children_length = x.children_length;</div><div class="line"></div><div class="line">	<span class="comment">// external node</span></div><div class="line">	<span class="keyword">if</span> (height == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; children_length; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (less(key, children[j].key))</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// internal node</span></div><div class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; children_length; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (j + <span class="number">1</span> == children_length || less(key, children[j + <span class="number">1</span>].key)) &#123;</div><div class="line">				<span class="comment">// 找到合适的区间后继续递归调用</span></div><div class="line">				Node u = insert(children[j++].next, key, value, height - <span class="number">1</span>);</div><div class="line">				<span class="comment">// 如果下一层没有进行过分裂操作,直接返回null</span></div><div class="line">				<span class="keyword">if</span> (u == <span class="keyword">null</span>)</div><div class="line">					<span class="keyword">return</span> <span class="keyword">null</span>;	</div><div class="line">				t.key = u.children[<span class="number">0</span>].key;</div><div class="line">				t.next = u;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将j之后的元素全部右移(为了腾出j的插入位置)</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = children_length; i &gt; j; i--) &#123;</div><div class="line">		children[i] = children[i - <span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	children[j] = t;</div><div class="line">	x.children_length++;</div><div class="line">	<span class="keyword">if</span> (x.children_length &lt; M)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> split(x); <span class="comment">// 如果空间已满,进行分裂</span></div><div class="line">&#125;	</div><div class="line"></div><div class="line"> <span class="comment">// 将x分裂为两个含有new_length对键的节点</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">split</span><span class="params">(Node x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> new_length = M / <span class="number">2</span>;</div><div class="line">	Node t = <span class="keyword">new</span> Node(new_length);</div><div class="line">	x.children_length = new_length;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; new_length; j++)</div><div class="line">		t.children[j] = x.children[new_length + j];</div><div class="line">	<span class="keyword">return</span> t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="external">Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/B-tree" target="_blank" rel="external">B-tree - Wikipedia</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;B树(&lt;code&gt;B-Tree&lt;/code&gt;)是一种自平衡的树,能够保证数据有序.同时它还保证了在查找、插入、删除等操作时性能都能
    
    </summary>
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/categories/Algorithms/"/>
    
      <category term="数据结构" scheme="https://sylvanassun.github.io/categories/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Tree" scheme="https://sylvanassun.github.io/categories/Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/"/>
    
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/tags/Algorithms/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="数据结构" scheme="https://sylvanassun.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Tree" scheme="https://sylvanassun.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>揭秘HTTPS的&quot;秘密&quot;</title>
    <link href="https://sylvanassun.github.io/2017/08/06/2017-08-06-DigestHttps/"/>
    <id>https://sylvanassun.github.io/2017/08/06/2017-08-06-DigestHttps/</id>
    <published>2017-08-06T10:00:00.000Z</published>
    <updated>2017-08-06T12:20:31.267Z</updated>
    
    <content type="html"><![CDATA[<p>在说<code>https</code>之前,我们先了解一下<code>http</code>,以及为什么要使用<code>https</code>.</p>
<p><code>http(Hyper Text Transfer  Protocol)</code>超文本传输协议是一种用于分布式、协作式和超媒体信息系统的应用层协议,它是<code>TCP/IP</code>的上层协议,同时它也是万维网(万维网不等同于互联网,它只是基于互联网的一个服务)的数据通信的基础.</p>
<p><code>http</code>协议是客户端浏览器与其他程序或<code>Web</code>服务器之间交互的应用层通讯协议.但它也有一个致命的缺点:<strong><code>http</code>协议是明文传输协议</strong>,在传输信息的过程中并没有进行任何加密,通信的双方也没有任何的认证,这是非常不安全的,如果在通信过程中被中间人进行劫持、监听、篡改,会造成个人隐私泄露等严重的安全问题.</p>
<p>举一个现实中的例子来说,假设小李要给小张寄信,如果信件在运输的过程中没有任何安全保护,那么很可能会被邮递员(也就是中间人)窃取其中的内容,甚至于修改内容.</p>
<p><code>https</code>就是用于解决这样的安全问题的,它的全称为<code>Hypertext Transfer Protocol Secure</code>,它在<code>http</code>的基础上添加了<code>SSL(安全套接字层)</code>层来保证传输数据的安全问题.</p>
<p><img src="http://wx2.sinaimg.cn/mw690/63503acbly1fia1cscjslj20lb0a7443.jpg" alt=""></p>
<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文转发自<a href="https://sylvanassun.github.io">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/08/06/2017-08-06-DigestHttps/">https://sylvanassun.github.io/2017/08/06/2017-08-06-DigestHttps/</a></p>
</blockquote>
<p><code>https</code>提供了端对端的加密,而且不仅对数据进行了加密,还对数据完整性提供了保护.不过在讲解<code>https</code>的加密方式之前,我们需要先了解一下加密算法.</p>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><hr>
<p>对称加密的基本思想是: 通信双方使用同一个密钥(或者是两个可以简单地互相推算的密钥)来对明文进行加密与解密.</p>
<p>常见的对称加密算法有DES、3DES、AES、Blowfish、IDEA、RC5、RC6.</p>
<p><img src="http://wx3.sinaimg.cn/mw690/63503acbly1fia3vwjvcdj20j208ydg4.jpg" alt=""></p>
<p>对称加密看起来很美好,但是密钥要怎么发送过去呢?如果直接发送过去,被中间人截获了密钥岂不是白费工夫.</p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><hr>
<p>非对称加密也叫公开密钥加密,它使用了两个密钥,一个为公钥,一个为私钥,当一个用作于加密的时候,另一个则用作解密.</p>
<p>这两个密钥就算被其他人知道了其中一个也不能凭借它计算出另一个密钥,所以可以公开其中一个密钥(也就是公钥),不公开的密钥为私钥.</p>
<p><img src="http://wx2.sinaimg.cn/mw690/63503acbly1fia4nut76kj20l50cht97.jpg" alt=""></p>
<p>如果服务器想发送消息给客户端,只需要用客户端的公钥加密,然后客户端用它自己的私钥进行解密.</p>
<p>常见的非对称加密算法有RSA、DSA、ECDSA、 DH、ECDHE.</p>
<p>我们以<code>DH</code>算法为例,了解一下非对称加密的魅力.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/13/Diffie-Hellman-Schl%C3%BCsselaustausch.svg/800px-Diffie-Hellman-Schl%C3%BCsselaustausch.svg.png" alt=""></p>
<ol>
<li><p><code>Alice</code>要与<code>Bob</code>进行通信,他们协定了一组可以公开的质数$p=23$,$g=5$.</p>
</li>
<li><p><code>Alice</code>选择了一个不公开的秘密数$a=6$,并计算$A = {g^a} \; {mod} \; {p} = {5^6} \; {mod} \; {23}  = 8$并发送给<code>Bob</code>.</p>
</li>
<li><p><code>Bob</code>选择了一个不公开的秘密数$b=15$,并计算$B = {g^b} \; {mod} \; {p} = {5^{15}} \; {mod} \; {23} = 19$并发送给<code>Alice</code></p>
</li>
<li><p><code>Alice</code> 计算$S = {B^a} \; {mod} \; {p}  = {19^6} \; {mod} \; {23} = 2$</p>
</li>
<li><p><code>Bob</code>计算$S = {A^b} \;  {mod} \; {p} = {8^{15}} \; {mod} \; {23} = 2$</p>
</li>
<li><p><code>Alice</code>与<code>Bob</code>得到了同样的值,因此${g^{ab}} \; {mod} \; {p} = {g^{ba}} \; {mod} \; {p}$</p>
</li>
</ol>
<h3 id="对称加密-非对称加密"><a href="#对称加密-非对称加密" class="headerlink" title="对称加密+非对称加密"></a>对称加密+非对称加密</h3><hr>
<p>尽管非对称加密如此奇妙,但它加解密的效率比对称加密要慢多了.那我们就将对称加密与非对称加密结合起来,取其精华,去其槽粕.</p>
<p>方法很简单,其中一方先自己生成一个对称加密密钥,然后通过非对称加密的方式来发送这个密钥,这样双方之后的通信就可以用对称加密这种高效率的算法进行加解密了.</p>
<h3 id="Certificate-Authority"><a href="#Certificate-Authority" class="headerlink" title="Certificate Authority"></a>Certificate Authority</h3><hr>
<p>对称加密与非对称加密结合使用的方法虽然能够保证了通信过程的安全,但也引发了如下问题: </p>
<ul>
<li>客户端要如何获取到服务器的公钥?</li>
</ul>
<ul>
<li>如果公钥在发送过程被中间人拦截,然后中间人发送自己的公钥给客户端,客户端该如何确认?</li>
</ul>
<p>解决方法依是通过一个权威的<code>CA(Certificate Authority)</code>证书中心,它来负责颁发证书,这个证书包含了如下等内容: </p>
<ul>
<li>证书的发布机构.</li>
</ul>
<ul>
<li>证书的有效期</li>
</ul>
<ul>
<li>公钥</li>
</ul>
<ul>
<li>证书所有人</li>
</ul>
<ul>
<li>数字签名</li>
</ul>
<p>数字签名是用来验证数据完整性的,首先将公钥与个人信息用一个<code>Hash</code>算法生成一个消息摘要,<code>Hash</code>算法是不可逆的,且只要内容发生变化,那生成的消息摘要将会截然不同.然后<code>CA</code>再用它的私钥对消息摘要加密,最终形成数字签名.</p>
<p>当客户端接收到证书时,只需要用同样的<code>Hash</code>算法再次生成一个消息摘要,然后用<code>CA</code>的公钥对证书进行解密,之后再对比两个消息摘要就能知道数据有没有被篡改过了.</p>
<p>那么<code>CA</code>的公钥又要从哪里来呢?这似乎陷入了一个鸡生蛋,蛋生鸡的悖论,其实<code>CA</code>也有证书来证明自己,而且<code>CA</code>证书的信用体系就像一棵树的结构,上层节点是信用高的<code>CA</code>同时它也会对底层的<code>CA</code>做信用背书,操作系统中已经内置了一些根证书,所以相当于你已经自动信任了它们(需要注意误安装一些非法或不安全的证书).</p>
<h3 id="Https的交互过程"><a href="#Https的交互过程" class="headerlink" title="Https的交互过程"></a>Https的交互过程</h3><hr>
<p><img src="http://wx2.sinaimg.cn/mw690/63503acbly1fia7yy31rdj20in0o7wfy.jpg" alt=""></p>
<ul>
<li>浏览器对服务器发送了一次请求.</li>
</ul>
<ul>
<li>服务器发送证书.</li>
</ul>
<ul>
<li>浏览器读取证书中的所有人,有效期等信息并进行校验.</li>
</ul>
<ul>
<li>浏览器查找操作系统中内置的已经信任的根证书,并对服务器发来的证书进行验证.</li>
</ul>
<ul>
<li>如果找不到,浏览器报错,服务器发来的证书是不可信任的.</li>
</ul>
<ul>
<li>如果找到,浏览器会从操作系统中取出<code>CA</code>的公钥,然后对服务器发来的证书中的数字签名进行解密.</li>
</ul>
<ul>
<li>浏览器使用相同的<code>Hash</code>算法计算出消息摘要,然后对数字签名中的消息摘要进行校对.</li>
</ul>
<ul>
<li>如果结果一致,证书合法.</li>
</ul>
<ul>
<li>之后浏览器就可以生成对称加密的密钥然后用非对称加密的方式发送给服务器,之后的通信就都是安全的了.</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr>
<p>现在国内外的大型网站基本都已经全站启用了<code>Https</code>,虽然相对于<code>Http</code>多了许多用于加密的流程,但为了数据的安全这点牺牲是必要的,<code>Https</code>也将是未来互联网的发展趋势.</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><a href="https://en.wikipedia.org/wiki/HTTPS" target="_blank" rel="external">HTTPS - Wikipedia</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="external">Public-key cryptography - Wikipedia</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange" target="_blank" rel="external">Diffie–Hellman key exchange - Wikipedia</a></li>
</ul>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513779&amp;idx=1&amp;sn=a1de58690ad4f95111e013254a026ca2&amp;chksm=80d67b70b7a1f26697fa1626b3e9830dbdf4857d7a9528d22662f2e43af149265c4fd1b60024#rd" target="_blank" rel="external">一个故事讲完https</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在说&lt;code&gt;https&lt;/code&gt;之前,我们先了解一下&lt;code&gt;http&lt;/code&gt;,以及为什么要使用&lt;code&gt;https&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http(Hyper Text Transfer  Protocol)&lt;/code&gt;超文本传输协
    
    </summary>
    
      <category term="网络" scheme="https://sylvanassun.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="http" scheme="https://sylvanassun.github.io/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="网络" scheme="https://sylvanassun.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="http" scheme="https://sylvanassun.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Java中的闭包之争</title>
    <link href="https://sylvanassun.github.io/2017/07/30/2017-07-30-JavaClosure/"/>
    <id>https://sylvanassun.github.io/2017/07/30/2017-07-30-JavaClosure/</id>
    <published>2017-07-30T10:00:00.000Z</published>
    <updated>2017-07-30T13:15:23.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>闭包一直都是<code>Java</code>社区中争论不断的话题,很多语言例如<code>JavaScript</code>,<code>Ruby</code>,<code>Python</code>等都支持闭包这个语言特性,闭包功能强大且灵活,<code>Java</code>并没有显式地支持它,但其实<code>Java</code>中也存在着所谓的”闭包”.</p>
</blockquote>
<hr>
<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文转发自<a href="https:/sylvanassun.github.io" target="_blank" rel="external">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/07/30/2017-07-30-JavaClosure/">https://sylvanassun.github.io/2017/07/30/2017-07-30-JavaClosure/</a></p>
</blockquote>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><hr>
<p>定义一个闭包的要点如下: </p>
<ul>
<li>一个依赖于外部环境的<code>自由变量</code>的函数.</li>
</ul>
<ul>
<li>这个函数能够访问外部环境的<code>自由变量</code>.</li>
</ul>
<p>也就是说,<strong>外部环境持有内部函数所依赖的<code>自由变量</code>,由此对内部函数形成了闭包.</strong></p>
<h4 id="自由变量"><a href="#自由变量" class="headerlink" title="自由变量"></a>自由变量</h4><hr>
<p>那么什么是<code>自由变量</code>呢?<strong><code>自由变量</code>就是在函数自身作用域之外的变量</strong>,一个函数$f(x) = x + y$,其中<code>y</code>就是<code>自由变量</code>,它并不是这个函数自身的自变量,而是通过外部环境提供的.</p>
<p>下面以<code>JavaScript</code>的一个闭包为例: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">y</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于内部函数<code>function(x)</code>来说,<code>y</code>就是<code>自由变量</code>.而<code>y</code>是函数<code>Add(y)</code>内的参数,所以<code>Add(y)</code>对内部函数<code>function(x)</code>形成了一个闭包.</p>
<p>这个闭包将<code>自由变量y</code>与内部函数绑定在了一起,也就是说,当<code>Add(y)</code>函数执行完毕后,它不会随着函数调用结束后被回收(不能在栈上分配空间).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add_function = Add(<span class="number">5</span>); <span class="comment">// 这时y=5,并且与返回的内部函数绑定在了一起</span></div><div class="line"><span class="keyword">var</span> result = add_function(<span class="number">10</span>); <span class="comment">// x=10,返回最终的结果 10 + 5 = 15</span></div></pre></td></tr></table></figure>
<h3 id="Java中的闭包"><a href="#Java中的闭包" class="headerlink" title="Java中的闭包"></a>Java中的闭包</h3><hr>
<p><code>Java</code>与<code>JavaScript</code>又或者其他支持闭包的语言不同,它是一个基于类的面向对象语言,也就是说<strong>一个方法所用到的<code>自由变量</code>永远都来自于其所在类的实例的.</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddUtils</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y = <span class="number">5</span>;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	retrun x + y;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一个方法<code>add(x)</code>拥有一个参数<code>x</code>与一个<code>自由变量y</code>,它的返回值也依赖于这个<code>自由变量y</code>.<code>add(x)</code>想要正常工作的话,就必须依赖于<code>AddUtils</code>类的一个实例,不然它无法知道<code>自由变量y</code>的值是多少,也就是<code>自由变量</code>未与<code>add(x)</code>进行绑定.</p>
<p>严格上来说,<code>add(x)</code>中的<code>自由变量</code>应该为<code>this</code>,这是因为<code>y</code>也是通过<code>this</code>关键字来访问的.</p>
<p>所以说,在<code>Java</code>中闭包其实无处不在,只不过我们难以发现而已.但面向对象的语言一般都不把类叫成闭包,这是一种习惯.</p>
<p><code>Java</code>中的内部类就是一种典型的闭包结构.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y = <span class="number">5</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">10</span>;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> x + y;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部类通过一个指向外部类的引用来访问外部环境中的<code>自由变量</code>,由此形成了一个闭包.</p>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">AnonInner</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> AnonInner <span class="title">getAnonInner</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> y = <span class="number">5</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AnonInner() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> x + y;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>getAnonInner(x)</code>方法返回了一个匿名内部类<code>AnonInner</code>,匿名内部类不能显式地声明构造函数,也不能对构造函数传参,且返回的是一个<code>AnonInner</code>接口,但它的<code>add()</code>方法实现中用到了两个<code>自由变量</code>(<code>x</code>与<code>y</code>),也就是说外部方法<code>getAnonInner(x)</code>对这个匿名内部类构成了闭包.</p>
<p>但我们发现<code>自由变量</code>都被加上了<code>final</code>修饰符,这是因为<code>Java</code>对闭包支持的不完整导致的.</p>
<p>对于<code>自由变量</code>的捕获策略有以下两种: </p>
<ul>
<li>capture-by-value: 只需要在创建闭包的地方把捕获的值拷贝一份到对象里即可.<code>Java</code>的匿名内部类和<code>Java 8</code>新的<code>lambda</code>表达式都是这样实现的.</li>
</ul>
<ul>
<li>capture-by-reference: 把被捕获的局部变量“提升”（hoist）到对象里.<code>C#</code>的匿名函数(匿名委托/lambda表达式)就是这样实现的.</li>
</ul>
<p><code>Java</code>只实现了<code>capture-by-value</code>,但又没有对外说明这一点,为了以后能进一步扩展成支持<code>capture-by-reference</code>留后路,所以干脆就不允许向被捕获的变量赋值,所以这些<code>自由变量</code>需要强制加上<code>final</code>修饰符(在<code>Jdk8</code>中似乎已经没有这种强制限制了).</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><a href="https://www.ibm.com/developerworks/java/library/j-jtp04247/index.html" target="_blank" rel="external">Java theory and practice: The closures debate</a></li>
</ul>
<ul>
<li><a href="http://rednaxelafx.iteye.com/blog/245022" target="_blank" rel="external">关于对象与闭包的关系的一个有趣小故事</a></li>
</ul>
<ul>
<li><a href="https://www.zhihu.com/question/27416568/answer/36565794" target="_blank" rel="external">JVM的规范中允许编程语言语义中创建闭包(closure)吗？ - 知乎</a></li>
</ul>
<ul>
<li><a href="https://www.zhihu.com/question/28190927/answer/39786939" target="_blank" rel="external">为什么Java闭包不能通过返回值之外的方式向外传递值？ - 知乎</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;闭包一直都是&lt;code&gt;Java&lt;/code&gt;社区中争论不断的话题,很多语言例如&lt;code&gt;JavaScript&lt;/code&gt;,&lt;code&gt;Ruby&lt;/code&gt;,&lt;code&gt;Python&lt;/code&gt;等都支持闭包这个语言特性,闭包功能强大且灵活,
    
    </summary>
    
      <category term="后端" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://sylvanassun.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
      <category term="Java" scheme="https://sylvanassun.github.io/tags/Java/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
  </entry>
  
  <entry>
    <title>图的那点事儿(4)-加权有向图</title>
    <link href="https://sylvanassun.github.io/2017/07/27/2017-07-27-Graph_WeightedDigraph/"/>
    <id>https://sylvanassun.github.io/2017/07/27/2017-07-27-Graph_WeightedDigraph/</id>
    <published>2017-07-27T04:00:00.000Z</published>
    <updated>2017-07-29T08:08:06.970Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文转发自<a href="https:/sylvanassun.github.io" target="_blank" rel="external">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/07/27/2017-07-27-Graph_WeightedDigraph">https://sylvanassun.github.io/2017/07/27/2017-07-27-Graph_WeightedDigraph</a></p>
</blockquote>
<h3 id="加权有向图"><a href="#加权有向图" class="headerlink" title="加权有向图"></a>加权有向图</h3><hr>
<p><code>有向图</code>的实现比<code>无向图</code>更加简单,要实现<code>加权有向图</code>只需要在上一章讲到的<code>加权无向图</code>的实现修改一下即可.</p>
<h4 id="DirectedEdge"><a href="#DirectedEdge" class="headerlink" title="DirectedEdge"></a>DirectedEdge</h4><hr>
<p>由于<code>有向图</code>的边都是带有方向的,所以下面这个实现提供了<code>from()</code>与<code>to()</code>函数,用于获取代表<code>v-&gt;w</code>的两个<code>顶点</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectedEdge</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> v;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> w;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> weight;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirectedEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">double</span> weight)</span> </span>&#123;</div><div class="line">        validateVertexes(v, w);</div><div class="line">        <span class="keyword">if</span> (Double.isNaN(weight)) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Weight "</span> + weight + <span class="string">" is  NaN!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.v = v;</div><div class="line">        <span class="keyword">this</span>.w = w;</div><div class="line">        <span class="keyword">this</span>.weight = weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">from</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">to</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> w;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> v + <span class="string">"-&gt;"</span> + w + <span class="string">" "</span> + String.format(<span class="string">"%5.2f"</span>, weight);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertexes</span><span class="params">(<span class="keyword">int</span>... vertexes)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexes.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (vertexes[i] &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Vertex "</span> + vertexes[i] + <span class="string">" must be positive number!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="EdgeWeightedDigraph"><a href="#EdgeWeightedDigraph" class="headerlink" title="EdgeWeightedDigraph"></a>EdgeWeightedDigraph</h4><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EdgeWeightedDigraph</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEWLINE = System.getProperty(<span class="string">"line.separator"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// number of vertices in this digraph</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> vertex;</div><div class="line"></div><div class="line">    <span class="comment">// number of edges in this digraph</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> edge;</div><div class="line"></div><div class="line">    <span class="comment">// adj[v] = adjacency list for vertex v</span></div><div class="line">    <span class="keyword">private</span> Bag&lt;DirectedEdge&gt;[] adj;</div><div class="line"></div><div class="line">    <span class="comment">// indegree[v] = indegree of vertex v</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] indegree;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EdgeWeightedDigraph</span><span class="params">(<span class="keyword">int</span> vertex)</span> </span>&#123;</div><div class="line">        String message = String.format(<span class="string">"Vertex %d must be positive number!"</span>, vertex);</div><div class="line">        validatePositiveNumber(message, vertex);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.vertex = vertex;</div><div class="line">        <span class="keyword">this</span>.edge = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.indegree = <span class="keyword">new</span> <span class="keyword">int</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.adj = (Bag&lt;DirectedEdge&gt;[]) <span class="keyword">new</span> Bag[vertex];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++)</div><div class="line">            adj[v] = <span class="keyword">new</span> Bag&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EdgeWeightedDigraph</span><span class="params">(Scanner scanner)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(scanner.nextInt());</div><div class="line">        <span class="keyword">int</span> edge = scanner.nextInt();</div><div class="line">        String message = String.format(<span class="string">"Edge %d must be positive number!"</span>, edge);</div><div class="line">        validatePositiveNumber(message, edge);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</div><div class="line">            <span class="keyword">int</span> v = scanner.nextInt();</div><div class="line">            <span class="keyword">int</span> w = scanner.nextInt();</div><div class="line">            validateVertex(v);</div><div class="line">            validateVertex(w);</div><div class="line">            <span class="keyword">double</span> weight = scanner.nextDouble();</div><div class="line">            addEdge(<span class="keyword">new</span> DirectedEdge(v, w, weight));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">vertex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> vertex;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">edge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> edge;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(DirectedEdge e)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> v = e.from();</div><div class="line">        <span class="keyword">int</span> w = e.to();</div><div class="line">        validateVertex(v);</div><div class="line">        validateVertex(w);</div><div class="line">        adj[v].add(e);</div><div class="line">        indegree[w]++;</div><div class="line">        edge++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;DirectedEdge&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> adj[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outdegree</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> adj[v].size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indegree</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> indegree[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 在有向图中每条边只会出现一次</span></div><div class="line">	<span class="comment">// 遍历边集不需要在无向图里那样为了消除重复边而进行复杂的判断</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;DirectedEdge&gt; <span class="title">edges</span><span class="params">()</span> </span>&#123;</div><div class="line">        Bag&lt;DirectedEdge&gt; list = <span class="keyword">new</span> Bag&lt;DirectedEdge&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++) &#123;</div><div class="line">            <span class="keyword">for</span> (DirectedEdge e : adj(v)) &#123;</div><div class="line">                list.add(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</div><div class="line">        s.append(vertex + <span class="string">" "</span> + edge + NEWLINE);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++) &#123;</div><div class="line">            s.append(v + <span class="string">": "</span>);</div><div class="line">            <span class="keyword">for</span> (DirectedEdge e : adj[v]) &#123;</div><div class="line">                s.append(e + <span class="string">"  "</span>);</div><div class="line">            &#125;</div><div class="line">            s.append(NEWLINE);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validatePositiveNumber</span><span class="params">(String message, <span class="keyword">int</span>... numbers)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (numbers[i] &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>加权有向图</code>的实现与<code>加权无向图</code>区别不大,而且因为<code>有向图</code>中的边只会出现一次,实现代码要比<code>无向图</code>更简单.</p>
<p><a href="https://github.com/SylvanasSun/algs4-study/tree/master/src/main/java/chapter4_graphs/C4_4_ShortestPaths" target="_blank" rel="external">本文中的所有完整代码请到我的GitHub中查看</a></p>
<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><hr>
<p>“找到一个<code>顶点</code>到达另一个<code>顶点</code>之间的<code>最短路径</code>“是<code>图论</code>研究中的经典算法问题.在<code>加权有向图</code>中,每条<code>有向路径</code>都有一个与之对应的<code>路径权重</code>(路径中所有边的<code>权重</code>之和),要找到一条<code>最短路径</code>其实就是找到<code>路径权重</code>最小的那条路径.</p>
<p><img src="http://algs4.cs.princeton.edu/44sp/images/shortest-path.png" alt="加权有向图中的最短路径"></p>
<h4 id="单点最短路径"><a href="#单点最短路径" class="headerlink" title="单点最短路径"></a>单点最短路径</h4><hr>
<p>“从<code>s</code>到目的地<code>v</code>是否存在一条<code>有向路径</code>,如果有,找出最短的那条路径”.类似这样的问题就是<code>单点最短路径</code>问题,它是我们主要研究的问题.</p>
<p><code>单点最短路径</code>的结果是一棵<code>最短路径树</code>,它是<code>图</code>的一幅<code>子图</code>,<strong>包含了从起点到所有可达顶点的<code>最短路径</code>.</strong></p>
<p>从起点到一个顶点可能存在两条长度相等的路径,如果出现这种情况,可以删除其中一条路径的最后一条边,直到从起点到每个顶点都只有一条路径相连.</p>
<h4 id="最短路径的数据结构"><a href="#最短路径的数据结构" class="headerlink" title="最短路径的数据结构"></a>最短路径的数据结构</h4><hr>
<p><img src="http://algs4.cs.princeton.edu/44sp/images/spt.png" alt=""></p>
<p>要实现<code>最短路径</code>的算法还需要借助以下数据结构: </p>
<ul>
<li>edgeTo[]: 一个<code>由顶点索引</code>的<code>DirectedEdge</code>对象的父链接数组,其中<code>edgeTo[v]</code>的值为树中连接<code>v</code>和它的父节点的边.</li>
</ul>
<ul>
<li>distTo[]: 一个<code>由顶点索引</code>的<code>double</code>数组,其中<code>distTo[v]</code>代表从<code>起点</code>到<code>v</code>的已知最短路径的长度.</li>
</ul>
<ul>
<li>初始化时,<code>edgeTo[s]</code>的值为<code>null</code>(<code>s</code>为起点),<code>distTo[s]</code>的值为<code>0.0</code>,从<code>s</code>到不可达的顶点距离为<code>Double.POSITIVE_INFINITY</code>.</li>
</ul>
<h4 id="让边松弛"><a href="#让边松弛" class="headerlink" title="让边松弛"></a>让边松弛</h4><hr>
<p><code>最短路径</code>算法都基于<code>松弛(Relaxation)</code>操作,<strong>它在遇到新的边时,通过更新这些信息就可以得到新的最短路径.</strong></p>
<p>假设对边<code>v-&gt;w</code>进行松弛操作,意味着要先检查从<code>s</code>到<code>w</code>的<code>最短路径</code>是否是先从<code>s</code>到<code>v</code>,然后再由<code>v</code>到<code>w</code>(也就是说<code>v-&gt;w</code>是更短的一条路径),如果是,那么就进行更新.由<code>v</code>到达<code>w</code>的<code>最短路径</code>是<code>distTo[v]</code>与<code>e.weight()</code>之和,如果这个值大于<code>distTo[w]</code>,称这条边松弛失败,并将它忽略.</p>
<p>松弛操作就像用一根橡皮筋沿着连续两个<code>顶点</code>的路径紧紧展开,放松一条边就像将这条橡皮筋转移到另一条更短的路径上,从而缓解橡皮筋的压力.</p>
<p><img src="http://algs4.cs.princeton.edu/44sp/images/relaxation-edge.png" alt="松弛操作的两种情况(失败与成功)"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 松弛一条边</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(DirectedEdge e)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> v = e.from(), w = e.to();</div><div class="line">	<span class="comment">// 如果s-&gt;v-&gt;w的路径更小则进行更新</span></div><div class="line">    <span class="keyword">if</span> (distTo[w] &gt; distTo[v] + e.weight()) &#123;</div><div class="line">        distTo[w] = distTo[v] + e.weight();</div><div class="line">        edgeTo[w] = e;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 松弛一个顶点的所有邻接边</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(EdgeWeightedDigraph G, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (DirectedEdge e : G.adj(v)) &#123;</div><div class="line">        <span class="keyword">int</span> w = e.to();</div><div class="line">        <span class="keyword">if</span> (distTo[w] &gt; distTo[v] + e.weight()) &#123;</div><div class="line">            distTo[w] = distTo[v] + e.weight();</div><div class="line">            edgeTo[w] = e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><hr>
<p><code>Dijkstra算法</code>类似于<code>Prim算法</code>,它将<code>distTo[s]</code>初始化为<code>0.0</code>,<code>distTo[]</code>中的其他元素初始化为<code>Double.POSITIVE_INFINITY</code>.然后将<code>distTo[]</code>中最小的<code>非树顶点</code>放松并加入树中,一直重复直到所有的顶点都在树中或者所有的<code>非树顶点</code>的<code>distTo[]</code>值均为<code>Double.POSITIVE_INFINITY</code>.</p>
<p><code>Dijkstra算法</code>与<code>Prim算法</code>都是用添加边的方式构造一棵树:</p>
<ul>
<li><code>Prim算法</code>每次添加的是距离<code>树</code>最近的<code>非树顶点</code>.</li>
</ul>
<ul>
<li><code>Dijkstra算法</code>每次添加的都是<strong>离<code>起点</code>最近的<code>非树顶点</code></strong>.</li>
</ul>
<p>从上述的步骤我们就能看出,<code>Dijkstra算法</code>需要一个优先队列(也可以用<code>斐波那契堆</code>)来保存需要被放松的<code>顶点</code>并确认下一个被放松的<code>顶点</code>(也就是取出最小的).</p>
<p>如此简单的<code>Dijkstra算法</code>也有其缺点,那就是它<strong>只适用于解决<code>权重非负</code>的<code>图</code>.</strong></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif" alt="Dijkstra算法的运行轨迹"></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e4/DijkstraDemo.gif" alt=""></p>
<h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DijkstraSP</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// distTo[v] = distance of  shortest s -&gt; v path</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] distTo;</div><div class="line"></div><div class="line">    <span class="comment">// edgeTo[v] = last edge on shortest s - &gt; v path</span></div><div class="line">    <span class="keyword">private</span> DirectedEdge[] edgeTo;</div><div class="line"></div><div class="line">    <span class="comment">// priority queue of vertices</span></div><div class="line">    <span class="keyword">private</span> IndexMinPQ&lt;Double&gt; pq;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DijkstraSP</span><span class="params">(EdgeWeightedDigraph digraph, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">        validateNegativeWeight(digraph);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> vertex = digraph.vertex();</div><div class="line">        <span class="keyword">this</span>.distTo = <span class="keyword">new</span> <span class="keyword">double</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.edgeTo = <span class="keyword">new</span> DirectedEdge[vertex];</div><div class="line"></div><div class="line">        validateVertex(s);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++)</div><div class="line">            distTo[v] = Double.POSITIVE_INFINITY;</div><div class="line">        distTo[s] = <span class="number">0.0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 将起点放入索引优先队列,并不断地进行松弛</span></div><div class="line">        pq = <span class="keyword">new</span> IndexMinPQ&lt;&gt;(vertex);</div><div class="line">        pq.insert(s, distTo[s]);</div><div class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> v = pq.delMin();</div><div class="line">			<span class="comment">// 对权值最小的非树顶点的所有邻接边集进行松弛操作</span></div><div class="line">            <span class="keyword">for</span> (DirectedEdge e : digraph.adj(v))</div><div class="line">                relax(e);</div><div class="line">        &#125;</div><div class="line">		</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// relax edge e and update pq if changed</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(DirectedEdge e)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> v = e.from(), w = e.to();</div><div class="line">		<span class="comment">// s -&gt; v -&gt; w的权重</span></div><div class="line">        <span class="keyword">double</span> weight = distTo[v] + e.weight();</div><div class="line">        <span class="keyword">if</span> (distTo[w] &gt; weight) &#123;</div><div class="line">            distTo[w] = weight;</div><div class="line">            edgeTo[w] = e;</div><div class="line">            <span class="keyword">if</span> (pq.contains(w))</div><div class="line">                pq.decreaseKey(w, weight);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                pq.insert(w, weight);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateNegativeWeight</span><span class="params">(EdgeWeightedDigraph digraph)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (DirectedEdge e : digraph.edges()) &#123;</div><div class="line">            <span class="keyword">if</span> (e.weight() &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Edge "</span> + e + <span class="string">" has negative weight."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">distTo</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> distTo[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathTo</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> distTo[v] &lt; Double.POSITIVE_INFINITY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;DirectedEdge&gt; <span class="title">pathTo</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">if</span> (!hasPathTo(v)) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        Stack&lt;DirectedEdge&gt; path = <span class="keyword">new</span> Stack&lt;DirectedEdge&gt;();</div><div class="line">        <span class="keyword">for</span> (DirectedEdge e = edgeTo[v]; e != <span class="keyword">null</span>; e = edgeTo[e.from()]) &#123;</div><div class="line">            path.push(e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> path;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> V = distTo.length;</div><div class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (V - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述的代码也可以用于处理<code>加权无向图</code>,但需要修改传入的对象类型.不管是<code>无向图</code>还是<code>有向图</code>它们对于<code>最短路径</code>问题是等价的.</p>
<h3 id="无环加权有向图中的最短路径算法"><a href="#无环加权有向图中的最短路径算法" class="headerlink" title="无环加权有向图中的最短路径算法"></a>无环加权有向图中的最短路径算法</h3><hr>
<p>如果是处理<code>无环图</code>的情况下,还会有一种比<code>Dijkstra算法</code>更快、更简单的算法.它的特点如下:</p>
<ul>
<li>能够处理<code>负权重</code>的边.</li>
</ul>
<ul>
<li>能够在线性时间内解决单点最短路径问题.</li>
</ul>
<ul>
<li><p>在已知是一张<code>无环图</code>的情况下,它是找出<code>最短路径</code>效率最高的方法.</p>
<ul>
<li>实现比<code>Dijkstra算法</code>更简单.</li>
</ul>
</li>
</ul>
<p>只需要将所有<code>顶点</code><strong>按照<code>拓扑排序</code>的顺序</strong>来<code>松弛边</code>,就可以得到这个简单高效的算法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcyclicSP</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// distTo[v] = distance  of shortest s-&gt;v path</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] distTo;</div><div class="line"></div><div class="line">    <span class="comment">// edgeTo[v] = last edge on shortest s-&gt;v path</span></div><div class="line">    <span class="keyword">private</span> DirectedEdge[] edgeTo;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AcyclicSP</span><span class="params">(EdgeWeightedDigraph digraph, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> vertex = digraph.vertex();</div><div class="line">        distTo = <span class="keyword">new</span> <span class="keyword">double</span>[vertex];</div><div class="line">        edgeTo = <span class="keyword">new</span> DirectedEdge[vertex];</div><div class="line"></div><div class="line">        validateVertex(s);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++)</div><div class="line">            distTo[v] = Double.POSITIVE_INFINITY;</div><div class="line">        distTo[s] = <span class="number">0.0</span>;</div><div class="line"></div><div class="line">        </div><div class="line">        Topological topological = <span class="keyword">new</span> Topological(digraph);</div><div class="line">        <span class="keyword">if</span> (!topological.hasOrder())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Digraph is not acyclic."</span>);</div><div class="line">		<span class="comment">// 按照拓扑排序的顺序进行放松操作</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : topological.order()) &#123;</div><div class="line">            <span class="keyword">for</span> (DirectedEdge e : digraph.adj(v))</div><div class="line">                relax(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(DirectedEdge e)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> v = e.from(), w = e.to();</div><div class="line">        <span class="keyword">double</span> weight = distTo[v] + e.weight();</div><div class="line">        <span class="keyword">if</span> (distTo[w] &gt; weight) &#123;</div><div class="line">            distTo[w] = weight;</div><div class="line">            edgeTo[w] = e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最长路径"><a href="#最长路径" class="headerlink" title="最长路径"></a>最长路径</h4><hr>
<p>要想找出一条<code>最长路径</code>,只需要把<code>distTo[]</code>的初始化变为<code>Double.NEGATIVE_INFINITY</code>,并更改<code>relax()</code>函数中的不等式的方向.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AcyclicLP</span><span class="params">(EdgeWeightedDigraph G, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">      distTo = <span class="keyword">new</span> <span class="keyword">double</span>[G.vertex()];</div><div class="line">      edgeTo = <span class="keyword">new</span> DirectedEdge[G.vertex()];</div><div class="line"></div><div class="line">      validateVertex(s);</div><div class="line"></div><div class="line"><span class="comment">// 全部初始化为负无穷</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; G.vertex(); v++)</div><div class="line">          distTo[v] = Double.NEGATIVE_INFINITY;</div><div class="line">      distTo[s] = <span class="number">0.0</span>;</div><div class="line"></div><div class="line">      Topological topological = <span class="keyword">new</span> Topological(G);</div><div class="line">      <span class="keyword">if</span> (!topological.hasOrder())</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Digraph is not acyclic."</span>);</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> v : topological.order()) &#123;</div><div class="line">          <span class="keyword">for</span> (DirectedEdge e : G.adj(v))</div><div class="line">              relax(e);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(DirectedEdge e)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> v = e.from(), w = e.to();</div><div class="line"><span class="comment">// 改变不等式的方向</span></div><div class="line">      <span class="keyword">if</span> (distTo[w] &lt; distTo[v] + e.weight()) &#123;</div><div class="line">          distTo[w] = distTo[v] + e.weight();</div><div class="line">          edgeTo[w] = e;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="Bellman-Ford算法"><a href="#Bellman-Ford算法" class="headerlink" title="Bellman-Ford算法"></a>Bellman-Ford算法</h3><hr>
<p>我们已经知道了处理<code>权重</code>非负图的<code>Dijkstra算法</code>与处理<code>无环图</code>的算法,但如果遇见既含有环,<code>权重</code>也是负数的<code>加权有向图</code>该怎么办?</p>
<p><code>Bellman-Ford算法</code>就是用于处理<code>有环</code>且含有<code>负权重</code>的<code>加权有向图</code>的,它的原理是对图进行<code>V-1</code>次松弛操作,得到所有可能的最短路径.</p>
<p>要实现<code>Bellman-Ford算法</code>还需要以下数据结构: </p>
<ul>
<li>队列: 用于保存即将被松弛的顶点.</li>
</ul>
<ul>
<li>布尔值数组: 用来标记该顶点是否已经存在于队列中,以防止重复插入.</li>
</ul>
<p>我们将起点放入队列中,然后进入一个循环,每次循环都会从队列中取出一个顶点并对其进行松弛.为了保证算法在<code>V</code>轮后能够终止,需要能够动态地检测是否存在<code>负权重环</code>,如果找到了这个环则结束运行(也可以用一个变量动态记录轮数).</p>
<h4 id="负权重环的检测"><a href="#负权重环的检测" class="headerlink" title="负权重环的检测"></a>负权重环的检测</h4><hr>
<p>如果存在了一个从起点可达的<code>负权重环</code>,那么队列就永远不可能为空,为了从这个无尽的循环中解脱出来,算法需要能够动态地检测<code>负权重环</code>.</p>
<p><code>Bellman-Ford算法</code>也使用了<code>edgeTo[]</code>来存放<code>最短路径树</code>中的每一条边,我们根据<code>edgeTo[]</code>来复制一幅图并在该图中检测环.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findNegativeCycle</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> V = edgeTo.length;</div><div class="line"><span class="comment">// 根据edgeTo[]来创建一幅加权有向图</span></div><div class="line">      EdgeWeightedDigraph spt = <span class="keyword">new</span> EdgeWeightedDigraph(V);</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; V; v++)</div><div class="line">          <span class="keyword">if</span> (edgeTo[v] != <span class="keyword">null</span>)</div><div class="line">              spt.addEdge(edgeTo[v]);</div><div class="line"><span class="comment">// 判断该图有没有环</span></div><div class="line">      EdgeWeightedDirectedCycle finder = <span class="keyword">new</span> EdgeWeightedDirectedCycle(spt);</div><div class="line">      cycle = finder.cycle();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h4><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BellmanFordSP</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] distTo;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DirectedEdge[] edgeTo;</div><div class="line"></div><div class="line">    <span class="comment">// 用于标记顶点是否在队列中</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] onQueue;</div><div class="line"></div><div class="line">    <span class="comment">// 存放下次进行松弛操作的顶点的队列</span></div><div class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; queue;</div><div class="line"></div><div class="line">    <span class="comment">// 计算松弛操作的轮数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cost;</div><div class="line"></div><div class="line">    <span class="comment">// 负权重环</span></div><div class="line">    <span class="keyword">private</span> Iterable&lt;DirectedEdge&gt; cycle;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BellmanFordSP</span><span class="params">(EdgeWeightedDigraph digraph, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> vertex = digraph.vertex();</div><div class="line">        <span class="keyword">this</span>.distTo = <span class="keyword">new</span> <span class="keyword">double</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.edgeTo = <span class="keyword">new</span> DirectedEdge[vertex];</div><div class="line">        <span class="keyword">this</span>.onQueue = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertex];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++)</div><div class="line">            distTo[v] = Double.POSITIVE_INFINITY;</div><div class="line">        distTo[s] = <span class="number">0.0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Bellman-Ford algorithm</span></div><div class="line">        queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">        queue.add(s); <span class="comment">// 将起点放入队列</span></div><div class="line">        onQueue[s] = <span class="keyword">true</span>; <span class="comment">// 标记起点已在队列中</span></div><div class="line">		<span class="comment">// 当队列为空时或者发现负权重环时结束循环</span></div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; !hasNegativeCycle()) &#123;</div><div class="line">            <span class="keyword">int</span> v = queue.poll();</div><div class="line">            onQueue[v] = <span class="keyword">false</span>;</div><div class="line">            relax(digraph, v);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(EdgeWeightedDigraph G, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (DirectedEdge e : G.adj(v)) &#123;</div><div class="line">            <span class="keyword">int</span> w = e.to();</div><div class="line">            <span class="keyword">double</span> weight = distTo[v] + e.weight();</div><div class="line">            <span class="keyword">if</span> (distTo[w] &gt; weight) &#123;</div><div class="line">                distTo[w] = weight;</div><div class="line">                edgeTo[w] = e;</div><div class="line">				<span class="comment">// 将不在队列中的顶点w加到队列</span></div><div class="line">                <span class="keyword">if</span> (!onQueue[w]) &#123;</div><div class="line">                    queue.add(w);</div><div class="line">                    onQueue[w] = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">			<span class="comment">// 动态检测负权重环,</span></div><div class="line">            <span class="keyword">if</span> (cost++ % G.vertex() == <span class="number">0</span>) &#123;</div><div class="line">                findNegativeCycle();</div><div class="line">                <span class="keyword">if</span> (hasNegativeCycle()) <span class="keyword">return</span>;  <span class="comment">// found a negative cycle</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr>
<p>解决<code>最短路径</code>问题一直都是<code>图论</code>的经典问题,本文中介绍的算法适用于不同的环境,在应用中应该根据不同的环境选择不同的算法.</p>
<table>
<thead>
<tr>
<th>算法</th>
<th>局限性</th>
<th>路径长度的比较次数(增长的数量级)</th>
<th>空间复杂度</th>
<th>优势</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dijkstra</td>
<td>只能处理正权重</td>
<td>ElogV</td>
<td>V</td>
<td>最坏情况下仍有较好的性能</td>
</tr>
<tr>
<td>拓扑排序</td>
<td>只适用于无环图</td>
<td>E+V</td>
<td>V</td>
<td>实现简单,是无环图情况下的最优算法</td>
</tr>
<tr>
<td>Bellman-Ford</td>
<td>不能存在负权重环</td>
<td>E+V,最坏情况为VE</td>
<td>V</td>
<td>适用广泛</td>
</tr>
</tbody>
</table>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><a href="http://algs4.cs.princeton.edu/44sp/" target="_blank" rel="external">Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" target="_blank" rel="external">Dijkstra’s algorithm - Wikipedia</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm" target="_blank" rel="external">Bellman–Ford algorithm - Wikipedia</a></li>
</ul>
<h3 id="图的那点事儿"><a href="#图的那点事儿" class="headerlink" title="图的那点事儿"></a>图的那点事儿</h3><hr>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/18/2017-07-18-Graph_UndirectedGraph/">图的那点事儿(1)-无向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/23/2017-07-23-Graph_DirectedGraphs/">图的那点事儿(2)-有向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/25/2017-07-25-Graph_WeightedUndirectedGraph/">图的那点事儿(3)-加权无向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/27/2017-07-27-Graph_WeightedDigraph">图的那点事儿(4)-加权有向图</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文作者为: &lt;a href=&quot;https://github.com/SylvanasSun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SylvanasSun&lt;/a&gt;.转载请务必将下面这段话置于文章开头处(保留超链接).&lt;br
    
    </summary>
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/categories/Algorithms/"/>
    
      <category term="Graph" scheme="https://sylvanassun.github.io/categories/Algorithms/Graph/"/>
    
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/tags/Algorithms/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="Graph" scheme="https://sylvanassun.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>图的那点事儿(3)-加权无向图</title>
    <link href="https://sylvanassun.github.io/2017/07/25/2017-07-25-Graph_WeightedUndirectedGraph/"/>
    <id>https://sylvanassun.github.io/2017/07/25/2017-07-25-Graph_WeightedUndirectedGraph/</id>
    <published>2017-07-25T10:00:00.000Z</published>
    <updated>2017-07-30T08:15:44.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文转发自<a href="https://sylvanassun.github.io">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/07/25/2017-07-25-Graph_WeightedUndirectedGraph/">https://sylvanassun.github.io/2017/07/25/2017-07-25-Graph_WeightedUndirectedGraph/</a></p>
</blockquote>
<h3 id="加权无向图"><a href="#加权无向图" class="headerlink" title="加权无向图"></a>加权无向图</h3><hr>
<p>所谓<code>加权图</code>,即每条<code>边</code>上都有着对应的<code>权重</code>,这个<code>权重</code>是正数也可以是负数,也不一定会和距离成正比.<code>加权无向图</code>的表示方法只需要对<code>无向图</code>的实现进行一下扩展.</p>
<ul>
<li>在使用<code>邻接矩阵</code>的方法中,可以用<code>边</code>的<code>权重</code>代替布尔值来作为矩阵的元素.</li>
</ul>
<ul>
<li>在使用<code>邻接表</code> 的方法中,可以在<code>链表</code>的<code>节点</code>中添加一个权重域.</li>
</ul>
<ul>
<li>在使用<code>邻接表</code>的方法中,将<code>边</code>抽象为一个<code>Edge</code>类,它包含了相连的两个<code>顶点</code>和它们的<code>权重</code>,<code>链表</code>中的每个元素都是一个<code>Edge</code>.</li>
</ul>
<p>我们使用第三种方法来实现<code>加权无向图</code>,它的数据表示如下图:</p>
<p><img src="http://algs4.cs.princeton.edu/43mst/images/edge-weighted-graph-representation.png" alt="加权无向图的表示"></p>
<h4 id="Edge的实现"><a href="#Edge的实现" class="headerlink" title="Edge的实现"></a>Edge的实现</h4><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> v;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> w;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> weight;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">double</span> weight)</span> </span>&#123;</div><div class="line">        validateVertexes(v, w);</div><div class="line">        <span class="keyword">if</span> (Double.isNaN(weight)) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Weight is NaN."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.v = v;</div><div class="line">        <span class="keyword">this</span>.w = w;</div><div class="line">        <span class="keyword">this</span>.weight = weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertexes</span><span class="params">(<span class="keyword">int</span>... vertexes)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexes.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (vertexes[i] &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                        String.format(<span class="string">"Vertex %d must be a nonnegative integer."</span>, vertexes[i]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">either</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">other</span><span class="params">(<span class="keyword">int</span> vertex)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (vertex == v)</div><div class="line">            <span class="keyword">return</span> w;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vertex == w)</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal endpoint."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge that)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Double.compare(<span class="keyword">this</span>.weight, that.weight);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.format(<span class="string">"%d-%d %.5f"</span>, v, w, weight);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Edge</code>类提供了<code>either()</code>与<code>other()</code>两个函数,在两个<code>顶点</code>都未知的情况下,可以调用<code>either()</code>获得<code>顶点v</code>,然后再调用<code>other(v)</code>来获得另一个<code>顶点</code>.</p>
<blockquote>
<p><a href="https://github.com/SylvanasSun/algs4-study/tree/master/src/main/java/chapter4_graphs/C4_3_MinimumSpanningTrees" target="_blank" rel="external">本文中的所有完整代码点我查看</a></p>
</blockquote>
<h4 id="加权无向图的实现"><a href="#加权无向图的实现" class="headerlink" title="加权无向图的实现"></a>加权无向图的实现</h4><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EdgeWeightedGraph</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEWLINE = System.getProperty(<span class="string">"line.separator"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> vertexes;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> edges;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Bag&lt;Edge&gt;[] adj;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EdgeWeightedGraph</span><span class="params">(<span class="keyword">int</span> vertexes)</span> </span>&#123;</div><div class="line">        validateVertexes(vertexes);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.vertexes = vertexes;</div><div class="line">        <span class="keyword">this</span>.edges = <span class="number">0</span>;</div><div class="line">        adj = (Bag&lt;Edge&gt;[]) <span class="keyword">new</span> Bag[vertexes];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexes; i++)</div><div class="line">            adj[i] = <span class="keyword">new</span> Bag&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EdgeWeightedGraph</span><span class="params">(Scanner scanner)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(scanner.nextInt());</div><div class="line">        <span class="keyword">int</span> edges = scanner.nextInt();</div><div class="line">        validateEdges(edges);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges; i++) &#123;</div><div class="line">            <span class="keyword">int</span> v = scanner.nextInt();</div><div class="line">            <span class="keyword">int</span> w = scanner.nextInt();</div><div class="line">            <span class="keyword">double</span> weight = scanner.nextDouble();</div><div class="line">            addEdge(<span class="keyword">new</span> Edge(v, w, weight));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">vertex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> vertexes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">edge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> edges;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(Edge e)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> v = e.either();</div><div class="line">        <span class="keyword">int</span> w = e.other(v);</div><div class="line">        validateVertex(v);</div><div class="line">        validateVertex(w);</div><div class="line">        adj[v].add(e);</div><div class="line">        adj[w].add(e);</div><div class="line">        edges++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Edge&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> adj[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">degree</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> adj[v].size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Edge&gt; <span class="title">edges</span><span class="params">()</span> </span>&#123;</div><div class="line">        Bag&lt;Edge&gt; list = <span class="keyword">new</span> Bag&lt;Edge&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertexes; v++) &#123;</div><div class="line">            <span class="keyword">int</span> selfLoops = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (Edge e : adj(v)) &#123;</div><div class="line">				<span class="comment">// 只添加一条边</span></div><div class="line">                <span class="keyword">if</span> (e.other(v) &gt; v) &#123;</div><div class="line">                    list.add(e);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 只添加一条自环的边</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e.other(v) == v) &#123;</div><div class="line">                    <span class="keyword">if</span> (selfLoops % <span class="number">2</span> == <span class="number">0</span>) list.add(e);</div><div class="line">                    selfLoops++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</div><div class="line">        s.append(vertexes + <span class="string">" "</span> + edges + NEWLINE);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertexes; v++) &#123;</div><div class="line">            s.append(v + <span class="string">": "</span>);</div><div class="line">            <span class="keyword">for</span> (Edge e : adj[v]) &#123;</div><div class="line">                s.append(e + <span class="string">"  "</span>);</div><div class="line">            &#125;</div><div class="line">            s.append(NEWLINE);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertexes</span><span class="params">(<span class="keyword">int</span>... vertexes)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexes.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (vertexes[i] &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                        String.format(<span class="string">"Vertex %d must be a nonnegative integer."</span>, vertexes[i]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateEdges</span><span class="params">(<span class="keyword">int</span> edges)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (edges &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Number of edges must be nonnegative."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// throw an IllegalArgumentException unless &#123;@code 0 &lt;= v &lt; V&#125;</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= vertexes)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (vertexes - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码是对<code>无向图</code>的扩展,它将<code>邻接表</code>中的元素从<code>整数</code>变为了<code>Edge</code>,函数<code>edges()</code>返回了<code>边</code>的集合,由于是<code>无向图</code>所以每条<code>边</code>会出现两次,需要注意处理.</p>
<p><code>加权无向图</code>的实现还拥有以下特点: </p>
<ul>
<li>边的比较: <code>Edge</code>类实现了<code>Comparable</code>接口,它使用了<code>权重</code>来比较两条<code>边</code>的大小,所以<code>加权无向图</code>的自然次序就是权重次序.</li>
</ul>
<ul>
<li>自环: 该实现允许存在自环,并且<code>edges()</code>函数中对自环边进行了记录.</li>
</ul>
<ul>
<li>平行边: 该实现允许存在平行边,但可以用更复杂的方法来消除平行边,例如只保留平行边中的权重最小者.</li>
</ul>
<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><hr>
<p><img src="http://algs4.cs.princeton.edu/43mst/images/mst.png" alt="加权无向图的最小生成树"></p>
<p><code>最小生成树</code>是<code>加权无向图</code>的重要应用.<strong><code>图</code>的<code>生成树</code>是它的一棵含有其所有<code>顶点</code>的<code>无环连通子图</code>,<code>最小生成树</code>是它的一棵<code>权值</code>(所有边的权值之和)最小的<code>生成树</code>.</strong></p>
<p>在给定的一幅<code>加权无向图</code>$G = (V,E)$中,$(u,v)$代表连接<code>顶点u</code>与<code>顶点v</code>的<code>边</code>,也就是$(u,v) \in E$,而$w(u,v)$代表这条边的<code>权重</code>,若存在<code>T</code>为<code>E</code>的子集,也就是$T \subseteq E$,且为<code>无环图</code>,使得$w(T) = \sum_{(u,v) \in T}w(u,v)$ 的 $w(T)$ 最小,则<code>T</code>为<code>G</code>的<code>最小生成树</code>.</p>
<p><code>最小生成树</code>在一些情况下可能会存在多个,例如,给定一幅图<code>G</code>,当它的所有边的<code>权重</code>都相同时,那么<code>G</code>的所有<code>生成树</code>都是<code>最小生成树</code>,当所有边的<code>权重</code>互不相同时,将会只有一个<code>最小生成树</code>.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Multiple_minimum_spanning_trees.svg/316px-Multiple_minimum_spanning_trees.svg.png" alt="多个最小生成树的情况"></p>
<h3 id="切分定理"><a href="#切分定理" class="headerlink" title="切分定理"></a>切分定理</h3><hr>
<p><strong><code>切分定理</code>将图中的所有<code>顶点</code>切分为两个集合(两个非空且不重叠的集合),检查两个集合的所有边并识别哪条边应属于图的<code>最小生成树</code>.</strong></p>
<p>一种比较简单的切分方法即通过<strong>指定一个顶点集并隐式地认为它的补集为另一个顶点集来指定一个切分.</strong></p>
<p><img src="http://algs4.cs.princeton.edu/43mst/images/cut-property.png" alt="白色与灰色顶点代表了不同的顶点集"></p>
<p><code>切分定理</code>也表明了对于每一种切分,<code>权重</code>最小的<code>横切边(一条连接两个属于不同集合的顶点的边)</code>必然属于<code>最小生成树</code>.</p>
<p><code>切分定理</code>是解决<code>最小生成树</code>问题的所有算法的基础,<strong>使用<code>切分定理</code>找到<code>最小生成树</code>的一条边,不断重复直到找到<code>最小生成树</code>的所有边.</strong></p>
<p>这些算法可以说都是<code>贪心算法</code>,算法的每一步都是在找最优解(<code>权值</code>最小的<code>横切边</code>),而<strong>解决<code>最小生成树</code>的各种算法不同之处仅在于保存切分和判定<code>权重</code>最小的<code>横切边</code>的方式.</strong></p>
<p><img src="http://algs4.cs.princeton.edu/43mst/images/mst-greedy.png" alt="生成最小生成树的过程,权值最小的横切边将会被标记为黑色"></p>
<h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><hr>
<p><code>Prim算法</code>是用于解决<code>最小生成树</code>的算法之一,算法的每一步都会为一棵生长中的<code>树</code>添加一条边.一开始这棵树只有一个<code>顶点</code>,然后会一直添加到$V - 1$条边,<strong>每次总是将下一条连接<code>树</code>中的<code>顶点</code>与不在<code>树</code>中的<code>顶点</code>且<code>权重</code>最小的边加入到<code>树</code>中(也就是由<code>树</code>中<code>顶点</code>所定义的切分中的一条<code>横切边</code>).</strong></p>
<p><img src="http://algs4.cs.princeton.edu/43mst/images/prim.png" alt=""></p>
<p>实现<code>Prim算法</code>还需要借助以下数据结构: </p>
<ul>
<li>布尔值数组: 用于记录<code>顶点</code>是否已在<code>树</code>中.</li>
</ul>
<ul>
<li>队列: 使用一条队列来保存<code>最小生成树</code>中的边,也可以使用一个由<code>顶点</code>索引的<code>Edge</code>对象的数组.</li>
</ul>
<ul>
<li>优先队列: 优先队列用于保存<code>横切边</code>,优先队列的性质可以每次取出<code>权值</code>最小的<code>横切边</code>.</li>
</ul>
<h4 id="延时实现"><a href="#延时实现" class="headerlink" title="延时实现"></a>延时实现</h4><hr>
<p>当我们连接新加入<code>树</code>中的<code>顶点</code>与其他已经在<code>树</code>中<code>顶点</code>的所有边都失效了(由于两个<code>顶点</code>都已在<code>树</code>中,所以这是一条失效的<code>横切边</code>).我们需要处理这种情况,<strong>即使实现对无效边采取忽略(不加入到优先队列中),而延时实现会把无效边留在优先队列中,等到要删除优先队列中的数据时再进行有效性检查.</strong></p>
<p><img src="http://algs4.cs.princeton.edu/43mst/images/prim-lazy.png" alt="Prim延时实现的运行轨迹"></p>
<p>上图为<code>Prim算法</code>延时实现的轨迹图,它的步骤如下: </p>
<ul>
<li>将<code>顶点0</code>添加到<code>最小生成树</code>中,将它的<code>邻接表</code>中的所有边添加到优先队列中(将<code>横切边</code>添加到优先队列).</li>
</ul>
<ul>
<li>将<code>顶点7</code>和边<code>0-7</code>添加到<code>最小生成树</code>中,将<code>顶点</code>的<code>邻接表</code>中的所有边添加到优先队列中.</li>
</ul>
<ul>
<li>将<code>顶点1</code>和边<code>1-7</code>添加到<code>最小生成树</code>中,将<code>顶点</code>的<code>邻接表</code>中的所有边添加到优先队列中.</li>
</ul>
<ul>
<li>将<code>顶点2</code>和边<code>0-2</code>添加到<code>最小生成树</code>中,将边<code>2-3</code>和<code>6-2</code>添加到优先队列中,边<code>2-7</code>和<code>1-2</code>失效.</li>
</ul>
<ul>
<li>将<code>顶点3</code>和边<code>2-3</code>添加到<code>最小生成树</code>中,将边<code>3-6</code>添加到优先队列之中,边<code>1-3</code>失效.</li>
</ul>
<ul>
<li>将<code>顶点5</code>和边<code>5-7</code>添加到<code>最小生成树</code>中,将边<code>4-5</code>添加到优先队列中,边<code>1-5</code>失效.</li>
</ul>
<ul>
<li>从优先队列中删除失效边<code>1-3</code>,<code>1-5</code>,<code>2-7</code>.</li>
</ul>
<ul>
<li>将<code>顶点4</code>和边<code>4-5</code>添加到<code>最小生成树</code>中,将边<code>6-4</code>添加到优先队列中,边<code>4-7</code>,<code>0-4</code>失效.</li>
</ul>
<ul>
<li>从优先队列中删除失效边<code>1-2</code>,<code>4-7</code>,<code>0-4</code>.</li>
</ul>
<ul>
<li>将<code>顶点6</code>和边<code>6-2</code>添加到<code>最小生成树</code>中,和<code>顶点6</code>关联的其他边失效.</li>
</ul>
<ul>
<li>在添加<code>V</code>个顶点与<code>V - 1</code>条边之后,<code>最小生成树</code>就构造完成了,优先队列中剩余的边都为失效边.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyPrimMST</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EdgeWeightedGraph graph;</div><div class="line"></div><div class="line">    <span class="comment">// 记录最小生成树的总权重</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line"></div><div class="line">    <span class="comment">// 存储最小生成树的边</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Edge&gt; mst;</div><div class="line"></div><div class="line">    <span class="comment">// 标记这个顶点在树中</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span>[] marked;</div><div class="line"></div><div class="line">    <span class="comment">// 存储横切边的优先队列</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;Edge&gt; pq;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LazyPrimMST</span><span class="params">(EdgeWeightedGraph graph)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.graph = graph;</div><div class="line">        <span class="keyword">int</span> vertex = graph.vertex();</div><div class="line">        mst = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">        pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</div><div class="line">        marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertex];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++)</div><div class="line">            <span class="keyword">if</span> (!marked[v]) prim(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">        scanAndPushPQ(s);</div><div class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</div><div class="line">            Edge edge = pq.poll();  <span class="comment">// 取出权重最小的横切边</span></div><div class="line">            <span class="keyword">int</span> v = edge.either(), w = edge.other(v);  </div><div class="line">            <span class="keyword">assert</span> marked[v] || marked[w];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (marked[v] &amp;&amp; marked[w])</div><div class="line">                <span class="keyword">continue</span>; <span class="comment">// 忽略失效边</span></div><div class="line"></div><div class="line">            mst.add(edge); <span class="comment">// 添加边到最小生成树中</span></div><div class="line">            weight += edge.weight(); <span class="comment">// 更新总权重</span></div><div class="line">			<span class="comment">// 继续将非树顶点加入到树中并更新横切边</span></div><div class="line">            <span class="keyword">if</span> (!marked[v]) scanAndPushPQ(v); </div><div class="line">            <span class="keyword">if</span> (!marked[w]) scanAndPushPQ(w); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 标记顶点到树中,并且添加横切边到优先队列</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanAndPushPQ</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> !marked[v];</div><div class="line">        marked[v] = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (Edge e : graph.adj(v))</div><div class="line">            <span class="keyword">if</span> (!marked[e.other(v)]) pq.add(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Edge&gt; <span class="title">edges</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mst;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="即时实现"><a href="#即时实现" class="headerlink" title="即时实现"></a>即时实现</h4><hr>
<p>在即时实现中,将<code>v</code>添加到树中时,对于每个<code>非树顶点w</code>,<strong>不需要在优先队列中保存所有从<code>w</code>到<code>树顶点</code>的边,而只需要保存其中<code>权重</code>最小的边,所以在将<code>v</code>添加到<code>树</code>中后,要检查是否需要更新这条<code>权重</code>最小的边(如果<code>v-w</code>的<code>权重</code>更小的话).</strong></p>
<p>也可以认为只会在优先队列中保存每个<code>非树顶点w</code>的一条边(也是<code>权重</code>最小的那条边),将<code>w</code>和<code>树顶点</code>连接起来的其他<code>权重</code>较大的边迟早都会失效,所以没必要在优先队列中保存它们.</p>
<p>要实现即时版的<code>Prim算法</code>,需要使用两个顶点索引的数组<code>edgeTo[]</code>和<code>distTo[]</code>与一个索引优先队列,它们具有以下性质: </p>
<ul>
<li>如果<code>顶点v</code>不在树中但至少含有一条边和树相连,那么<code>edgeTo[v]</code>是将<code>v</code>和树连接的最短边,<code>distTo[v]</code>为这条边的<code>权重</code>.</li>
</ul>
<ul>
<li>所有这类<code>顶点v</code>都保存在索引优先队列中,索引<code>v</code>关联的值是<code>edgeTo[v]</code>的边的<code>权重</code>.</li>
</ul>
<ul>
<li>索引优先队列中的最小键即是<code>权重</code>最小的<code>横切边</code>的<code>权重</code>,而和它相关联的顶点<code>v</code>就是下一个将要被添加到<code>树</code>中的<code>顶点</code>.</li>
</ul>
<p><img src="http://algs4.cs.princeton.edu/43mst/images/prim-eager.png" alt="即时实现Prim算法的运行轨迹"></p>
<ul>
<li>将<code>顶点0</code>添加到<code>最小生成树</code>之中,将它的<code>邻接表</code>中的所有边添加到优先队列中(这些边是目前唯一已知的横切边).</li>
</ul>
<ul>
<li>将<code>顶点7</code>和边<code>0-7</code>添加到<code>最小生成树</code>,将边<code>1-7</code>和<code>5-7</code>添加到优先队列中,将连接<code>顶点4</code>与树的最小边由<code>0-4</code>替换为<code>4-7</code>.</li>
</ul>
<ul>
<li>将<code>顶点1</code>和边<code>1-7</code>添加到<code>最小生成树</code>,将边<code>1-3</code>添加到优先队列.</li>
</ul>
<ul>
<li>将<code>顶点2</code>和边<code>0-2</code>添加到最小生成树,将连接<code>顶点6</code>与树的最小边由<code>0-6</code>替换为<code>6-2</code>,将连接<code>顶点3</code>与树的最小边由<code>1-3</code>替换为<code>2-3</code>.</li>
</ul>
<ul>
<li>将<code>顶点3</code>和边<code>2-3</code>添加到<code>最小生成树</code>.</li>
</ul>
<ul>
<li>将<code>顶点5</code>和边<code>5-7</code>添加到<code>最小生成树</code>,将连接<code>顶点4</code>与树的最小边<code>4-7</code>替换为<code>4-5</code>.</li>
</ul>
<ul>
<li>将<code>顶点4</code>和边<code>4-5</code>添加到<code>最小生成树</code>.</li>
</ul>
<ul>
<li>将<code>顶点6</code>和边<code>6-2</code>添加到<code>最小生成树</code>.</li>
</ul>
<ul>
<li>在添加了<code>V - 1</code>条边之后,<code>最小生成树</code>构造完成并且优先队列为空.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimMST</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EdgeWeightedGraph graph;</div><div class="line"></div><div class="line">    <span class="comment">// 存放最小生成树中的边</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Edge[] edgeTo;</div><div class="line"></div><div class="line">    <span class="comment">// 每条边对应的权重</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] distTo;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span>[] marked;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IndexMinPQ&lt;Double&gt; pq;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimMST</span><span class="params">(EdgeWeightedGraph graph)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.graph = graph;</div><div class="line">        <span class="keyword">int</span> vertex = graph.vertex();</div><div class="line">        <span class="keyword">this</span>.edgeTo = <span class="keyword">new</span> Edge[vertex];</div><div class="line">        <span class="keyword">this</span>.marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.pq = <span class="keyword">new</span> IndexMinPQ&lt;&gt;(vertex);</div><div class="line">        <span class="keyword">this</span>.distTo = <span class="keyword">new</span> <span class="keyword">double</span>[vertex];</div><div class="line">		<span class="comment">// 将权重数组初始化为无穷大</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertex; i++)</div><div class="line">            distTo[i] = Double.POSITIVE_INFINITY;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++)</div><div class="line">            <span class="keyword">if</span> (!marked[v]) prim(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">		<span class="comment">// 将起点设为0.0并加入到优先队列</span></div><div class="line">        distTo[s] = <span class="number">0.0</span>;</div><div class="line">        pq.insert(s, distTo[s]);</div><div class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</div><div class="line">			<span class="comment">// 取出权重最小的边,优先队列中存的顶点是与树相连的非树顶点,</span></div><div class="line">			<span class="comment">// 同时它也是下一次要加入到树中的顶点</span></div><div class="line">            <span class="keyword">int</span> v = pq.delMin();</div><div class="line">            scan(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scan</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">		<span class="comment">// 将顶点加入到树中</span></div><div class="line">        marked[v] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Edge e : graph.adj(v)) &#123;</div><div class="line">            <span class="keyword">int</span> w = e.other(v);</div><div class="line">			<span class="comment">// 忽略失效边</span></div><div class="line">            <span class="keyword">if</span> (marked[w]) <span class="keyword">continue</span>;</div><div class="line">			<span class="comment">// 如果w与连接树顶点的边的权重小于其他w连接树顶点的边</span></div><div class="line">			<span class="comment">// 则进行替换更新</span></div><div class="line">            <span class="keyword">if</span> (e.weight() &lt; distTo[w]) &#123;</div><div class="line">                distTo[w] = e.weight();</div><div class="line">                edgeTo[w] = e;</div><div class="line">                <span class="keyword">if</span> (pq.contains(w))</div><div class="line">                    pq.decreaseKey(w, distTo[w]);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    pq.insert(w, distTo[w]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Edge&gt; <span class="title">edges</span><span class="params">()</span> </span>&#123;</div><div class="line">        Queue&lt;Edge&gt; mst = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; edgeTo.length; v++) &#123;</div><div class="line">            Edge e = edgeTo[v];</div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                mst.add(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mst;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> weight = <span class="number">0.0</span>;</div><div class="line">        <span class="keyword">for</span> (Edge e : edges())</div><div class="line">            weight += e.weight();</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不管是<code>延迟实现</code>还是<code>即时实现</code>,<code>Prim算法</code>的规律就是: <strong>在<code>树</code>的生长过程中,都是通过连接一个和新加入的<code>顶点</code>相邻的<code>顶点</code>.当新加入的<code>顶点</code>周围没有<code>非树顶点</code>时,树的生长又会从另一部分开始.</strong></p>
<h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><hr>
<p><code>Kruskal算法</code>的思想是<strong>按照边的<code>权重</code>顺序由小到大处理它们</strong>,将边添加到<code>最小生成树</code>,加入的边不会与已经在<code>树</code>中的边构成环,直到<code>树</code>中含有<code>V - 1</code>条边为止.<strong>这些边会逐渐由一片<code>森林</code>合并为一棵<code>树</code></strong>,也就是我们需要的<code>最小生成树</code>.</p>
<p><img src="http://algs4.cs.princeton.edu/43mst/images/kruskal.png" alt="Kruskal算法的运行轨迹"></p>
<h4 id="与Prim算法的区别"><a href="#与Prim算法的区别" class="headerlink" title="与Prim算法的区别"></a>与Prim算法的区别</h4><hr>
<ul>
<li><code>Prim算法</code>是一条边一条边地来构造<code>最小生成树</code>,每一步都会为<code>树</code>中添加一条边.</li>
</ul>
<ul>
<li><code>Kruskal算法</code>构造<code>最小生成树</code>也是一条边一条边地添加,但不同的是它寻找的边会连接一片<code>森林</code>中的两棵<code>树</code>.从一片由<code>V</code>棵单<code>顶点</code>的树构成的<code>森林</code>开始并不断地将两棵<code>树</code>合并(可以找到的最短边)直到只剩下一棵<code>树</code>,它就是<code>最小生成树</code>.</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr>
<p>要实现<code>Kruskal算法</code>需要借助<code>Union-Find</code>数据结构,它是一种树型的数据结构,用于处理一些不相交集合的合并与查询问题.</p>
<p>关于<code>Union-Find</code>的更多资料可以参考下面的链接: </p>
<ul>
<li><a href="https://github.com/SylvanasSun/algs4-study/blob/15ae228a1bc6a75465a96681caaa93eff3462327/src/main/java/chapter1_fundamentals/C1_5_UnionFind/UF.java" target="_blank" rel="external">Union-Find简单实现</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure" target="_blank" rel="external">Disjoint-set data structure - Wikipedia</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KruskalMST</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 这条队列用于记录最小生成树中的边集</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Edge&gt; mst;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KruskalMST</span><span class="params">(EdgeWeightedGraph graph)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mst = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">        <span class="comment">// 创建一个优先队列,并将图的所有边添加到优先队列中</span></div><div class="line">        PriorityQueue&lt;Edge&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Edge e : graph.edges()) &#123;</div><div class="line">            pq.add(e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> vertex = graph.vertex();</div><div class="line">		<span class="comment">// 创建一个Union-Find</span></div><div class="line">        UF uf = <span class="keyword">new</span> UF(vertex);</div><div class="line">		<span class="comment">// 一条一条地添加边到最小生成树,直到添加了 V - 1条边</span></div><div class="line">        <span class="keyword">while</span> (!pq.isEmpty() &amp;&amp; mst.size() &lt; vertex - <span class="number">1</span>) &#123;</div><div class="line">			<span class="comment">// 取出权重最小的边</span></div><div class="line">            Edge e = pq.poll();</div><div class="line">            <span class="keyword">int</span> v = e.either();</div><div class="line">            <span class="keyword">int</span> w = e.other(v);</div><div class="line">            <span class="comment">// 如果这条边的两个顶点不在一个分量中(对于union-find数据结构中而言)</span></div><div class="line">            <span class="keyword">if</span> (!uf.connected(v, w)) &#123;</div><div class="line">				<span class="comment">// 将v和w归并(对于union-find数据结构中而言),然后将边添加进树中,并计算更新权重</span></div><div class="line">                uf.union(v, w); </div><div class="line">                mst.add(e);</div><div class="line">                weight += e.weight();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Edge&gt; <span class="title">edges</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mst;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码实现的<code>Kruskal算法</code>使用了一条队列来保存<code>最小生成树</code>的边集,一条优先队列来保存还未检查的边,一个<code>Union-Find</code>来判断失效边.</p>
<h4 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h4><hr>
<table>
<thead>
<tr>
<th>算法</th>
<th>空间复杂度</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>Prim(延时)</td>
<td>E</td>
<td>ElogE</td>
</tr>
<tr>
<td>Prim(即时)</td>
<td>V</td>
<td>ElogV</td>
</tr>
<tr>
<td>Kruskal</td>
<td>E</td>
<td>ElogE</td>
</tr>
</tbody>
</table>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Minimum_spanning_tree" target="_blank" rel="external">Minimum spanning tree - Wikipedia</a></li>
</ul>
<ul>
<li><a href="http://algs4.cs.princeton.edu/43mst/" target="_blank" rel="external">Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne</a></li>
</ul>
<h3 id="图的那点事儿"><a href="#图的那点事儿" class="headerlink" title="图的那点事儿"></a>图的那点事儿</h3><hr>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/18/2017-07-18-Graph_UndirectedGraph/">图的那点事儿(1)-无向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/23/2017-07-23-Graph_DirectedGraphs/">图的那点事儿(2)-有向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/25/2017-07-25-Graph_WeightedUndirectedGraph/">图的那点事儿(3)-加权无向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/27/2017-07-27-Graph_WeightedDigraph">图的那点事儿(4)-加权有向图</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文作者为: &lt;a href=&quot;https://github.com/SylvanasSun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SylvanasSun&lt;/a&gt;.转载请务必将下面这段话置于文章开头处(保留超链接).&lt;br
    
    </summary>
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/categories/Algorithms/"/>
    
      <category term="Graph" scheme="https://sylvanassun.github.io/categories/Algorithms/Graph/"/>
    
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/tags/Algorithms/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="Graph" scheme="https://sylvanassun.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>图的那点事儿(2)-有向图</title>
    <link href="https://sylvanassun.github.io/2017/07/23/2017-07-23-Graph_DirectedGraphs/"/>
    <id>https://sylvanassun.github.io/2017/07/23/2017-07-23-Graph_DirectedGraphs/</id>
    <published>2017-07-23T03:00:00.000Z</published>
    <updated>2017-07-30T08:15:33.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文作者为: <a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun</a>.转载请务必将下面这段话置于文章开头处(保留超链接).<br>本文转发自<a href="https://sylvanassun.github.io/">SylvanasSun Blog</a>,原文链接: <a href="https://sylvanassun.github.io/2017/07/23/2017-07-23-Graph_DirectedGraphs/">https://sylvanassun.github.io/2017/07/23/2017-07-23-Graph_DirectedGraphs/</a></p>
</blockquote>
<h3 id="有向图的性质"><a href="#有向图的性质" class="headerlink" title="有向图的性质"></a>有向图的性质</h3><hr>
<p><code>有向图</code>与<code>无向图</code>不同,<strong>它的<code>边</code>是单向的,每条边所连接的两个顶点都是一个有序对,它们的邻接性是单向的.</strong></p>
<p>在<code>有向图</code>中,一条<code>有向边</code><strong>由第一个<code>顶点</code>指出并指向第二个<code>顶点</code></strong>,<strong>一个<code>顶点</code>的<code>出度</code>为由该<code>顶点</code>指出的<code>边</code>的总数;一个<code>顶点</code>的<code>入度</code>为指向该<code>顶点</code>的边的总数</strong>.</p>
<p><img src="http://algs4.cs.princeton.edu/42digraph/images/digraph-anatomy.png" alt="有向图的解析"></p>
<p><code>v-&gt;w</code>表示一条由<code>v</code>指向<code>w</code>的边,在一幅<code>有向图</code>中,两个<code>顶点</code>的关系可能有以下四种(特殊图除外): </p>
<ol>
<li>没有<code>边</code>相连.</li>
</ol>
<ol>
<li>存在一条从<code>v</code>到<code>w</code>的<code>边</code>: <code>v-&gt;w</code>.</li>
</ol>
<ol>
<li>存在一条从<code>w</code>到<code>v</code>的<code>边</code>: <code>w-&gt;v</code>.</li>
</ol>
<ol>
<li>既存在<code>v-&gt;w</code>,也存在<code>w-&gt;v</code>,也就是一条<code>双向边</code>.</li>
</ol>
<p>当存在从<code>v</code>到<code>w</code>的<code>有向路径</code>时,称<code>顶点w</code>能够由<code>顶点v</code>达到.但在<code>有向图</code>中,由<code>v</code>能够到达<code>w</code>并不意味着由<code>w</code>也能到达<code>v</code>(但每个<code>顶点</code>都是能够到达它自己的).</p>
<h3 id="有向图的实现"><a href="#有向图的实现" class="headerlink" title="有向图的实现"></a>有向图的实现</h3><hr>
<p><code>有向图</code>的实现与<code>无向图</code>差不多,只不过在<code>边</code>的方向上有所不同.(本文中的所有完整代码可以在我的<a href="https://github.com/SylvanasSun/algs4-study/tree/master/src/main/java/chapter4_graphs/C4_2_DirectedGraphs" target="_blank" rel="external">GitHub</a>中查看)</p>
<p><img src="http://algs4.cs.princeton.edu/42digraph/images/digraph-api.png" alt="有向图的API"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Digraph</span> <span class="keyword">implements</span> <span class="title">Graph</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEWLINE = System.getProperty(<span class="string">"line.separator"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// number of vertices in this digraph</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> vertex;</div><div class="line"></div><div class="line">    <span class="comment">// number of edges in this digraph</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> edge;</div><div class="line"></div><div class="line">    <span class="comment">// adj[v] = adjacency list for vertex v</span></div><div class="line">    <span class="keyword">private</span> Bag&lt;Integer&gt;[] adj;</div><div class="line"></div><div class="line">    <span class="comment">// indegree[v] = indegree of vertex v</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] indegree;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Digraph</span><span class="params">(<span class="keyword">int</span> vertex)</span> </span>&#123;</div><div class="line">        validateVertex(vertex);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.vertex = vertex;</div><div class="line">        <span class="keyword">this</span>.edge = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.indegree = <span class="keyword">new</span> <span class="keyword">int</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.adj = (Bag&lt;Integer&gt;[]) <span class="keyword">new</span> Bag[vertex];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertex; i++)</div><div class="line">            adj[i] = <span class="keyword">new</span> Bag&lt;Integer&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Digraph</span><span class="params">(Scanner scanner)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (scanner == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Scanner must be not null."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> vertex = scanner.nextInt();</div><div class="line">            validateVertex(vertex);</div><div class="line">            <span class="keyword">this</span>.vertex = vertex;</div><div class="line">            <span class="keyword">this</span>.indegree = <span class="keyword">new</span> <span class="keyword">int</span>[vertex];</div><div class="line">            <span class="keyword">this</span>.adj = (Bag&lt;Integer&gt;[]) <span class="keyword">new</span> Bag[vertex];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertex; i++)</div><div class="line">                adj[i] = <span class="keyword">new</span> Bag&lt;Integer&gt;();</div><div class="line"></div><div class="line">            <span class="keyword">int</span> edge = scanner.nextInt();</div><div class="line">            validateEdge(edge);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</div><div class="line">                <span class="keyword">int</span> v = scanner.nextInt();</div><div class="line">                <span class="keyword">int</span> w = scanner.nextInt();</div><div class="line">                addEdge(v, w);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid input format in Digraph constructor"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Digraph</span><span class="params">(Digraph digraph)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(digraph.vertex);</div><div class="line">        <span class="keyword">this</span>.edge = digraph.edge;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++)</div><div class="line">            <span class="keyword">this</span>.indegree[v] = digraph.indegree(v);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++) &#123;</div><div class="line">            Stack&lt;Integer&gt; reverse = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w : digraph.adj(v))</div><div class="line">                reverse.push(w);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w : reverse)</div><div class="line">                <span class="keyword">this</span>.adj[v].add(w);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">vertex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> vertex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">edge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> edge;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注意这里与无向图不同,只在v的邻接表中添加了w</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        validateVertex(w);</div><div class="line">        adj[v].add(w);</div><div class="line">		<span class="comment">// w的入度+ 1</span></div><div class="line">        indegree[w]++;</div><div class="line">        edge++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> adj[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indegree</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> indegree[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * v的出度就是它邻接表中的顶点数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outdegree</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> adj[v].size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">degree</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> adj[v].size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 它返回该有向图的一个副本,但所有边的方向都会被反转.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Digraph <span class="title">reverse</span><span class="params">()</span> </span>&#123;</div><div class="line">        Digraph reverse = <span class="keyword">new</span> Digraph(vertex);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w : adj[v]) &#123;</div><div class="line">                reverse.addEdge(w, v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> reverse;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(String.format(<span class="string">"Vertexes: %s, Edges: %s"</span>, vertex, edge));</div><div class="line">        sb.append(NEWLINE);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++) &#123;</div><div class="line">            sb.append(String.format(<span class="string">"vertex %d, "</span>, v));</div><div class="line">            sb.append(String.format(<span class="string">"indegree: %d, outdegree: %d"</span>, indegree(v), outdegree(v)));</div><div class="line">            sb.append(NEWLINE);</div><div class="line">            sb.append(<span class="string">"adjacent point: "</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w : adj[v])</div><div class="line">                sb.append(w).append(<span class="string">" "</span>);</div><div class="line"></div><div class="line">            sb.append(NEWLINE);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateEdge</span><span class="params">(<span class="keyword">int</span> edge)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (edge &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Number of edges in a Digraph must be nonnegative."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> vertex)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (vertex &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Number of vertex in a Digraph must be nonnegative."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可达性"><a href="#可达性" class="headerlink" title="可达性"></a>可达性</h3><hr>
<p>对于”是否存在一条从集合中的任意<code>顶点</code>到达给定<code>顶点v</code>的有向路径?”等类似问题,可以使用<code>深度优先搜索</code>或<code>广度优先搜索</code>(与<code>无向图</code>的实现一致,只不过传入的<code>图</code>的类型不同),<code>有向图</code>生成的搜索轨迹甚至要比<code>无向图</code>还要简单.</p>
<p>对于<code>可达性分析</code>的一个典型应用就是内存管理系统.例如,<code>JVM</code>使用<code>多点可达性分析</code>的方法来判断一个<code>对象</code>是否可以进行回收: 所有<code>对象</code>组成一幅<code>有向图</code>,其中有多个<code>Root顶点</code>(它是由<code>JVM</code>自己决定的)作为<code>起点</code>,如果一个<code>对象</code>从<code>Root顶点</code>不可达,那么这个<code>对象</code>就可以进行回收了.</p>
<h3 id="环"><a href="#环" class="headerlink" title="环"></a>环</h3><hr>
<p>在与<code>有向图</code>相关的实际应用中,<code>有向环</code>特别的重要.我们需要知道一幅<code>有向图</code>中是否包含<code>有向环</code>.在任务调度问题或其他许多问题中会不允许存在<code>有向环</code>,所以对于<code>环</code>的检测是很重要的.</p>
<p>使用<code>深度优先搜索</code>解决这个问题并不困难,递归调用隐式使用的栈表示的正是”当前”正在遍历的<code>有向路径</code>,一旦找到了一条<code>边v-&gt;w</code>且<code>w</code>已经存在于栈中,就等于找到了一个<code>环</code>(栈表示的是一条由<code>w</code>到<code>v</code>的<code>有向路径</code>,而<code>v-&gt;w</code>正好补全了这个<code>环</code>).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectedCycle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Digraph digraph;</div><div class="line"></div><div class="line">    <span class="comment">// marked[v] = has vertex v been marked?</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span>[] marked;</div><div class="line"></div><div class="line">    <span class="comment">// edgeTo[v] = previous vertex on path to v</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] edgeTo;</div><div class="line"></div><div class="line">    <span class="comment">// onStack[v] = is vertex on the stack?</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span>[] onStack;</div><div class="line"></div><div class="line">    <span class="comment">// directed cycle (or null if no such cycle)</span></div><div class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; cycle;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirectedCycle</span><span class="params">(Digraph digraph)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.digraph = digraph;</div><div class="line">        <span class="keyword">int</span> vertex = digraph.vertex();</div><div class="line">        <span class="keyword">this</span>.marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.edgeTo = <span class="keyword">new</span> <span class="keyword">int</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.onStack = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertex];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++) &#123;</div><div class="line">			<span class="comment">// 已经找到环时就不再需要继续搜索了</span></div><div class="line">            <span class="keyword">if</span> (!marked[v] &amp;&amp; cycle == <span class="keyword">null</span>)</div><div class="line">                dfs(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cycle != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">cycle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cycle;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> vertex)</span> </span>&#123;</div><div class="line">        marked[vertex] = <span class="keyword">true</span>;</div><div class="line">        onStack[vertex] = <span class="keyword">true</span>; <span class="comment">// 用于模拟递归调用栈</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w : digraph.adj(vertex)) &#123;</div><div class="line">            <span class="keyword">if</span> (cycle != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!marked[w]) &#123;</div><div class="line">                edgeTo[w] = vertex;</div><div class="line">                dfs(w);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (onStack[w]) &#123;</div><div class="line">				<span class="comment">// 当w已被标记且在栈中时: 找到环</span></div><div class="line">                cycle = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = vertex; x != w; x = edgeTo[x])</div><div class="line">                    cycle.push(x);</div><div class="line">                cycle.push(w);</div><div class="line">                cycle.push(vertex);</div><div class="line">                <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">		<span class="comment">// 这条路径已经到头,从栈中弹出</span></div><div class="line">        onStack[vertex] = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// certify that digraph has a directed cycle if it reports one</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (hasCycle()) &#123;</div><div class="line">            <span class="comment">// verify cycle</span></div><div class="line">            <span class="keyword">int</span> first = -<span class="number">1</span>, last = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v : cycle()) &#123;</div><div class="line">                <span class="keyword">if</span> (first == -<span class="number">1</span>) first = v;</div><div class="line">                last = v;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (first != last) &#123;</div><div class="line">                System.err.printf(<span class="string">"cycle begins with %d and ends with %d\n"</span>, first, last);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><hr>
<p><code>拓扑排序</code>等价于计算优先级限制下的调度问题的,所谓优先级限制的调度问题即是在给定一组需要完成的任务与关于任务完成的先后次序的优先级限制,需要在满足限制条件的前提下来安排任务.</p>
<p><code>拓扑排序</code>需要的是一幅<code>有向无环图</code>,如果这幅<code>图</code>中含有<code>环</code>,那么它肯定不是<code>拓扑有序</code>的(一个带有环的调度问题是无解的).</p>
<p>在学习<code>拓扑排序</code>之前,需要先知道<code>顶点</code>的排序.</p>
<h4 id="顶点排序"><a href="#顶点排序" class="headerlink" title="顶点排序"></a>顶点排序</h4><hr>
<p>使用<code>深度优先搜索</code>来记录<code>顶点排序</code>是一个很好的选择(正好只会访问每个<code>顶点</code>一次),我们借助一些<code>数据结构</code>来保存<code>顶点排序</code>的顺序: </p>
<ul>
<li>前序: 在递归调用之前将<code>顶点</code>加入队列.</li>
</ul>
<ul>
<li>后序: 在递归调用之后将<code>顶点</code>加入队列.</li>
</ul>
<ul>
<li>逆后序: 在递归调用之后将<code>顶点</code>压入栈.</li>
</ul>
<p><img src="http://algs4.cs.princeton.edu/42digraph/images/depth-first-orders.png" alt="顶点排序的轨迹"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthFirstOrder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Graph graph;</div><div class="line"></div><div class="line">    <span class="comment">// marked[v] = has v been marked in dfs?</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span>[] marked;</div><div class="line"></div><div class="line">    <span class="comment">// pre[v]    = preorder  number of v</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] pre;</div><div class="line"></div><div class="line">    <span class="comment">// post[v]   = postorder number of v</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] post;</div><div class="line"></div><div class="line">    <span class="comment">// vertices in preorder</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Integer&gt; preorder;</div><div class="line"></div><div class="line">    <span class="comment">// vertices in postorder</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Integer&gt; postorder;</div><div class="line"></div><div class="line">    <span class="comment">// counter or preorder numbering</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> preCounter;</div><div class="line"></div><div class="line">    <span class="comment">// counter for postorder numbering</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> postCounter;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepthFirstOrder</span><span class="params">(Graph graph)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.graph = graph;</div><div class="line">        <span class="keyword">int</span> vertex = graph.vertex();</div><div class="line">        <span class="keyword">this</span>.pre = <span class="keyword">new</span> <span class="keyword">int</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.post = <span class="keyword">new</span> <span class="keyword">int</span>[vertex];</div><div class="line">        <span class="keyword">this</span>.preorder = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">        <span class="keyword">this</span>.postorder = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">        <span class="keyword">this</span>.marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertex];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vertex; v++)</div><div class="line">            <span class="keyword">if</span> (!marked[v]) dfs(v);</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> pre[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">post</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> post[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">post</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> postorder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">pre</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> preorder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 逆后序,遍历后序队列并压入栈中</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">reversePost</span><span class="params">()</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; reverse = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : postorder)</div><div class="line">            reverse.push(v);</div><div class="line">        <span class="keyword">return</span> reverse;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> vertex)</span> </span>&#123;</div><div class="line">        marked[vertex] = <span class="keyword">true</span>;</div><div class="line">		<span class="comment">// 前序</span></div><div class="line">        pre[vertex] = preCounter++;</div><div class="line">        preorder.add(vertex);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w : graph.adj(vertex)) &#123;</div><div class="line">            <span class="keyword">if</span> (!marked[w])</div><div class="line">                dfs(w);</div><div class="line">        &#125;</div><div class="line">		<span class="comment">// 后序</span></div><div class="line">        post[vertex] = postCounter++;</div><div class="line">        postorder.add(vertex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// check that pre() and post() are consistent with pre(v) and post(v)</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// check that post(v) is consistent with post()</span></div><div class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : post()) &#123;</div><div class="line">            <span class="keyword">if</span> (post(v) != r) &#123;</div><div class="line">                System.out.println(<span class="string">"post(v) and post() inconsistent"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            r++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// check that pre(v) is consistent with pre()</span></div><div class="line">        r = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : pre()) &#123;</div><div class="line">            <span class="keyword">if</span> (pre(v) != r) &#123;</div><div class="line">                System.out.println(<span class="string">"pre(v) and pre() inconsistent"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            r++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// throw an IllegalArgumentException unless &#123;@code 0 &lt;= v &lt; V&#125;</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> V = marked.length;</div><div class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (V - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="拓扑排序的实现"><a href="#拓扑排序的实现" class="headerlink" title="拓扑排序的实现"></a>拓扑排序的实现</h4><hr>
<p>所谓<code>拓扑排序</code>就是<code>无环有向图</code>的<code>逆后序</code>,现在已经知道了如何检测<code>环</code>与<code>顶点排序</code>,那么实现<code>拓扑排序</code>就很简单了.</p>
<p><img src="http://algs4.cs.princeton.edu/42digraph/images/topological-sort.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topological</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// topological order</span></div><div class="line">    <span class="keyword">private</span> Iterable&lt;Integer&gt; order;</div><div class="line"></div><div class="line">    <span class="comment">// rank[v] = position of vertex v in topological order</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] rank;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Topological</span><span class="params">(Digraph digraph)</span> </span>&#123;</div><div class="line">        DirectedCycle directedCycle = <span class="keyword">new</span> DirectedCycle(digraph);</div><div class="line">		<span class="comment">// 只有这幅图没有环时,才进行计算拓扑排序</span></div><div class="line">        <span class="keyword">if</span> (!directedCycle.hasCycle()) &#123;</div><div class="line">            DepthFirstOrder depthFirstOrder = <span class="keyword">new</span> DepthFirstOrder(digraph);</div><div class="line">			<span class="comment">// 拓扑排序即是逆后序</span></div><div class="line">            order = depthFirstOrder.reversePost();</div><div class="line">            rank = <span class="keyword">new</span> <span class="keyword">int</span>[digraph.vertex()];</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v : order)</div><div class="line">                rank[v] = i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">order</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> order;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> order != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">if</span> (hasOrder()) <span class="keyword">return</span> rank[v];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// throw an IllegalArgumentException unless &#123;@code 0 &lt;= v &lt; V&#125;</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> V = rank.length;</div><div class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (V - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="强连通性"><a href="#强连通性" class="headerlink" title="强连通性"></a>强连通性</h3><hr>
<p>在一幅<code>无向图</code>中,如果有一条路径连接顶点<code>v</code>和<code>w</code>,则它们就是<code>连通</code>的(既可以从<code>w</code>到达<code>v</code>,也可以从<code>v</code>到达<code>w</code>).但在<code>有向图</code>中,如果从顶点<code>v</code>有一条有向路径到达<code>w</code>,则<code>w</code>是从<code>v</code>可达的,但从<code>w</code>到达<code>v</code>的路径可能存在也可能不存在.</p>
<p><strong><code>强连通性</code>就是两个顶点<code>v</code>和<code>w</code>是互相可达的.</strong><code>有向图</code>中的<code>强连通性</code>具有以下性质: </p>
<ul>
<li>自反性: 任意<code>顶点v</code>和自己都是<code>强连通性</code>的(<code>有向图</code>中顶点都是自己可达的).</li>
</ul>
<ul>
<li>对称性: 如果<code>v</code>和<code>w</code>是强连通的,那么<code>w</code>和<code>v</code>也是强连通的.</li>
</ul>
<ul>
<li>传递性: 如果<code>v</code>和<code>w</code>是强连通的且<code>w</code>和<code>x</code>也是强连通的,那么<code>v</code>和<code>x</code>也是强连通的.</li>
</ul>
<p><code>强连通性</code>将所有<code>顶点</code>分为了一些等价类,每个等价类都是由相互为强连通的<code>顶点</code>的最大子集组成的.这些子集称为<code>强连通分量</code>,它的定义是基于顶点的,而非边.</p>
<p>一个含有<code>V</code>个顶点的<code>有向图</code>含有<code>1 ~ V</code>个<code>强连通分量</code>.一个<code>强连通图</code>只含有一个<code>强连通分量</code>,而一个<code>有向无环图</code>中则含有<code>V</code>个<code>强连通分量</code>.</p>
<h4 id="Kosaraju算法"><a href="#Kosaraju算法" class="headerlink" title="Kosaraju算法"></a>Kosaraju算法</h4><hr>
<p><a href="https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm" target="_blank" rel="external">Kosaraju</a>算法是用于枚举图中每个<code>强连通分量</code>内的所有顶点,它主要有以下步骤: </p>
<ul>
<li>在给定一幅<code>有向图</code>$G$中,取得它的反向图$G^R$.</li>
</ul>
<ul>
<li>利用<code>深度优先搜索</code>得到$G^R$的逆后序排列.</li>
</ul>
<ul>
<li>按照上述逆后序的序列进行<code>深度优先搜索</code></li>
</ul>
<ul>
<li>同一个<code>深度优先搜索</code>递归子程序中访问的所有<code>顶点</code>都在同一个<code>强连通分量</code>内.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KosarajuSharirSCC</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Digraph digraph;</div><div class="line"></div><div class="line">    <span class="comment">// marked[v] = has vertex v been visited?</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span>[] marked;</div><div class="line"></div><div class="line">    <span class="comment">// id[v] = id of strong component containing v</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] id;</div><div class="line"></div><div class="line">    <span class="comment">// number of strongly-connected components</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KosarajuSharirSCC</span><span class="params">(Digraph digraph)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.digraph = digraph;</div><div class="line">        <span class="keyword">int</span> vertex = digraph.vertex();</div><div class="line"></div><div class="line">        <span class="comment">// compute reverse postorder of reverse graph</span></div><div class="line">        DepthFirstOrder depthFirstOrder = <span class="keyword">new</span> DepthFirstOrder(digraph.reverse());</div><div class="line"></div><div class="line">        <span class="comment">// run DFS on G, using reverse postorder to guide calculation</span></div><div class="line">        marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertex];</div><div class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[vertex];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : depthFirstOrder.reversePost()) &#123;</div><div class="line">            <span class="keyword">if</span> (!marked[v]) &#123;</div><div class="line">                dfs(v);</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// check that id[] gives strong components</span></div><div class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">(digraph)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        marked[v] = <span class="keyword">true</span>;</div><div class="line">        id[v] = count;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w : digraph.adj(v)) &#123;</div><div class="line">            <span class="keyword">if</span> (!marked[w])</div><div class="line">                dfs(w);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stronglyConnected</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        validateVertex(w);</div><div class="line">        <span class="keyword">return</span> id[v] == id[w];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        <span class="keyword">return</span> id[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// does the id[] array contain the strongly connected components?</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(Digraph G)</span> </span>&#123;</div><div class="line">        TransitiveClosure tc = <span class="keyword">new</span> TransitiveClosure(G);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; G.vertex(); v++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; G.vertex(); w++) &#123;</div><div class="line">                <span class="keyword">if</span> (stronglyConnected(v, w) != (tc.reachable(v, w) &amp;&amp; tc.reachable(w, v)))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// throw an IllegalArgumentException unless &#123;@code 0 &lt;= v &lt; V&#125;</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> V = marked.length;</div><div class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (V - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="传递闭包"><a href="#传递闭包" class="headerlink" title="传递闭包"></a>传递闭包</h3><hr>
<p><img src="http://algs4.cs.princeton.edu/42digraph/images/transitive-closure.png" alt=""></p>
<p>在一幅有向图<code>G</code>中,<code>传递闭包</code>是由相同的一组<code>顶点</code>组成的另一幅<code>有向图</code>,在<code>传递闭包</code>中存在一条从<code>v</code>指向<code>w</code>的边且仅当在<code>G</code>中<code>w</code>是从<code>v</code>可达的.</p>
<p>由于<code>有向图</code>的性质,每个<code>顶点</code>对于自己都是可达的,所以<code>传递闭包</code>会含有<code>V</code>个自环.</p>
<p>通常将<code>传递闭包</code>表示为一个布尔值矩阵,其中<code>v</code>行<code>w</code>列的值为<code>true</code>代表当且仅当<code>w</code>是从<code>v</code>可达的.</p>
<p><code>传递闭包</code>不适合于处理<code>大型有向图</code>,因为构造函数所需的空间与$V^2$成正比,所需的时间和$V(V+E)$成正比.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransitiveClosure</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DirectedDFS[] tc;  <span class="comment">// tc[v] = reachable from v</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransitiveClosure</span><span class="params">(Digraph G)</span> </span>&#123;</div><div class="line">        tc = <span class="keyword">new</span> DirectedDFS[G.vertex()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; G.vertex(); v++)</div><div class="line">            tc[v] = <span class="keyword">new</span> DirectedDFS(G, v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">reachable</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">        validateVertex(v);</div><div class="line">        validateVertex(w);</div><div class="line">        <span class="keyword">return</span> tc[v].marked(w);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// throw an IllegalArgumentException unless &#123;@code 0 &lt;= v &lt; V&#125;</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> V = tc.length;</div><div class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (V - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr>
<ul>
<li><a href="http://algs4.cs.princeton.edu/42digraph/" target="_blank" rel="external">Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm" target="_blank" rel="external">Kosaraju’s algorithm - Wikipedia</a></li>
</ul>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Transitive_closure" target="_blank" rel="external">Transitive closure - Wikipedia</a></li>
</ul>
<h3 id="图的那点事儿"><a href="#图的那点事儿" class="headerlink" title="图的那点事儿"></a>图的那点事儿</h3><hr>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/18/2017-07-18-Graph_UndirectedGraph/">图的那点事儿(1)-无向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/23/2017-07-23-Graph_DirectedGraphs/">图的那点事儿(2)-有向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/25/2017-07-25-Graph_WeightedUndirectedGraph/">图的那点事儿(3)-加权无向图</a></li>
</ul>
<ul>
<li><a href="https://sylvanassun.github.io/2017/07/27/2017-07-27-Graph_WeightedDigraph">图的那点事儿(4)-加权有向图</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文作者为: &lt;a href=&quot;https://github.com/SylvanasSun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SylvanasSun&lt;/a&gt;.转载请务必将下面这段话置于文章开头处(保留超链接).&lt;br
    
    </summary>
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/categories/Algorithms/"/>
    
      <category term="Graph" scheme="https://sylvanassun.github.io/categories/Algorithms/Graph/"/>
    
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/tags/Algorithms/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
      <category term="Graph" scheme="https://sylvanassun.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>电影&lt;&lt;社交网络&gt;&gt;中的&quot;FaceMash&quot;算法</title>
    <link href="https://sylvanassun.github.io/2017/07/19/2017-07-19-FaceMash/"/>
    <id>https://sylvanassun.github.io/2017/07/19/2017-07-19-FaceMash/</id>
    <published>2017-07-19T10:00:00.000Z</published>
    <updated>2017-07-19T11:02:26.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/view/photo/raw/public/p679478005.jpg" alt=""></p>
<blockquote>
<p>最近在看<a href="https://movie.douban.com/subject/3205624/" target="_blank" rel="external">&lt;&lt;社交网络&gt;&gt;</a>时,发现了一个用于投票排名的算法,自己折腾实现了一下.</p>
</blockquote>
<p>在影片中,卷西饰演的扎克伯格在被妹子甩了之后(其实是他自己直男癌),一气之下黑了附近女生宿舍的照片数据库打算做一个<code>FaceMash</code>(通过投票的方式来选出漂亮的女生,同时它也是<code>Facebook</code>的前身,后来这个网站由于流量太大,搞崩了哈佛大学的网络而被强行关闭了),并使用了他的好基友爱德华多用于计算国际象棋排名的算法.</p>
<p><strong>这是一部很好看的电影,如果没有看过我强烈推荐去看一看.</strong></p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><hr>
<p><img src="http://wx4.sinaimg.cn/large/63503acbly1fhpbwf3qy2j20vx0hx74u.jpg" alt=""></p>
<p>这个算法是用来计算<code>期望胜率</code>的,但影片中其实写的是错误的,正确的公式应该为: </p>
<p>$$E_a = \frac{1} {1 + 10 ^ {(R_b - R_a) / 400}}$$</p>
<ul>
<li>$E_a$就是<code>a</code>的期望胜率.</li>
</ul>
<ul>
<li>$R_b,R_a$是<code>b</code>与<code>a</code>的<code>Rank</code>分数.</li>
</ul>
<ul>
<li>当$R_a,R_b$都相同时,它们的<code>期望胜率</code>都为<code>0.5</code>,即$E_a = \frac{1} {1+10^0} = 0.5$.</li>
</ul>
<p>电影中只给出了计算<code>期望胜率</code>的算法,但我们还需要一个计算新的<code>Rank</code>分数的算法,公式如下: </p>
<p>$$R_n = R_o + K(W - E)$$</p>
<ul>
<li>$R_n$代表新的<code>Rank</code>,$R_o$自然就是旧的<code>Rank</code>了.</li>
</ul>
<ul>
<li><code>K</code>为一个定值,我把它设为<code>10</code>.</li>
</ul>
<ul>
<li><code>W</code>是<code>胜负值</code>,胜者为<code>1</code>,败者为<code>0</code>;<code>E</code>就是我们上面计算的<code>期望胜率</code>.</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><hr>
<p>有了这两个核心公式,我们就可以开始实现这个算法了,但在代码实现之前,我们先验证一下公式: </p>
<p>假设有两个女孩<code>A</code>与<code>B</code>,她们的基础<code>Rank</code>都为<code>1400</code>,通过上述的推论我们已经得知,<strong><code>当A</code>,<code>B</code>的分值相同时,她们的期望胜率都为0.5</strong>.</p>
<p>如果,我选择了<code>A</code>,则<code>A</code>的胜负值变为<code>1</code>,<code>B</code>的胜负值为<code>0</code>,然后我们套用公式2可以得出: </p>
<ul>
<li>$R_a = 1400 + 10 * (1 - 0.5) = 1405$</li>
</ul>
<ul>
<li>$R_b = 1400 + 10 * (0 - 0.5) = 1395$</li>
</ul>
<p>由于她们的分数不再相同,所以套用公式1计算现在的<code>期望胜率</code>: </p>
<ul>
<li>$R_a = \frac{1} {1 + 10 ^ {(1395 - 1405) / 400}} \approx 0.51439 $</li>
</ul>
<ul>
<li>$R_b = \frac{1} {1 + 10 ^ {(1405 - 1395) / 400}} \approx 0.48561$</li>
</ul>
<p>下面是我用<code>C</code>写的一个小程序,它初始化了两个”女孩”,然后根据输入来判断哪个胜出,并动态计算<code>Rank</code>与<code>期望胜率</code>.</p>
<p><img src="http://wx1.sinaimg.cn/mw690/63503acbly1fhpcccyw1bj20di0gcdg7.jpg" alt=""></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> rank;</div><div class="line">    <span class="keyword">double</span> expect_rate;</div><div class="line">&#125; girl;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_girl</span><span class="params">(girl g)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Girl name: %s, rank: %d, expect_rate: %.5f\n"</span>,g.name,g.rank,g.expect_rate);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">compute_expect_rate</span><span class="params">(girl *a,girl *b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a_rank = a-&gt;rank;</div><div class="line">    <span class="keyword">int</span> b_rank = b-&gt;rank;</div><div class="line">    <span class="comment">// expect rate formula</span></div><div class="line">    <span class="comment">// Ea = 1 / (1 + 10 ^ ((Rb-Ra) / 400))</span></div><div class="line">    <span class="keyword">double</span> a_rank_differ = (<span class="keyword">double</span>) (b_rank - a_rank) / <span class="number">400</span>;</div><div class="line">    <span class="keyword">double</span> a_rank_rate = <span class="built_in">pow</span>(<span class="number">10</span>,a_rank_differ);</div><div class="line">    a-&gt;expect_rate = <span class="number">1</span> / (<span class="number">1</span> + a_rank_rate);</div><div class="line">    <span class="comment">// Eb = 1 / (1 + 10 ^ ((Ra-Rb) / 400))</span></div><div class="line">    <span class="keyword">double</span> b_rank_differ = (<span class="keyword">double</span>) (a_rank - b_rank) / <span class="number">400</span>;</div><div class="line">    <span class="keyword">double</span> b_rank_rate = <span class="built_in">pow</span>(<span class="number">10</span>,b_rank_differ);</div><div class="line">    b-&gt;expect_rate = <span class="number">1</span> / (<span class="number">1</span> + b_rank_rate);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// new rank formula: Rn = Ro + K(W - E)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">compute_rank</span><span class="params">(girl *a,girl *b,<span class="keyword">int</span> a_win_rate,<span class="keyword">int</span> b_win_rate)</span> </span>&#123;</div><div class="line">    a-&gt;rank = a-&gt;rank + K * (a_win_rate - a-&gt;expect_rate);</div><div class="line">    b-&gt;rank = b-&gt;rank + K * (b_win_rate - b-&gt;expect_rate);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> a_girl_name[<span class="number">20</span>];</div><div class="line">    <span class="keyword">char</span> b_girl_name[<span class="number">20</span>];</div><div class="line"></div><div class="line">    girl a = &#123;.name = <span class="string">"A Gril"</span>,.rank = <span class="number">1400</span>&#125;;</div><div class="line">    girl b = &#123;.name = <span class="string">"B Gril"</span>,.rank = <span class="number">1400</span>&#125;;</div><div class="line"></div><div class="line">    compute_expect_rate(&amp;a,&amp;b);</div><div class="line"></div><div class="line">    read_girl(a);</div><div class="line">    read_girl(b);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">char</span> choice[<span class="number">2</span>];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Choice A or B?\n"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,choice);</div><div class="line">        <span class="keyword">if</span> (choice[<span class="number">0</span>] == <span class="string">'A'</span>) &#123;</div><div class="line">            compute_rank(&amp;a,&amp;b,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">            compute_expect_rate(&amp;a,&amp;b);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice[<span class="number">0</span>] == <span class="string">'B'</span>) &#123;</div><div class="line">            compute_rank(&amp;a,&amp;b,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">            compute_expect_rate(&amp;a,&amp;b);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Invalid choice!\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        read_girl(a);</div><div class="line">        read_girl(b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>本文作者为<a href="https://github.com/SylvanasSun" target="_blank" rel="external">SylvanasSun(sylvanassun_xtz@163.com)</a>,转载请务必指明原文链接.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/view/photo/raw/public/p679478005.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在看&lt;a href=&quot;https://movie.douban.c
    
    </summary>
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/categories/Algorithms/"/>
    
      <category term="Other" scheme="https://sylvanassun.github.io/categories/Algorithms/Other/"/>
    
    
      <category term="Algorithms" scheme="https://sylvanassun.github.io/tags/Algorithms/"/>
    
      <category term="2017" scheme="https://sylvanassun.github.io/tags/2017/"/>
    
  </entry>
  
</feed>
